{"version":3,"sources":["assets\\script\\rolling_lottery\\bezier_curve.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["module _bezier_curve {\r\n    /*---------enum_private */\r\n    /*---------enum_public */\r\n    /*---------interface_private */\r\n    /*---------interface_public */\r\n    /*---------var | const */\r\n    /*---------class_private */\r\n    /*---------class_public */\r\n}\r\n\r\n/**贝塞尔曲线 */\r\nclass bezier_curve {\r\n    constructor(point_os_?: cc.Vec2[]) {\r\n        this.control_point_os = point_os_;\r\n    }\r\n    /* ***************private*************** */\r\n    /* ***************public*************** */\r\n    /**控制点 */\r\n    public control_point_os: cc.Vec2[];\r\n    /* -------------------------------segmentation------------------------------- */\r\n    /* ***************功能函数*************** */\r\n    /**递归阶乘 */\r\n    private _factorial(v_n_: number) {\r\n        if (v_n_ <= 1) {\r\n            return 1;\r\n        } else {\r\n            return v_n_ * this._factorial(v_n_ - 1);\r\n        }\r\n    }\r\n    /**\r\n     * 获取曲线上某点的位置\r\n     * @param pos_n_ min: 0, max: 1\r\n     */\r\n    public point(pos_n_: number): cc.Vec2 {\r\n        if (!this.control_point_os) {\r\n            cc.error(\"不存在控制点\");\r\n            return;\r\n        }\r\n        if (this.control_point_os.length < 2) {\r\n            cc.error(\"控制点不能少于2\");\r\n            return;\r\n        }\r\n        if (pos_n_ < 0 || pos_n_ > 1) {\r\n            pos_n_ = pos_n_ < 0 ? 0 : 1;\r\n        }\r\n        if (pos_n_ === 0) {\r\n            return this.control_point_os[0];\r\n        } else if (pos_n_ === 1) {\r\n            return this.control_point_os[this.control_point_os.length - 1];\r\n        }\r\n        let result_o = cc.v2();\r\n        let index1_n = this.control_point_os.length - 1;\r\n        this.control_point_os.forEach((v1_o, k1_s)=> {\r\n            if(!k1_s) {\r\n                result_o.x += v1_o.x * Math.pow((1 - pos_n_), index1_n - k1_s) * Math.pow(pos_n_, k1_s);\r\n                result_o.y += v1_o.y * Math.pow((1 - pos_n_), index1_n - k1_s) * Math.pow(pos_n_, k1_s);\r\n            } else {\r\n                result_o.x += this._factorial(index1_n) / this._factorial(k1_s) / this._factorial(index1_n - k1_s) * v1_o.x * Math.pow(( 1 - pos_n_ ), index1_n - k1_s) * Math.pow(pos_n_, k1_s) \r\n                result_o.y += this._factorial(index1_n) / this._factorial(k1_s) / this._factorial(index1_n - k1_s) * v1_o.y * Math.pow(( 1 - pos_n_ ), index1_n - k1_s) * Math.pow(pos_n_, k1_s) \r\n            }\r\n        });\r\n        return result_o;\r\n    }\r\n}\r\n\r\nmodule bezier_curve {\r\n    /*---------enum_private */\r\n    /*---------enum_public */\r\n    /*---------interface_private */\r\n    /*---------interface_public */\r\n    /*---------var | const */\r\n    /*---------class_private */\r\n    /*---------class_public */\r\n}\r\n\r\nexport default bezier_curve;"]}