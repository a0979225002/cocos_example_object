{"version":3,"sources":["..\\..\\..\\..\\assets\\src/assets\\src\\sea.js"],"names":["calcFaceNormals","positions","indices","normals","Array","length","i","l","vA","vB","vC","pA","cc","v3","pB","pC","cb","ab","vec3","vmath","fromArray","out","a","offset","x","y","z","il","sub","cross","tempNormal","normalizeSelf","calcVertexNormals","Class","extends","Component","properties","rotateSpeed","wavesMinAmp","wavesMaxAmp","wavesMinSpeed","wavesMaxSpeed","start","node","_eulerAngles","data","getComponent","mesh","MeshRenderer","waves","push","ang","Math","random","PI","amp","speed","loopCylinder","cylinder","heightSegments","radialSegments","indexOffset","row","i1","i2","i3","i4","setIndices","update","dt","vprops","cos","sin","setVertices","gfx","ATTR_POSITION"],"mappings":"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","file":"sea.js","sourceRoot":"..\\..\\..\\..\\assets\\src","sourcesContent":["\r\nfunction calcFaceNormals (positions, indices, normals) {\r\n    normals = normals || new Array(positions.length);\r\n    for (let i = 0, l = normals.length; i < l; i++) {\r\n        normals[i] = 0;\r\n    }\r\n\r\n    let vA, vB, vC;\r\n    let pA = cc.v3(), pB = cc.v3(), pC = cc.v3();\r\n    let cb = cc.v3(), ab = cc.v3();\r\n    let vec3 = cc.vmath.vec3;\r\n\r\n    function fromArray (out, a, offset) {\r\n        out.x = a[offset];\r\n        out.y = a[offset+1];\r\n        out.z = a[offset+2];\r\n    }\r\n\r\n    for (let i = 0, il = indices.length; i < il; i += 3) {\r\n\r\n        vA = indices[i + 0] * 3;\r\n        vB = indices[i + 1] * 3;\r\n        vC = indices[i + 2] * 3;\r\n\r\n        fromArray(pA, positions, vA);\r\n        fromArray(pB, positions, vB);\r\n        fromArray(pC, positions, vC);\r\n\r\n        vec3.sub(cb, pC, pB);\r\n        vec3.sub(ab, pA, pB);\r\n        vec3.cross(cb, cb, ab);\r\n\r\n        normals[vA] += cb.x;\r\n        normals[vA + 1] += cb.y;\r\n        normals[vA + 2] += cb.z;\r\n\r\n        normals[vB] += cb.x;\r\n        normals[vB + 1] += cb.y;\r\n        normals[vB + 2] += cb.z;\r\n\r\n        normals[vC] += cb.x;\r\n        normals[vC + 1] += cb.y;\r\n        normals[vC + 2] += cb.z;\r\n    }\r\n\r\n    let tempNormal = cc.v3();\r\n    for (let i = 0, l = normals.length; i < l; i+=3) {\r\n        tempNormal.x = normals[i];\r\n        tempNormal.y = normals[i+1];\r\n        tempNormal.z = normals[i+2];\r\n\r\n        tempNormal.normalizeSelf();\r\n\r\n        normals[i] = tempNormal.x;\r\n        normals[i+1] = tempNormal.y;\r\n        normals[i+2] = tempNormal.z;\r\n    }\r\n\r\n    return normals;\r\n}\r\n\r\nfunction calcVertexNormals (positions, indices, normals) {\r\n    normals = normals || new Array(positions.length);\r\n    for (let i = 0, l = normals.length; i < l; i++) {\r\n        normals[i] = 0;\r\n    }\r\n\r\n    let vA, vB, vC;\r\n    let pA = cc.v3(), pB = cc.v3(), pC = cc.v3();\r\n    let cb = cc.v3(), ab = cc.v3();\r\n    let vec3 = cc.vmath.vec3;\r\n\r\n    function fromArray (out, a, offset) {\r\n        out.x = a[offset];\r\n        out.y = a[offset+1];\r\n        out.z = a[offset+2];\r\n    }\r\n\r\n    for (let i = 0, il = indices.length; i < il; i += 3) {\r\n\r\n        vA = indices[i + 0] * 3;\r\n        vB = indices[i + 1] * 3;\r\n        vC = indices[i + 2] * 3;\r\n\r\n        fromArray(pA, positions, vA);\r\n        fromArray(pB, positions, vB);\r\n        fromArray(pC, positions, vC);\r\n\r\n        vec3.sub(cb, pC, pB);\r\n        vec3.sub(ab, pA, pB);\r\n        vec3.cross(cb, cb, ab);\r\n\r\n        normals[vA] += cb.x;\r\n        normals[vA + 1] += cb.y;\r\n        normals[vA + 2] += cb.z;\r\n\r\n        normals[vB] += cb.x;\r\n        normals[vB + 1] += cb.y;\r\n        normals[vB + 2] += cb.z;\r\n\r\n        normals[vC] += cb.x;\r\n        normals[vC + 1] += cb.y;\r\n        normals[vC + 2] += cb.z;\r\n    }\r\n\r\n    let tempNormal = cc.v3();\r\n    for (let i = 0, l = normals.length; i < l; i+=3) {\r\n        tempNormal.x = normals[i];\r\n        tempNormal.y = normals[i+1];\r\n        tempNormal.z = normals[i+2];\r\n\r\n        tempNormal.normalizeSelf();\r\n\r\n        normals[i] = tempNormal.x;\r\n        normals[i+1] = tempNormal.y;\r\n        normals[i+2] = tempNormal.z;\r\n    }\r\n\r\n    return normals;\r\n}\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        rotateSpeed: 360,\r\n        wavesMinAmp: 5,\r\n        wavesMaxAmp: 20,\r\n        wavesMinSpeed: 0.001,\r\n        wavesMaxSpeed: 0.003,\r\n    },\r\n\r\n    start () {\r\n        this.node._eulerAngles = cc.v3(-90, 0, 0);\r\n        let data = this.data = this.getComponent('cylinder').data;\r\n        this.mesh = this.getComponent(cc.MeshRenderer).mesh;\r\n\r\n        this.waves = [];\r\n        let positions = data.positions;\r\n        for (let i = 0, l = data.positions.length; i < l; i += 3) {\r\n            this.waves.push({\r\n                x: positions[i], y: positions[i + 1], z: positions[i + 2],\r\n                ang: Math.random() * Math.PI * 2,\r\n                amp: this.wavesMinAmp + Math.random() * (this.wavesMaxAmp - this.wavesMinAmp),\r\n                speed: this.wavesMinSpeed + Math.random() * (this.wavesMaxSpeed - this.wavesMinSpeed)\r\n            });\r\n        };\r\n\r\n        this.loopCylinder();\r\n    },\r\n\r\n    loopCylinder () {\r\n        let cylinder = this.getComponent('cylinder');\r\n        let heightSegments = cylinder.heightSegments;\r\n        let radialSegments = cylinder.radialSegments;\r\n\r\n        let indices = cylinder.data.indices;\r\n        let indexOffset = indices.length;\r\n        let row = radialSegments + 1;\r\n        for (let y = 0; y < heightSegments; ++y) {\r\n            let i1 = y * row + radialSegments;\r\n            let i2 = (y + 1) * row + radialSegments;\r\n            let i3 = (y + 1) * row;\r\n            let i4 = y * row;\r\n    \r\n            // face one\r\n            indices[indexOffset] = i1; ++indexOffset;\r\n            indices[indexOffset] = i4; ++indexOffset;\r\n            indices[indexOffset] = i2; ++indexOffset;\r\n\r\n            // face two\r\n            indices[indexOffset] = i4; ++indexOffset;\r\n            indices[indexOffset] = i3; ++indexOffset;\r\n            indices[indexOffset] = i2; ++indexOffset;\r\n        }\r\n        \r\n        this.mesh.setIndices(indices);\r\n    },\r\n\r\n    update (dt) {\r\n        let positions = this.data.positions;\r\n        for (let i = 0, l = positions.length; i < l; i += 3) {\r\n            let vprops = this.waves[i / 3];\r\n            positions[i] = vprops.x + Math.cos(vprops.ang) * vprops.amp;\r\n            positions[i + 1] = vprops.y + Math.sin(vprops.ang) * vprops.amp;\r\n            vprops.ang += vprops.speed * dt;\r\n        }\r\n        this.mesh.setVertices(cc.gfx.ATTR_POSITION, positions);\r\n\r\n        // let normals = calcVertexNormals(positions, this.data.indices, this.data.normals);\r\n        // this.mesh.setVertices(cc.gfx.ATTR_NORMAL, normals);\r\n    },\r\n});\r\n"]}