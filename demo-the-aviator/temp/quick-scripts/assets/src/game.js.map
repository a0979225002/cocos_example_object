{"version":3,"sources":["game.js"],"names":["equal","a","b","Math","abs","module","exports","cc","Class","extends","Component","properties","playerXRange","playerYRange","playerDefaultY","seaHeight","skyHeight","skyHeightRange","world","Node","speed","ratioSpeedDistance","material","Material","levelDistance","upgradeRatio","distanceLabel","Label","levelLabel","energyProgress","ProgressBar","collisionDistance","energy","collisionDamage","player","enemyManager","onLoad","window","game","reset","angles","v3","distance","lastLevelDistance","level","createMeshNode","name","mesh","shadowCast","node","is3DNode","renderer","addComponent","MeshRenderer","setMaterial","shadowCastingMode","ShadowCastingMode","ON","update","dt","z","eulerAngles","checkCollision","emit","updateUI","string","progress","zeroPos","v2","playerPos","enemyPos","dif","convertToWorldSpaceAR","enemies","getComponent","i","length","enemy","sub","mag"],"mappings":"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","file":"game.js","sourceRoot":"..\\..\\..\\..\\assets\\src","sourcesContent":["\r\nfunction equal (a, b) {\r\n    return Math.abs(a - b) < 10e-6;\r\n}\r\n\r\nmodule.exports = cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        playerXRange: 100,\r\n        playerYRange: 80,\r\n        playerDefaultY: 100,\r\n\r\n        seaHeight: 600, \r\n\r\n        skyHeight: 150,\r\n        skyHeightRange: 200,\r\n\r\n        world: cc.Node,\r\n        speed: 30,\r\n        ratioSpeedDistance: 0.05,\r\n\r\n        material: cc.Material,\r\n        levelDistance: 500,\r\n        \r\n        upgradeRatio: 1.2,\r\n\r\n        distanceLabel: cc.Label,\r\n        levelLabel: cc.Label,\r\n        energyProgress: cc.ProgressBar,\r\n\r\n        collisionDistance: 15,\r\n\r\n        energy: 1,\r\n        collisionDamage: 0.1,\r\n\r\n        player: cc.Node,\r\n        enemyManager: cc.Node\r\n    },\r\n    onLoad () {\r\n        window.game = this;\r\n        this.reset();\r\n    },\r\n    reset () {\r\n        this.angles = cc.v3();\r\n        this.distance = 0;\r\n        this.lastLevelDistance = 0;\r\n\r\n        this.level = 1;\r\n    },\r\n\r\n    createMeshNode (name, mesh, shadowCast) {\r\n        let node = new cc.Node(name);\r\n        node.is3DNode = true;\r\n        let renderer = node.addComponent(cc.MeshRenderer);\r\n        renderer.setMaterial(0, this.material);\r\n        renderer.mesh = mesh;\r\n        renderer.shadowCastingMode = shadowCast ? cc.MeshRenderer.ShadowCastingMode.ON : false;\r\n        return node;\r\n    },\r\n\r\n    update (dt) {\r\n        this.angles.z += this.speed * dt;\r\n        this.world.eulerAngles = this.angles;\r\n\r\n        this.checkCollision();\r\n        \r\n        let distance = this.speed * dt * this.ratioSpeedDistance;\r\n        this.distance += distance;\r\n        this.lastLevelDistance += distance;\r\n        \r\n        if (this.lastLevelDistance > this.levelDistance) {\r\n            this.level ++;\r\n            this.lastLevelDistance = this.lastLevelDistance % this.levelDistance;\r\n            this.speed *= this.upgradeRatio;\r\n            this.levelDistance *= this.upgradeRatio;\r\n            this.node.emit('level-upgrade');\r\n        }\r\n    \r\n        this.updateUI();\r\n    },\r\n\r\n    updateUI () {\r\n        this.distanceLabel.string = this.distance | 0;\r\n        this.levelLabel.string = this.level;\r\n        if (!equal(this.energyProgress.progress, this.energy)) {\r\n            this.energyProgress.progress -= this.collisionDamage / 20;\r\n        }\r\n    },\r\n\r\n    checkCollision: (function () {\r\n        let zeroPos = cc.v2();\r\n        let playerPos = cc.v2();\r\n        let enemyPos = cc.v2();\r\n        let dif = cc.v2();\r\n        return function () {\r\n            playerPos = this.player.convertToWorldSpaceAR(zeroPos, playerPos);\r\n\r\n            let enemies = this.enemyManager.getComponent('enemy-manager').enemies;\r\n            for (let i = 0; i < enemies.length; i++) {\r\n                let enemy = enemies[i];\r\n                enemyPos = enemies[i].convertToWorldSpaceAR(zeroPos, enemyPos);\r\n                let distance = playerPos.sub(enemyPos, dif).mag();\r\n                if (distance < this.collisionDistance) {\r\n                    this.energy -= this.collisionDamage;\r\n                    this.node.emit('collide-enemy', {dif, enemy, distance});\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    })()\r\n});\r\n"]}