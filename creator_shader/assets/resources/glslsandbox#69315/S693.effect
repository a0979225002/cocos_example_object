// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: {  value: white }
        texture2: {  value: white }
        u_time: {value: 1}
        u_Position: {value: [1, 1,0, 0]}
        u_Radius: {value: 1}
        u_Vague: {value: 1}
}%


CCProgram vs %{
precision highp float;

#include <cc-global>
#include <cc-local>

attribute vec3 a_position;
attribute lowp vec4 a_color;
attribute mediump vec2 a_uv0;

varying mediump vec2 v_uv0;
varying lowp vec4 v_color;
varying lowp vec4 v_wp;

void main () {
  mat4 mvp;
  
  mvp = cc_matViewProj;
  
  v_color = a_color;

  gl_Position = mvp * vec4(a_position, 1);   
  v_wp = cc_matWorld * vec4(a_position, 1);

  // vec4 pos = vec4(a_position, 1);

  //   #if CC_USE_MODEL
  //   pos = cc_matViewProj * cc_matWorld * pos;
  //   #else
  //   pos = cc_matViewProj * pos;
  //   #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

  //   v_color = a_color;

  //   gl_Position = pos;
}

}%


CCProgram fs %{
precision mediump float;

uniform sampler2D texture;
uniform sampler2D texture2;

uniform Constants1 {
  vec4 u_Position;
  float u_Radius;
  float u_time;
  float u_Vague;
};

varying mediump vec2 v_uv0;
varying lowp vec4 v_color;
varying lowp vec4 v_wp;

#define resolution vec2(960.,640.)
#define time u_time

void main( void ) 
{
	vec2 p = ( gl_FragCoord.xy / resolution.xy ) * 2.0 - 1.0;
	
	vec3 c = vec3( 0.0 );
	
	float amplitude = 0.10; 
	float glowT = sin(time) * 0.5 + 0.5;
	float glowFactor = mix( 0.15, 0.35, glowT );
	c += vec3(0.02, 0.03, 0.13) * ( glowFactor * abs( 0.5 / sin(p.x + sin( p.y + time ) * amplitude ) ));
	c += vec3(0.02, 0.10, 0.03) * ( glowFactor * abs( 0.23 / sin(p.x + sin( p.y + time+1.00 ) * amplitude+0.1 ) ));

	gl_FragColor = vec4( c, 1.0 );

}

}%
