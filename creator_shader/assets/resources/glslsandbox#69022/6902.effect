// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: {  value: white }
        texture2: {  value: white }
        u_time: {value: 1}
        u_Position: {value: [1, 1,0, 0]}
        u_Radius: {value: 1}
        u_Vague: {value: 1}
}%


CCProgram vs %{
precision highp float;

#include <cc-global>
#include <cc-local>

attribute vec3 a_position;
attribute lowp vec4 a_color;
attribute mediump vec2 a_uv0;

varying mediump vec2 v_uv0;
varying lowp vec4 v_color;
varying lowp vec4 v_wp;

void main () {
  mat4 mvp;
  
  mvp = cc_matViewProj;
  
  v_color = a_color;

  gl_Position = mvp * vec4(a_position, 1);   
  v_wp = cc_matWorld * vec4(a_position, 1);

  // vec4 pos = vec4(a_position, 1);

  //   #if CC_USE_MODEL
  //   pos = cc_matViewProj * cc_matWorld * pos;
  //   #else
  //   pos = cc_matViewProj * pos;
  //   #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

  //   v_color = a_color;

  //   gl_Position = pos;
}

}%


CCProgram fs %{
precision mediump float;

uniform sampler2D texture;
uniform sampler2D texture2;

uniform Constants1 {
  vec4 u_Position;
  float u_Radius;
  float u_time;
  float u_Vague;
};

varying mediump vec2 v_uv0;
varying lowp vec4 v_color;
varying lowp vec4 v_wp;

#define resolution vec2(960.,640.)
#define time u_time

void main( void )
{
    float time = (time+30.) * 30.0;

    float s = 0.0, v = 0.0;
    vec2 uv = (-resolution.xy + 2.0 * gl_FragCoord.xy ) / resolution;
	float t = time*0.01;
	uv.x += sin(t) * 0.5;
	float si = sin(t + 2.17); // ...Squiffy rotation matrix!
	float co = cos(t);
	uv *= mat2(co, si, -si, co);
	vec3 col = vec3(0.0);
	vec3 init = vec3(0.25, 0.25 + sin(time * 0.001) * 0.4, floor(time) * 0.0008);
	for (int r = 0; r < 100; r++) 
	{
		vec3 p = init + s * vec3(uv, 0.143);
		p.z = mod(p.z, 2.0);
		for (int i=0; i < 10; i++)	p = abs(p * 2.04) / dot(p, p) - 0.75;
		v += length(p * p) * smoothstep(0.0, 0.5, 0.9 - s) * .0025;
		// Get a purple and cyan effect by biasing the RGB in different ways...
		col +=  vec3(v * 0.8, 1.1 - s * 0.5, .7 + v * 0.5) * v * 0.013;
		s += .005;
	}
	gl_FragColor = vec4(col, 1.0);
}


}%
