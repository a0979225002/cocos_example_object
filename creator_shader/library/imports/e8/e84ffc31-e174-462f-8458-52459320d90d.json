{
  "__type__": "cc.EffectAsset",
  "_name": "BookShader_noise",
  "_objFlags": 0,
  "_native": "",
  "properties": null,
  "techniques": [
    {
      "passes": [
        {
          "blendState": {
            "targets": [
              {
                "blend": true
              }
            ]
          },
          "rasterizerState": {
            "cullMode": 0
          },
          "properties": {
            "texture": {
              "value": "white",
              "type": 29
            },
            "texture2": {
              "value": "white",
              "type": 29
            },
            "u_time": {
              "value": [
                1
              ],
              "type": 13
            },
            "u_mouse": {
              "value": [
                1,
                1
              ],
              "type": 14
            }
          },
          "program": "BookShader_noise|vs|fs"
        }
      ]
    }
  ],
  "shaders": [
    {
      "hash": 491481830,
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nattribute vec3 a_position;\nattribute lowp vec4 a_color;\nattribute mediump vec2 a_uv0;\nvarying mediump vec2 v_uv0;\nvarying lowp vec4 v_color;\nvarying lowp vec4 v_wp;\n void main () {\n   mat4 mvp;\n   mvp = cc_matViewProj;\n   v_color = a_color;\n   gl_Position = mvp * vec4(a_position, 1);\n   v_wp = cc_matWorld * vec4(a_position, 1);\n   v_uv0 = a_uv0;\n }",
        "frag": "\nprecision mediump float;\nuniform sampler2D texture;\nuniform sampler2D texture2;\nuniform Constants1 {\n  vec2 u_mouse;\n  float u_time;\n};\nvarying mediump vec2 v_uv0;\nvarying lowp vec4 v_color;\nvarying lowp vec4 v_wp;\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n#if MAIN_1\nvoid main() {\n  vec2 uv = vec2(1. - v_uv0.x,v_uv0.y);vec2 st = uv;;\n    vec3 color = vec3(.0);\n    vec2 posarr[5];\n    posarr[0] = vec2(0.1,0.8);\n    posarr[1] = vec2(0.3,0.3);\n    posarr[2] = vec2(0.5,0.6);\n    posarr[3] = vec2(0.9,0.7);\n    posarr[4] = u_mouse/vec2(960.,640.);\n    float mindis = 100.;\n    mindis = min(mindis, distance(posarr[0],uv));\n    mindis = min(mindis, distance(posarr[1],uv));\n    mindis = min(mindis, distance(posarr[2],uv));\n    mindis = min(mindis, distance(posarr[3],uv));\n    mindis = min(mindis, distance(posarr[4],uv));\n    color = vec3(mindis);\n    color += 1. - step(.01,mindis);\n    gl_FragColor = vec4(color,1.0);\n}\n #elif MAIN_2\n void main() {\n   vec2 uv = vec2(1. - v_uv0.x,v_uv0.y);vec2 st = uv;;\n   vec3 color = vec3(0.0);\n   uv *= 10.;\n   vec2 i_uv = floor(uv);\n   vec2 f_uv = fract( uv );\n   vec2 pointInTile = random2(i_uv);\n   float dis = distance( pointInTile, f_uv );\n   color = vec3(dis);\n   color += step(dis,.02);\n   gl_FragColor = vec4(color,1.);\n }\n #else\n void main() {\n   vec2 uv = vec2(1. - v_uv0.x,v_uv0.y);vec2 st = uv;;\n   vec3 color = vec3(0.0);\n   const int tileNum = 3;\n   uv *= float(tileNum);\n   vec2 i_uv = floor(uv);\n   vec2 f_uv = fract( uv );\n   vec2 pointInTile = random2(i_uv);\n   vec2 savepoint;\n   float dis = 100.;\n   for(int i = -1; i <= 1; i++) {\n     for(int j = -1; j <= 1; j++) {\n       vec2 neighbor = vec2(float(i),float(j));\n       vec2 point = random2(i_uv+neighbor);\n       point = 1. + sin(u_time + 3.*point);\n       point *= .5;\n       float curdis = distance(f_uv,point+neighbor);\n       if( curdis < dis){\n         dis = curdis;\n         savepoint = point + neighbor;\n       }\n     }\n   }\n   color = vec3(dis);\n   color += step(dis,.02);\n   color.r += step(.98, f_uv.x) + step(.98, f_uv.y);\n   gl_FragColor = vec4(color,1.);\n }\n #endif"
      },
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute lowp vec4 a_color;\nattribute mediump vec2 a_uv0;\nvarying mediump vec2 v_uv0;\nvarying lowp vec4 v_color;\nvarying lowp vec4 v_wp;\n void main () {\n   mat4 mvp;\n   mvp = cc_matViewProj;\n   v_color = a_color;\n   gl_Position = mvp * vec4(a_position, 1);\n   v_wp = cc_matWorld * vec4(a_position, 1);\n   v_uv0 = a_uv0;\n }",
        "frag": "\nprecision mediump float;\nuniform sampler2D texture;\nuniform sampler2D texture2;\nuniform vec2 u_mouse;\nuniform float u_time;\nvarying mediump vec2 v_uv0;\nvarying lowp vec4 v_color;\nvarying lowp vec4 v_wp;\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n#if MAIN_1\nvoid main() {\n  vec2 uv = vec2(1. - v_uv0.x,v_uv0.y);vec2 st = uv;;\n    vec3 color = vec3(.0);\n    vec2 posarr[5];\n    posarr[0] = vec2(0.1,0.8);\n    posarr[1] = vec2(0.3,0.3);\n    posarr[2] = vec2(0.5,0.6);\n    posarr[3] = vec2(0.9,0.7);\n    posarr[4] = u_mouse/vec2(960.,640.);\n    float mindis = 100.;\n    mindis = min(mindis, distance(posarr[0],uv));\n    mindis = min(mindis, distance(posarr[1],uv));\n    mindis = min(mindis, distance(posarr[2],uv));\n    mindis = min(mindis, distance(posarr[3],uv));\n    mindis = min(mindis, distance(posarr[4],uv));\n    color = vec3(mindis);\n    color += 1. - step(.01,mindis);\n    gl_FragColor = vec4(color,1.0);\n}\n #elif MAIN_2\n void main() {\n   vec2 uv = vec2(1. - v_uv0.x,v_uv0.y);vec2 st = uv;;\n   vec3 color = vec3(0.0);\n   uv *= 10.;\n   vec2 i_uv = floor(uv);\n   vec2 f_uv = fract( uv );\n   vec2 pointInTile = random2(i_uv);\n   float dis = distance( pointInTile, f_uv );\n   color = vec3(dis);\n   color += step(dis,.02);\n   gl_FragColor = vec4(color,1.);\n }\n #else\n void main() {\n   vec2 uv = vec2(1. - v_uv0.x,v_uv0.y);vec2 st = uv;;\n   vec3 color = vec3(0.0);\n   const int tileNum = 3;\n   uv *= float(tileNum);\n   vec2 i_uv = floor(uv);\n   vec2 f_uv = fract( uv );\n   vec2 pointInTile = random2(i_uv);\n   vec2 savepoint;\n   float dis = 100.;\n   for(int i = -1; i <= 1; i++) {\n     for(int j = -1; j <= 1; j++) {\n       vec2 neighbor = vec2(float(i),float(j));\n       vec2 point = random2(i_uv+neighbor);\n       point = 1. + sin(u_time + 3.*point);\n       point *= .5;\n       float curdis = distance(f_uv,point+neighbor);\n       if( curdis < dis){\n         dis = curdis;\n         savepoint = point + neighbor;\n       }\n     }\n   }\n   color = vec3(dis);\n   color += step(dis,.02);\n   color.r += step(.98, f_uv.x) + step(.98, f_uv.y);\n   gl_FragColor = vec4(color,1.);\n }\n #endif"
      },
      "builtins": {
        "globals": {
          "blocks": [
            {
              "name": "CCGlobal",
              "defines": []
            }
          ],
          "samplers": []
        },
        "locals": {
          "blocks": [
            {
              "name": "CCLocal",
              "defines": []
            }
          ],
          "samplers": []
        }
      },
      "defines": [
        {
          "name": "MAIN_1",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "MAIN_2",
          "type": "boolean",
          "defines": []
        }
      ],
      "blocks": [
        {
          "name": "Constants1",
          "members": [
            {
              "name": "u_mouse",
              "type": 14,
              "count": 1
            },
            {
              "name": "u_time",
              "type": 13,
              "count": 1
            }
          ],
          "defines": [],
          "binding": 0
        }
      ],
      "samplers": [
        {
          "name": "texture",
          "type": 29,
          "count": 1,
          "defines": [],
          "binding": 30
        },
        {
          "name": "texture2",
          "type": 29,
          "count": 1,
          "defines": [],
          "binding": 31
        }
      ],
      "record": null,
      "name": "BookShader_noise|vs|fs"
    }
  ]
}