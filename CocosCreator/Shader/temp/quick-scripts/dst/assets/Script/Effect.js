
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Effect.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '95cf8nZ8PJKb7FY6WnuyTb/', 'Effect');
// Script/Effect.js

"use strict";

var _default_vert = require("../Shaders/ccShader_Default_Vert.js");

var _default_vert_no_mvp = require("../Shaders/ccShader_Default_Vert_noMVP.js");

var _glass_frag = require("../Shaders/ccShader_Effect04_Frag.js");

cc.Class({
  "extends": cc.Component,
  properties: {
    glassFactor: 1.0,
    flagShader: {
      "default": '"precision mediump float; uniform float time; uniform vec2 mouse; uniform vec2 resolution; const int numBlobs = 128; void main( void ) {     vec2 p = (gl_FragCoord.xy / resolution.x) - vec2(0.5, 0.5 * (resolution.y / resolution.x));     vec3 c = vec3(0.0);     for (int i=0; i<numBlobs; i++)  {       float px = sin(float(i)*0.1 + 0.5) * 0.4;       float py = sin(float(i*i)*0.01 + 0.4*time) * 0.2;       float pz = sin(float(i*i*i)*0.001 + 0.3*time) * 0.3 + 0.4;      float radius = 0.005 / pz;      vec2 pos = p + vec2(px, py);        float z = radius - length(pos);         if (z < 0.0) z = 0.0;       float cc = z / radius;      c += vec3(cc * (sin(float(i*i*i)) * 0.5 + 0.5), cc * (sin(float(i*i*i*i*i)) * 0.5 + 0.5), cc * (sin(float(i*i*i*i)) * 0.5 + 0.5));  }   gl_FragColor = vec4(c.x+p.y, c.y+p.y, c.z+p.y, 1.0); }",',
      multiline: true,
      tooltip: 'FlagShader'
    }
  },
  onLoad: function onLoad() {
    this.parameters = {
      startTime: Date.now(),
      time: 0.0,
      mouse: {
        x: 0.0,
        y: 0.0
      },
      resolution: {
        x: 0.0,
        y: 0.0
      }
    };
    this.node.on(cc.Node.EventType.MOUSE_MOVE, function (event) {
      this.parameters.mouse.x = this.node.getContentSize().width / event.getLocationX();
      this.parameters.mouse.y = this.node.getContentSize().height / event.getLocationY();
    }, this);
    this.node.on(cc.Node.EventType.TOUCH_MOVE, function (event) {
      this.parameters.mouse.x = this.node.getContentSize().width / event.getLocationX();
      this.parameters.mouse.y = this.node.getContentSize().height / event.getLocationY();
    }, this);

    this._use();
  },
  update: function update(dt) {
    if (this.glassFactor >= 40) {
      this.glassFactor = 0;
    }

    this.glassFactor += dt * 3;

    if (this._program) {
      this._program.use();

      this.updateGLParameters();

      if (cc.sys.isNative) {
        var glProgram_state = cc.GLProgramState.getOrCreateWithGLProgram(this._program);
        glProgram_state.setUniformVec2("resolution", this.parameters.resolution);
        glProgram_state.setUniformFloat("time", this.parameters.time);
        glProgram_state.setUniformVec2("mouse_touch", this.parameters.mouse);
      } else {
        this._program.setUniformLocationWith2f(this._resolution, this.parameters.resolution.x, this.parameters.resolution.y);

        this._program.setUniformLocationWith1f(this._time, this.parameters.time);

        this._program.setUniformLocationWith2f(this._mouse, this.parameters.mouse.x, this.parameters.mouse.x);
      }
    }
  },
  updateGLParameters: function updateGLParameters() {
    this.parameters.time = (Date.now() - this.parameters.startTime) / 1000;
    this.parameters.resolution.x = this.node.getContentSize().width;
    this.parameters.resolution.y = this.node.getContentSize().height;
  },
  _use: function _use() {
    if (cc.sys.isNative) {
      cc.log("use native GLProgram");
      this._program = new cc.GLProgram();

      this._program.initWithString(_default_vert_no_mvp, this.flagShader);

      this._program.addAttribute(cc.macro.ATTRIBUTE_NAME_POSITION, cc.macro.VERTEX_ATTRIB_POSITION);

      this._program.addAttribute(cc.macro.ATTRIBUTE_NAME_COLOR, cc.macro.VERTEX_ATTRIB_COLOR);

      this._program.addAttribute(cc.macro.ATTRIBUTE_NAME_TEX_COORD, cc.macro.VERTEX_ATTRIB_TEX_COORDS);

      this._program.link();

      this._program.updateUniforms();

      this.updateGLParameters();
    } else {
      this._program = new cc.GLProgram();

      this._program.initWithVertexShaderByteArray(_default_vert, this.flagShader);

      this._program.addAttribute(cc.macro.ATTRIBUTE_NAME_POSITION, cc.macro.VERTEX_ATTRIB_POSITION);

      this._program.addAttribute(cc.macro.ATTRIBUTE_NAME_COLOR, cc.macro.VERTEX_ATTRIB_COLOR);

      this._program.addAttribute(cc.macro.ATTRIBUTE_NAME_TEX_COORD, cc.macro.VERTEX_ATTRIB_TEX_COORDS);

      this._program.link();

      this._program.updateUniforms();

      this._program.use();

      this.updateGLParameters();

      this._program.setUniformLocationWith1f(this._program.getUniformLocationForName('time'), this.parameters.time);

      this._program.setUniformLocationWith2f(this._program.getUniformLocationForName('mouse_touch'), this.parameters.mouse.x, this.parameters.mouse.y);

      this._program.setUniformLocationWith2f(this._program.getUniformLocationForName('resolution'), this.parameters.resolution.x, this.parameters.resolution.y);
    }

    if (cc.sys.isNative) {
      var glProgram_state = cc.GLProgramState.getOrCreateWithGLProgram(this._program);
      glProgram_state.setUniformVec2("resolution", this.parameters.resolution);
      glProgram_state.setUniformFloat("time", this.parameters.time);
      glProgram_state.setUniformVec2("mouse_touch", this.parameters.mouse);
    } else {
      this._resolution = this._program.getUniformLocationForName("resolution");
      this._time = this._program.getUniformLocationForName("time");
      this._mouse = this._program.getUniformLocationForName("mouse_touch");

      this._program.setUniformLocationWith2f(this._resolution, this.parameters.resolution.x, this.parameters.resolution.y);

      this._program.setUniformLocationWith1f(this._time, this.parameters.time);

      this._program.setUniformLocationWith2f(this._mouse, this.parameters.mouse.x, this.parameters.mouse.y);
    }

    this.setProgram(this.node._sgNode, this._program);
  },
  setProgram: function setProgram(node, program) {
    if (cc.sys.isNative) {
      var glProgram_state = cc.GLProgramState.getOrCreateWithGLProgram(program);
      node.setGLProgramState(glProgram_state);
    } else {
      node.setShaderProgram(program);
    }

    var children = node.children;
    if (!children) return;

    for (var i = 0; i < children.length; i++) {
      this.setProgram(children[i], program);
    }
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxFZmZlY3QuanMiXSwibmFtZXMiOlsiX2RlZmF1bHRfdmVydCIsInJlcXVpcmUiLCJfZGVmYXVsdF92ZXJ0X25vX212cCIsIl9nbGFzc19mcmFnIiwiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJnbGFzc0ZhY3RvciIsImZsYWdTaGFkZXIiLCJtdWx0aWxpbmUiLCJ0b29sdGlwIiwib25Mb2FkIiwicGFyYW1ldGVycyIsInN0YXJ0VGltZSIsIkRhdGUiLCJub3ciLCJ0aW1lIiwibW91c2UiLCJ4IiwieSIsInJlc29sdXRpb24iLCJub2RlIiwib24iLCJOb2RlIiwiRXZlbnRUeXBlIiwiTU9VU0VfTU9WRSIsImV2ZW50IiwiZ2V0Q29udGVudFNpemUiLCJ3aWR0aCIsImdldExvY2F0aW9uWCIsImhlaWdodCIsImdldExvY2F0aW9uWSIsIlRPVUNIX01PVkUiLCJfdXNlIiwidXBkYXRlIiwiZHQiLCJfcHJvZ3JhbSIsInVzZSIsInVwZGF0ZUdMUGFyYW1ldGVycyIsInN5cyIsImlzTmF0aXZlIiwiZ2xQcm9ncmFtX3N0YXRlIiwiR0xQcm9ncmFtU3RhdGUiLCJnZXRPckNyZWF0ZVdpdGhHTFByb2dyYW0iLCJzZXRVbmlmb3JtVmVjMiIsInNldFVuaWZvcm1GbG9hdCIsInNldFVuaWZvcm1Mb2NhdGlvbldpdGgyZiIsIl9yZXNvbHV0aW9uIiwic2V0VW5pZm9ybUxvY2F0aW9uV2l0aDFmIiwiX3RpbWUiLCJfbW91c2UiLCJsb2ciLCJHTFByb2dyYW0iLCJpbml0V2l0aFN0cmluZyIsImFkZEF0dHJpYnV0ZSIsIm1hY3JvIiwiQVRUUklCVVRFX05BTUVfUE9TSVRJT04iLCJWRVJURVhfQVRUUklCX1BPU0lUSU9OIiwiQVRUUklCVVRFX05BTUVfQ09MT1IiLCJWRVJURVhfQVRUUklCX0NPTE9SIiwiQVRUUklCVVRFX05BTUVfVEVYX0NPT1JEIiwiVkVSVEVYX0FUVFJJQl9URVhfQ09PUkRTIiwibGluayIsInVwZGF0ZVVuaWZvcm1zIiwiaW5pdFdpdGhWZXJ0ZXhTaGFkZXJCeXRlQXJyYXkiLCJnZXRVbmlmb3JtTG9jYXRpb25Gb3JOYW1lIiwic2V0UHJvZ3JhbSIsIl9zZ05vZGUiLCJwcm9ncmFtIiwic2V0R0xQcm9ncmFtU3RhdGUiLCJzZXRTaGFkZXJQcm9ncmFtIiwiY2hpbGRyZW4iLCJpIiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLGFBQWEsR0FBR0MsT0FBTyxDQUFDLHFDQUFELENBQTNCOztBQUNBLElBQUlDLG9CQUFvQixHQUFHRCxPQUFPLENBQUMsMkNBQUQsQ0FBbEM7O0FBQ0EsSUFBSUUsV0FBVyxHQUFHRixPQUFPLENBQUMsc0NBQUQsQ0FBekI7O0FBRUFHLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0QsRUFBRSxDQUFDRSxTQURQO0FBR0xDLEVBQUFBLFVBQVUsRUFBRTtBQUNSQyxJQUFBQSxXQUFXLEVBQUMsR0FESjtBQUdSQyxJQUFBQSxVQUFVLEVBQUU7QUFDUixpQkFBUywyekJBREQ7QUFFUkMsTUFBQUEsU0FBUyxFQUFFLElBRkg7QUFHUkMsTUFBQUEsT0FBTyxFQUFFO0FBSEQ7QUFISixHQUhQO0FBYUxDLEVBQUFBLE1BQU0sRUFBRSxrQkFBWTtBQUNoQixTQUFLQyxVQUFMLEdBQWdCO0FBQ1pDLE1BQUFBLFNBQVMsRUFBQ0MsSUFBSSxDQUFDQyxHQUFMLEVBREU7QUFFWkMsTUFBQUEsSUFBSSxFQUFDLEdBRk87QUFHWkMsTUFBQUEsS0FBSyxFQUFDO0FBQ0ZDLFFBQUFBLENBQUMsRUFBQyxHQURBO0FBRUZDLFFBQUFBLENBQUMsRUFBQztBQUZBLE9BSE07QUFPWkMsTUFBQUEsVUFBVSxFQUFDO0FBQ1BGLFFBQUFBLENBQUMsRUFBQyxHQURLO0FBRVBDLFFBQUFBLENBQUMsRUFBQztBQUZLO0FBUEMsS0FBaEI7QUFhQSxTQUFLRSxJQUFMLENBQVVDLEVBQVYsQ0FBYW5CLEVBQUUsQ0FBQ29CLElBQUgsQ0FBUUMsU0FBUixDQUFrQkMsVUFBL0IsRUFBMkMsVUFBVUMsS0FBVixFQUFpQjtBQUN4RCxXQUFLZCxVQUFMLENBQWdCSyxLQUFoQixDQUFzQkMsQ0FBdEIsR0FBMEIsS0FBS0csSUFBTCxDQUFVTSxjQUFWLEdBQTJCQyxLQUEzQixHQUFtQ0YsS0FBSyxDQUFDRyxZQUFOLEVBQTdEO0FBQ0EsV0FBS2pCLFVBQUwsQ0FBZ0JLLEtBQWhCLENBQXNCRSxDQUF0QixHQUEwQixLQUFLRSxJQUFMLENBQVVNLGNBQVYsR0FBMkJHLE1BQTNCLEdBQW9DSixLQUFLLENBQUNLLFlBQU4sRUFBOUQ7QUFDSCxLQUhELEVBR0csSUFISDtBQU1BLFNBQUtWLElBQUwsQ0FBVUMsRUFBVixDQUFjbkIsRUFBRSxDQUFDb0IsSUFBSCxDQUFRQyxTQUFSLENBQWtCUSxVQUFoQyxFQUE0QyxVQUFVTixLQUFWLEVBQWlCO0FBQ3pELFdBQUtkLFVBQUwsQ0FBZ0JLLEtBQWhCLENBQXNCQyxDQUF0QixHQUEwQixLQUFLRyxJQUFMLENBQVVNLGNBQVYsR0FBMkJDLEtBQTNCLEdBQW1DRixLQUFLLENBQUNHLFlBQU4sRUFBN0Q7QUFDQSxXQUFLakIsVUFBTCxDQUFnQkssS0FBaEIsQ0FBc0JFLENBQXRCLEdBQTBCLEtBQUtFLElBQUwsQ0FBVU0sY0FBVixHQUEyQkcsTUFBM0IsR0FBb0NKLEtBQUssQ0FBQ0ssWUFBTixFQUE5RDtBQUNILEtBSEQsRUFHRyxJQUhIOztBQUtBLFNBQUtFLElBQUw7QUFDSCxHQXZDSTtBQXdDTEMsRUFBQUEsTUFBTSxFQUFDLGdCQUFTQyxFQUFULEVBQVk7QUFDZixRQUFHLEtBQUs1QixXQUFMLElBQWtCLEVBQXJCLEVBQXdCO0FBQ3BCLFdBQUtBLFdBQUwsR0FBaUIsQ0FBakI7QUFDSDs7QUFDRCxTQUFLQSxXQUFMLElBQWtCNEIsRUFBRSxHQUFDLENBQXJCOztBQUVBLFFBQUcsS0FBS0MsUUFBUixFQUFpQjtBQUViLFdBQUtBLFFBQUwsQ0FBY0MsR0FBZDs7QUFDQSxXQUFLQyxrQkFBTDs7QUFDQSxVQUFHbkMsRUFBRSxDQUFDb0MsR0FBSCxDQUFPQyxRQUFWLEVBQW1CO0FBQ2YsWUFBSUMsZUFBZSxHQUFHdEMsRUFBRSxDQUFDdUMsY0FBSCxDQUFrQkMsd0JBQWxCLENBQTJDLEtBQUtQLFFBQWhELENBQXRCO0FBQ0FLLFFBQUFBLGVBQWUsQ0FBQ0csY0FBaEIsQ0FBZ0MsWUFBaEMsRUFBOEMsS0FBS2hDLFVBQUwsQ0FBZ0JRLFVBQTlEO0FBQ0FxQixRQUFBQSxlQUFlLENBQUNJLGVBQWhCLENBQWlDLE1BQWpDLEVBQXlDLEtBQUtqQyxVQUFMLENBQWdCSSxJQUF6RDtBQUNBeUIsUUFBQUEsZUFBZSxDQUFDRyxjQUFoQixDQUFnQyxhQUFoQyxFQUFnRCxLQUFLaEMsVUFBTCxDQUFnQkssS0FBaEU7QUFDSCxPQUxELE1BS0s7QUFDRCxhQUFLbUIsUUFBTCxDQUFjVSx3QkFBZCxDQUF3QyxLQUFLQyxXQUE3QyxFQUEwRCxLQUFLbkMsVUFBTCxDQUFnQlEsVUFBaEIsQ0FBMkJGLENBQXJGLEVBQXVGLEtBQUtOLFVBQUwsQ0FBZ0JRLFVBQWhCLENBQTJCRCxDQUFsSDs7QUFDQSxhQUFLaUIsUUFBTCxDQUFjWSx3QkFBZCxDQUF3QyxLQUFLQyxLQUE3QyxFQUFvRCxLQUFLckMsVUFBTCxDQUFnQkksSUFBcEU7O0FBQ0EsYUFBS29CLFFBQUwsQ0FBY1Usd0JBQWQsQ0FBd0MsS0FBS0ksTUFBN0MsRUFBcUQsS0FBS3RDLFVBQUwsQ0FBZ0JLLEtBQWhCLENBQXNCQyxDQUEzRSxFQUE2RSxLQUFLTixVQUFMLENBQWdCSyxLQUFoQixDQUFzQkMsQ0FBbkc7QUFDSDtBQUNKO0FBQ0osR0E3REk7QUE4RExvQixFQUFBQSxrQkE5REssZ0NBOERlO0FBQ2hCLFNBQUsxQixVQUFMLENBQWdCSSxJQUFoQixHQUF1QixDQUFDRixJQUFJLENBQUNDLEdBQUwsS0FBYSxLQUFLSCxVQUFMLENBQWdCQyxTQUE5QixJQUF5QyxJQUFoRTtBQUNBLFNBQUtELFVBQUwsQ0FBZ0JRLFVBQWhCLENBQTJCRixDQUEzQixHQUFpQyxLQUFLRyxJQUFMLENBQVVNLGNBQVYsR0FBMkJDLEtBQTVEO0FBQ0EsU0FBS2hCLFVBQUwsQ0FBZ0JRLFVBQWhCLENBQTJCRCxDQUEzQixHQUFpQyxLQUFLRSxJQUFMLENBQVVNLGNBQVYsR0FBMkJHLE1BQTVEO0FBR0gsR0FwRUk7QUFzRUxHLEVBQUFBLElBQUksRUFBRSxnQkFDTjtBQUVJLFFBQUk5QixFQUFFLENBQUNvQyxHQUFILENBQU9DLFFBQVgsRUFBcUI7QUFDakJyQyxNQUFBQSxFQUFFLENBQUNnRCxHQUFILENBQU8sc0JBQVA7QUFDQSxXQUFLZixRQUFMLEdBQWdCLElBQUlqQyxFQUFFLENBQUNpRCxTQUFQLEVBQWhCOztBQUNBLFdBQUtoQixRQUFMLENBQWNpQixjQUFkLENBQTZCcEQsb0JBQTdCLEVBQW1ELEtBQUtPLFVBQXhEOztBQUdBLFdBQUs0QixRQUFMLENBQWNrQixZQUFkLENBQTJCbkQsRUFBRSxDQUFDb0QsS0FBSCxDQUFTQyx1QkFBcEMsRUFBNkRyRCxFQUFFLENBQUNvRCxLQUFILENBQVNFLHNCQUF0RTs7QUFDQSxXQUFLckIsUUFBTCxDQUFja0IsWUFBZCxDQUEyQm5ELEVBQUUsQ0FBQ29ELEtBQUgsQ0FBU0csb0JBQXBDLEVBQTBEdkQsRUFBRSxDQUFDb0QsS0FBSCxDQUFTSSxtQkFBbkU7O0FBQ0EsV0FBS3ZCLFFBQUwsQ0FBY2tCLFlBQWQsQ0FBMkJuRCxFQUFFLENBQUNvRCxLQUFILENBQVNLLHdCQUFwQyxFQUE4RHpELEVBQUUsQ0FBQ29ELEtBQUgsQ0FBU00sd0JBQXZFOztBQUVBLFdBQUt6QixRQUFMLENBQWMwQixJQUFkOztBQUNBLFdBQUsxQixRQUFMLENBQWMyQixjQUFkOztBQUNBLFdBQUt6QixrQkFBTDtBQUlILEtBaEJELE1BZ0JLO0FBQ0QsV0FBS0YsUUFBTCxHQUFnQixJQUFJakMsRUFBRSxDQUFDaUQsU0FBUCxFQUFoQjs7QUFDQSxXQUFLaEIsUUFBTCxDQUFjNEIsNkJBQWQsQ0FBNENqRSxhQUE1QyxFQUEyRCxLQUFLUyxVQUFoRTs7QUFDQSxXQUFLNEIsUUFBTCxDQUFja0IsWUFBZCxDQUEyQm5ELEVBQUUsQ0FBQ29ELEtBQUgsQ0FBU0MsdUJBQXBDLEVBQTZEckQsRUFBRSxDQUFDb0QsS0FBSCxDQUFTRSxzQkFBdEU7O0FBQ0EsV0FBS3JCLFFBQUwsQ0FBY2tCLFlBQWQsQ0FBMkJuRCxFQUFFLENBQUNvRCxLQUFILENBQVNHLG9CQUFwQyxFQUEwRHZELEVBQUUsQ0FBQ29ELEtBQUgsQ0FBU0ksbUJBQW5FOztBQUNBLFdBQUt2QixRQUFMLENBQWNrQixZQUFkLENBQTJCbkQsRUFBRSxDQUFDb0QsS0FBSCxDQUFTSyx3QkFBcEMsRUFBOER6RCxFQUFFLENBQUNvRCxLQUFILENBQVNNLHdCQUF2RTs7QUFFQSxXQUFLekIsUUFBTCxDQUFjMEIsSUFBZDs7QUFDQSxXQUFLMUIsUUFBTCxDQUFjMkIsY0FBZDs7QUFDQSxXQUFLM0IsUUFBTCxDQUFjQyxHQUFkOztBQUVBLFdBQUtDLGtCQUFMOztBQUVBLFdBQUtGLFFBQUwsQ0FBY1ksd0JBQWQsQ0FBd0MsS0FBS1osUUFBTCxDQUFjNkIseUJBQWQsQ0FBd0MsTUFBeEMsQ0FBeEMsRUFBeUYsS0FBS3JELFVBQUwsQ0FBZ0JJLElBQXpHOztBQUNBLFdBQUtvQixRQUFMLENBQWNVLHdCQUFkLENBQXdDLEtBQUtWLFFBQUwsQ0FBYzZCLHlCQUFkLENBQXdDLGFBQXhDLENBQXhDLEVBQWdHLEtBQUtyRCxVQUFMLENBQWdCSyxLQUFoQixDQUFzQkMsQ0FBdEgsRUFBd0gsS0FBS04sVUFBTCxDQUFnQkssS0FBaEIsQ0FBc0JFLENBQTlJOztBQUNBLFdBQUtpQixRQUFMLENBQWNVLHdCQUFkLENBQXVDLEtBQUtWLFFBQUwsQ0FBYzZCLHlCQUFkLENBQXdDLFlBQXhDLENBQXZDLEVBQThGLEtBQUtyRCxVQUFMLENBQWdCUSxVQUFoQixDQUEyQkYsQ0FBekgsRUFBMkgsS0FBS04sVUFBTCxDQUFnQlEsVUFBaEIsQ0FBMkJELENBQXRKO0FBRUg7O0FBS0QsUUFBSWhCLEVBQUUsQ0FBQ29DLEdBQUgsQ0FBT0MsUUFBWCxFQUFxQjtBQUNqQixVQUFJQyxlQUFlLEdBQUd0QyxFQUFFLENBQUN1QyxjQUFILENBQWtCQyx3QkFBbEIsQ0FBMkMsS0FBS1AsUUFBaEQsQ0FBdEI7QUFDQUssTUFBQUEsZUFBZSxDQUFDRyxjQUFoQixDQUFnQyxZQUFoQyxFQUE4QyxLQUFLaEMsVUFBTCxDQUFnQlEsVUFBOUQ7QUFDQXFCLE1BQUFBLGVBQWUsQ0FBQ0ksZUFBaEIsQ0FBaUMsTUFBakMsRUFBMEMsS0FBS2pDLFVBQUwsQ0FBZ0JJLElBQTFEO0FBQ0F5QixNQUFBQSxlQUFlLENBQUNHLGNBQWhCLENBQWdDLGFBQWhDLEVBQWdELEtBQUtoQyxVQUFMLENBQWdCSyxLQUFoRTtBQUNILEtBTEQsTUFLSztBQUdELFdBQUs4QixXQUFMLEdBQW1CLEtBQUtYLFFBQUwsQ0FBYzZCLHlCQUFkLENBQXlDLFlBQXpDLENBQW5CO0FBQ0EsV0FBS2hCLEtBQUwsR0FBYSxLQUFLYixRQUFMLENBQWM2Qix5QkFBZCxDQUF5QyxNQUF6QyxDQUFiO0FBQ0EsV0FBS2YsTUFBTCxHQUFjLEtBQUtkLFFBQUwsQ0FBYzZCLHlCQUFkLENBQXlDLGFBQXpDLENBQWQ7O0FBRUEsV0FBSzdCLFFBQUwsQ0FBY1Usd0JBQWQsQ0FBd0MsS0FBS0MsV0FBN0MsRUFBMEQsS0FBS25DLFVBQUwsQ0FBZ0JRLFVBQWhCLENBQTJCRixDQUFyRixFQUF1RixLQUFLTixVQUFMLENBQWdCUSxVQUFoQixDQUEyQkQsQ0FBbEg7O0FBQ0EsV0FBS2lCLFFBQUwsQ0FBY1ksd0JBQWQsQ0FBd0MsS0FBS0MsS0FBN0MsRUFBb0QsS0FBS3JDLFVBQUwsQ0FBZ0JJLElBQXBFOztBQUNBLFdBQUtvQixRQUFMLENBQWNVLHdCQUFkLENBQXdDLEtBQUtJLE1BQTdDLEVBQXFELEtBQUt0QyxVQUFMLENBQWdCSyxLQUFoQixDQUFzQkMsQ0FBM0UsRUFBNkUsS0FBS04sVUFBTCxDQUFnQkssS0FBaEIsQ0FBc0JFLENBQW5HO0FBQ0g7O0FBRUQsU0FBSytDLFVBQUwsQ0FBaUIsS0FBSzdDLElBQUwsQ0FBVThDLE9BQTNCLEVBQW9DLEtBQUsvQixRQUF6QztBQUNILEdBaklJO0FBbUlMOEIsRUFBQUEsVUFBVSxFQUFDLG9CQUFVN0MsSUFBVixFQUFnQitDLE9BQWhCLEVBQXlCO0FBQ2hDLFFBQUlqRSxFQUFFLENBQUNvQyxHQUFILENBQU9DLFFBQVgsRUFBcUI7QUFDakIsVUFBSUMsZUFBZSxHQUFHdEMsRUFBRSxDQUFDdUMsY0FBSCxDQUFrQkMsd0JBQWxCLENBQTJDeUIsT0FBM0MsQ0FBdEI7QUFDQS9DLE1BQUFBLElBQUksQ0FBQ2dELGlCQUFMLENBQXVCNUIsZUFBdkI7QUFDSCxLQUhELE1BR0s7QUFDRHBCLE1BQUFBLElBQUksQ0FBQ2lELGdCQUFMLENBQXNCRixPQUF0QjtBQUNIOztBQUdELFFBQUlHLFFBQVEsR0FBR2xELElBQUksQ0FBQ2tELFFBQXBCO0FBQ0EsUUFBSSxDQUFDQSxRQUFMLEVBQ0k7O0FBRUosU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHRCxRQUFRLENBQUNFLE1BQTdCLEVBQXFDRCxDQUFDLEVBQXRDO0FBQ0ksV0FBS04sVUFBTCxDQUFnQkssUUFBUSxDQUFDQyxDQUFELENBQXhCLEVBQTZCSixPQUE3QjtBQURKO0FBRUg7QUFsSkksQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsidmFyIF9kZWZhdWx0X3ZlcnQgPSByZXF1aXJlKFwiLi4vU2hhZGVycy9jY1NoYWRlcl9EZWZhdWx0X1ZlcnQuanNcIik7XHJcbnZhciBfZGVmYXVsdF92ZXJ0X25vX212cCA9IHJlcXVpcmUoXCIuLi9TaGFkZXJzL2NjU2hhZGVyX0RlZmF1bHRfVmVydF9ub01WUC5qc1wiKTtcclxudmFyIF9nbGFzc19mcmFnID0gcmVxdWlyZShcIi4uL1NoYWRlcnMvY2NTaGFkZXJfRWZmZWN0MDRfRnJhZy5qc1wiKTtcclxuXHJcbmNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuXHJcbiAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgZ2xhc3NGYWN0b3I6MS4wLFxyXG4gICAgICAgIFxyXG4gICAgICAgIGZsYWdTaGFkZXI6IHtcclxuICAgICAgICAgICAgZGVmYXVsdDogJ1wicHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7IHVuaWZvcm0gZmxvYXQgdGltZTsgdW5pZm9ybSB2ZWMyIG1vdXNlOyB1bmlmb3JtIHZlYzIgcmVzb2x1dGlvbjsgY29uc3QgaW50IG51bUJsb2JzID0gMTI4OyB2b2lkIG1haW4oIHZvaWQgKSB7ICAgICB2ZWMyIHAgPSAoZ2xfRnJhZ0Nvb3JkLnh5IC8gcmVzb2x1dGlvbi54KSAtIHZlYzIoMC41LCAwLjUgKiAocmVzb2x1dGlvbi55IC8gcmVzb2x1dGlvbi54KSk7ICAgICB2ZWMzIGMgPSB2ZWMzKDAuMCk7ICAgICBmb3IgKGludCBpPTA7IGk8bnVtQmxvYnM7IGkrKykgIHsgICAgICAgZmxvYXQgcHggPSBzaW4oZmxvYXQoaSkqMC4xICsgMC41KSAqIDAuNDsgICAgICAgZmxvYXQgcHkgPSBzaW4oZmxvYXQoaSppKSowLjAxICsgMC40KnRpbWUpICogMC4yOyAgICAgICBmbG9hdCBweiA9IHNpbihmbG9hdChpKmkqaSkqMC4wMDEgKyAwLjMqdGltZSkgKiAwLjMgKyAwLjQ7ICAgICAgZmxvYXQgcmFkaXVzID0gMC4wMDUgLyBwejsgICAgICB2ZWMyIHBvcyA9IHAgKyB2ZWMyKHB4LCBweSk7ICAgICAgICBmbG9hdCB6ID0gcmFkaXVzIC0gbGVuZ3RoKHBvcyk7ICAgICAgICAgaWYgKHogPCAwLjApIHogPSAwLjA7ICAgICAgIGZsb2F0IGNjID0geiAvIHJhZGl1czsgICAgICBjICs9IHZlYzMoY2MgKiAoc2luKGZsb2F0KGkqaSppKSkgKiAwLjUgKyAwLjUpLCBjYyAqIChzaW4oZmxvYXQoaSppKmkqaSppKSkgKiAwLjUgKyAwLjUpLCBjYyAqIChzaW4oZmxvYXQoaSppKmkqaSkpICogMC41ICsgMC41KSk7ICB9ICAgZ2xfRnJhZ0NvbG9yID0gdmVjNChjLngrcC55LCBjLnkrcC55LCBjLnorcC55LCAxLjApOyB9XCIsJyxcclxuICAgICAgICAgICAgbXVsdGlsaW5lOiB0cnVlLFxyXG4gICAgICAgICAgICB0b29sdGlwOiAnRmxhZ1NoYWRlcicsXHJcbiAgICAgICAgfSxcclxuICAgIH0sIFxyXG5cclxuICAgIG9uTG9hZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycz17XHJcbiAgICAgICAgICAgIHN0YXJ0VGltZTpEYXRlLm5vdygpLFxyXG4gICAgICAgICAgICB0aW1lOjAuMCxcclxuICAgICAgICAgICAgbW91c2U6e1xyXG4gICAgICAgICAgICAgICAgeDowLjAsXHJcbiAgICAgICAgICAgICAgICB5OjAuMCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcmVzb2x1dGlvbjp7XHJcbiAgICAgICAgICAgICAgICB4OjAuMCxcclxuICAgICAgICAgICAgICAgIHk6MC4wLFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5ub2RlLm9uKGNjLk5vZGUuRXZlbnRUeXBlLk1PVVNFX01PVkUsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmFtZXRlcnMubW91c2UueCA9IHRoaXMubm9kZS5nZXRDb250ZW50U2l6ZSgpLndpZHRoIC8gZXZlbnQuZ2V0TG9jYXRpb25YKCk7XHJcbiAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycy5tb3VzZS55ID0gdGhpcy5ub2RlLmdldENvbnRlbnRTaXplKCkuaGVpZ2h0IC8gZXZlbnQuZ2V0TG9jYXRpb25ZKCk7IFxyXG4gICAgICAgIH0sIHRoaXMpO1xyXG5cclxuXHJcbiAgICAgICAgdGhpcy5ub2RlLm9uKCBjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9NT1ZFLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLm1vdXNlLnggPSB0aGlzLm5vZGUuZ2V0Q29udGVudFNpemUoKS53aWR0aCAvIGV2ZW50LmdldExvY2F0aW9uWCgpO1xyXG4gICAgICAgICAgICB0aGlzLnBhcmFtZXRlcnMubW91c2UueSA9IHRoaXMubm9kZS5nZXRDb250ZW50U2l6ZSgpLmhlaWdodCAvIGV2ZW50LmdldExvY2F0aW9uWSgpOyBcclxuICAgICAgICB9LCB0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5fdXNlKCk7XHJcbiAgICB9LFxyXG4gICAgdXBkYXRlOmZ1bmN0aW9uKGR0KXtcclxuICAgICAgICBpZih0aGlzLmdsYXNzRmFjdG9yPj00MCl7XHJcbiAgICAgICAgICAgIHRoaXMuZ2xhc3NGYWN0b3I9MDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5nbGFzc0ZhY3Rvcis9ZHQqMztcclxuXHJcbiAgICAgICAgaWYodGhpcy5fcHJvZ3JhbSl7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9wcm9ncmFtLnVzZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUdMUGFyYW1ldGVycygpO1xyXG4gICAgICAgICAgICBpZihjYy5zeXMuaXNOYXRpdmUpe1xyXG4gICAgICAgICAgICAgICAgdmFyIGdsUHJvZ3JhbV9zdGF0ZSA9IGNjLkdMUHJvZ3JhbVN0YXRlLmdldE9yQ3JlYXRlV2l0aEdMUHJvZ3JhbSh0aGlzLl9wcm9ncmFtKTtcclxuICAgICAgICAgICAgICAgIGdsUHJvZ3JhbV9zdGF0ZS5zZXRVbmlmb3JtVmVjMiggXCJyZXNvbHV0aW9uXCIsIHRoaXMucGFyYW1ldGVycy5yZXNvbHV0aW9uICk7XHJcbiAgICAgICAgICAgICAgICBnbFByb2dyYW1fc3RhdGUuc2V0VW5pZm9ybUZsb2F0KCBcInRpbWVcIiwgdGhpcy5wYXJhbWV0ZXJzLnRpbWUgKTsgICAgXHJcbiAgICAgICAgICAgICAgICBnbFByb2dyYW1fc3RhdGUuc2V0VW5pZm9ybVZlYzIoIFwibW91c2VfdG91Y2hcIiAsIHRoaXMucGFyYW1ldGVycy5tb3VzZSApO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Byb2dyYW0uc2V0VW5pZm9ybUxvY2F0aW9uV2l0aDJmKCB0aGlzLl9yZXNvbHV0aW9uLCB0aGlzLnBhcmFtZXRlcnMucmVzb2x1dGlvbi54LHRoaXMucGFyYW1ldGVycy5yZXNvbHV0aW9uLnkgKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Byb2dyYW0uc2V0VW5pZm9ybUxvY2F0aW9uV2l0aDFmKCB0aGlzLl90aW1lLCB0aGlzLnBhcmFtZXRlcnMudGltZSApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJvZ3JhbS5zZXRVbmlmb3JtTG9jYXRpb25XaXRoMmYoIHRoaXMuX21vdXNlLCB0aGlzLnBhcmFtZXRlcnMubW91c2UueCx0aGlzLnBhcmFtZXRlcnMubW91c2UueCApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHVwZGF0ZUdMUGFyYW1ldGVycygpe1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycy50aW1lID0gKERhdGUubm93KCkgLSB0aGlzLnBhcmFtZXRlcnMuc3RhcnRUaW1lKS8xMDAwO1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5yZXNvbHV0aW9uLnggPSAoIHRoaXMubm9kZS5nZXRDb250ZW50U2l6ZSgpLndpZHRoICk7XHJcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnJlc29sdXRpb24ueSA9ICggdGhpcy5ub2RlLmdldENvbnRlbnRTaXplKCkuaGVpZ2h0ICk7XHJcblxyXG5cclxuICAgIH0sXHJcblxyXG4gICAgX3VzZTogZnVuY3Rpb24oKVxyXG4gICAge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcclxuICAgICAgICAgICAgY2MubG9nKFwidXNlIG5hdGl2ZSBHTFByb2dyYW1cIik7XHJcbiAgICAgICAgICAgIHRoaXMuX3Byb2dyYW0gPSBuZXcgY2MuR0xQcm9ncmFtKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3Byb2dyYW0uaW5pdFdpdGhTdHJpbmcoX2RlZmF1bHRfdmVydF9ub19tdnAsIHRoaXMuZmxhZ1NoYWRlciApO1xyXG5cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3Byb2dyYW0uYWRkQXR0cmlidXRlKGNjLm1hY3JvLkFUVFJJQlVURV9OQU1FX1BPU0lUSU9OLCBjYy5tYWNyby5WRVJURVhfQVRUUklCX1BPU0lUSU9OKTtcclxuICAgICAgICAgICAgdGhpcy5fcHJvZ3JhbS5hZGRBdHRyaWJ1dGUoY2MubWFjcm8uQVRUUklCVVRFX05BTUVfQ09MT1IsIGNjLm1hY3JvLlZFUlRFWF9BVFRSSUJfQ09MT1IpO1xyXG4gICAgICAgICAgICB0aGlzLl9wcm9ncmFtLmFkZEF0dHJpYnV0ZShjYy5tYWNyby5BVFRSSUJVVEVfTkFNRV9URVhfQ09PUkQsIGNjLm1hY3JvLlZFUlRFWF9BVFRSSUJfVEVYX0NPT1JEUyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9wcm9ncmFtLmxpbmsoKTtcclxuICAgICAgICAgICAgdGhpcy5fcHJvZ3JhbS51cGRhdGVVbmlmb3JtcygpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUdMUGFyYW1ldGVycygpO1xyXG5cclxuXHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHRoaXMuX3Byb2dyYW0gPSBuZXcgY2MuR0xQcm9ncmFtKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3Byb2dyYW0uaW5pdFdpdGhWZXJ0ZXhTaGFkZXJCeXRlQXJyYXkoX2RlZmF1bHRfdmVydCwgdGhpcy5mbGFnU2hhZGVyICk7XHJcbiAgICAgICAgICAgIHRoaXMuX3Byb2dyYW0uYWRkQXR0cmlidXRlKGNjLm1hY3JvLkFUVFJJQlVURV9OQU1FX1BPU0lUSU9OLCBjYy5tYWNyby5WRVJURVhfQVRUUklCX1BPU0lUSU9OKTtcclxuICAgICAgICAgICAgdGhpcy5fcHJvZ3JhbS5hZGRBdHRyaWJ1dGUoY2MubWFjcm8uQVRUUklCVVRFX05BTUVfQ09MT1IsIGNjLm1hY3JvLlZFUlRFWF9BVFRSSUJfQ09MT1IpO1xyXG4gICAgICAgICAgICB0aGlzLl9wcm9ncmFtLmFkZEF0dHJpYnV0ZShjYy5tYWNyby5BVFRSSUJVVEVfTkFNRV9URVhfQ09PUkQsIGNjLm1hY3JvLlZFUlRFWF9BVFRSSUJfVEVYX0NPT1JEUyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9wcm9ncmFtLmxpbmsoKTtcclxuICAgICAgICAgICAgdGhpcy5fcHJvZ3JhbS51cGRhdGVVbmlmb3JtcygpO1xyXG4gICAgICAgICAgICB0aGlzLl9wcm9ncmFtLnVzZSgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy51cGRhdGVHTFBhcmFtZXRlcnMoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3Byb2dyYW0uc2V0VW5pZm9ybUxvY2F0aW9uV2l0aDFmKCB0aGlzLl9wcm9ncmFtLmdldFVuaWZvcm1Mb2NhdGlvbkZvck5hbWUoJ3RpbWUnKSwgdGhpcy5wYXJhbWV0ZXJzLnRpbWUgKTtcclxuICAgICAgICAgICAgdGhpcy5fcHJvZ3JhbS5zZXRVbmlmb3JtTG9jYXRpb25XaXRoMmYoIHRoaXMuX3Byb2dyYW0uZ2V0VW5pZm9ybUxvY2F0aW9uRm9yTmFtZSgnbW91c2VfdG91Y2gnKSwgdGhpcy5wYXJhbWV0ZXJzLm1vdXNlLngsdGhpcy5wYXJhbWV0ZXJzLm1vdXNlLnkgKTtcclxuICAgICAgICAgICAgdGhpcy5fcHJvZ3JhbS5zZXRVbmlmb3JtTG9jYXRpb25XaXRoMmYodGhpcy5fcHJvZ3JhbS5nZXRVbmlmb3JtTG9jYXRpb25Gb3JOYW1lKCdyZXNvbHV0aW9uJyksIHRoaXMucGFyYW1ldGVycy5yZXNvbHV0aW9uLngsdGhpcy5wYXJhbWV0ZXJzLnJlc29sdXRpb24ueSApO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFxyXG5cclxuICAgICAgICBcclxuICAgICAgICBpZiAoY2Muc3lzLmlzTmF0aXZlKSB7XHJcbiAgICAgICAgICAgIHZhciBnbFByb2dyYW1fc3RhdGUgPSBjYy5HTFByb2dyYW1TdGF0ZS5nZXRPckNyZWF0ZVdpdGhHTFByb2dyYW0odGhpcy5fcHJvZ3JhbSk7XHJcbiAgICAgICAgICAgIGdsUHJvZ3JhbV9zdGF0ZS5zZXRVbmlmb3JtVmVjMiggXCJyZXNvbHV0aW9uXCIsIHRoaXMucGFyYW1ldGVycy5yZXNvbHV0aW9uICk7XHJcbiAgICAgICAgICAgIGdsUHJvZ3JhbV9zdGF0ZS5zZXRVbmlmb3JtRmxvYXQoIFwidGltZVwiICwgdGhpcy5wYXJhbWV0ZXJzLnRpbWUgKTtcclxuICAgICAgICAgICAgZ2xQcm9ncmFtX3N0YXRlLnNldFVuaWZvcm1WZWMyKCBcIm1vdXNlX3RvdWNoXCIgLCB0aGlzLnBhcmFtZXRlcnMubW91c2UgKTtcclxuICAgICAgICB9ZWxzZXtcclxuXHJcblxyXG4gICAgICAgICAgICB0aGlzLl9yZXNvbHV0aW9uID0gdGhpcy5fcHJvZ3JhbS5nZXRVbmlmb3JtTG9jYXRpb25Gb3JOYW1lKCBcInJlc29sdXRpb25cIiApO1xyXG4gICAgICAgICAgICB0aGlzLl90aW1lID0gdGhpcy5fcHJvZ3JhbS5nZXRVbmlmb3JtTG9jYXRpb25Gb3JOYW1lKCBcInRpbWVcIiApO1xyXG4gICAgICAgICAgICB0aGlzLl9tb3VzZSA9IHRoaXMuX3Byb2dyYW0uZ2V0VW5pZm9ybUxvY2F0aW9uRm9yTmFtZSggXCJtb3VzZV90b3VjaFwiICk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9wcm9ncmFtLnNldFVuaWZvcm1Mb2NhdGlvbldpdGgyZiggdGhpcy5fcmVzb2x1dGlvbiwgdGhpcy5wYXJhbWV0ZXJzLnJlc29sdXRpb24ueCx0aGlzLnBhcmFtZXRlcnMucmVzb2x1dGlvbi55ICk7XHJcbiAgICAgICAgICAgIHRoaXMuX3Byb2dyYW0uc2V0VW5pZm9ybUxvY2F0aW9uV2l0aDFmKCB0aGlzLl90aW1lLCB0aGlzLnBhcmFtZXRlcnMudGltZSApO1xyXG4gICAgICAgICAgICB0aGlzLl9wcm9ncmFtLnNldFVuaWZvcm1Mb2NhdGlvbldpdGgyZiggdGhpcy5fbW91c2UsIHRoaXMucGFyYW1ldGVycy5tb3VzZS54LHRoaXMucGFyYW1ldGVycy5tb3VzZS55ICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNldFByb2dyYW0oIHRoaXMubm9kZS5fc2dOb2RlICx0aGlzLl9wcm9ncmFtICk7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBzZXRQcm9ncmFtOmZ1bmN0aW9uIChub2RlLCBwcm9ncmFtKSB7XHJcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xyXG4gICAgICAgICAgICB2YXIgZ2xQcm9ncmFtX3N0YXRlID0gY2MuR0xQcm9ncmFtU3RhdGUuZ2V0T3JDcmVhdGVXaXRoR0xQcm9ncmFtKHByb2dyYW0pO1xyXG4gICAgICAgICAgICBub2RlLnNldEdMUHJvZ3JhbVN0YXRlKGdsUHJvZ3JhbV9zdGF0ZSk7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIG5vZGUuc2V0U2hhZGVyUHJvZ3JhbShwcm9ncmFtKTsgICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgXHJcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcclxuICAgICAgICBpZiAoIWNoaWxkcmVuKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICBcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICB0aGlzLnNldFByb2dyYW0oY2hpbGRyZW5baV0sIHByb2dyYW0pO1xyXG4gICAgfVxyXG5cclxufSk7XHJcbiJdfQ==