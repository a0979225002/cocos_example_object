{"version":3,"sources":["assets\\Shaders\\ccShader_LightEffect_Frag.js"],"names":["module","exports"],"mappings":";;;;;;AAAAA,MAAM,CAACC,OAAP","sourceRoot":"/","sourcesContent":["module.exports =\r\n`\r\n#ifdef GL_ES\r\nprecision mediump float;\r\n#endif\r\nvarying vec2 v_texCoord;\r\nuniform float time;\r\nuniform vec2 mouse_touch;\r\nuniform vec2 resolution;\r\nconst float minRStart = -2.0;\r\nconst float maxRStart = 1.0;\r\nconst float minIStart = -1.0;\r\nconst float maxIStart = 1.0;\r\nconst int maxIterations = 50;\r\n// Immaginary number: has a real and immaginary part\r\nstruct complexNumber\r\n{\r\n\tfloat r;\r\n\tfloat i;\r\n};\r\nvoid main( void ) {\r\n\tfloat minR = minRStart; // change these in order to zoom\r\n\tfloat maxR = maxRStart;\r\n\tfloat minI = minIStart;\r\n\tfloat maxI = maxIStart;\r\n\t\r\n\tvec3 col = vec3(0,0,0);\r\n\t\r\n\tvec2 pos = gl_FragCoord.xy / resolution;\r\n\t\r\n\t// The complex number of the current pixel.\r\n\tcomplexNumber im;\r\n\tim.r = minR + (maxR-minR)*pos.x; // LERP within range\r\n\tim.i = minI + (maxI-minI)*pos.y;\r\n\t\r\n\tcomplexNumber z;\r\n\tz.r = im.r;\r\n\tz.i = im.i;\r\n\t\r\n\tbool def = true; // is the number (im) definite?\r\n\tint iterations = 0;\r\n\tfor(int i = 0; i< maxIterations; i++)\r\n\t{\r\n\t\tif(sqrt(z.r*z.r + z.i*z.i) > 2.0) // abs(z) = distance from origo\r\n\t\t{\r\n\t\t\tdef = false;\r\n\t\t\titerations = i; \r\n\t\t\tbreak;\r\n\t\t}\r\n\t\t// Mandelbrot formula: zNew = zOld*zOld + im\r\n\t\t// z = (a+bi) => z*z = (a+bi)(a+bi) = a*a - b*b + 2abi\r\n\t\tcomplexNumber zSquared; \r\n\t\tzSquared.r = z.r*z.r - z.i*z.i; // real part: a*a - b*b\r\n\t\tzSquared.i = 2.0*z.r*z.i; // immaginary part: 2abi\r\n\t\t// add: rSquared + im -> simple: just add the real and immaginary parts\r\n\t\tz.r = zSquared.r + im.r; // add real parts\r\n\t\tz.i = zSquared.i + im.i; // add immaginary parts\r\n\t}\r\n\tif(def) // it is definite => colour it black\r\n\t\tcol.rgb = vec3(0,0,0);\r\n\telse // the number grows to infinity => colour it by the number of iterations \r\n\t{\r\n\t\tfloat i = float(iterations)/float(maxIterations);\r\n\t\tcol.r = smoothstep(0.0,0.5, i);\r\n\t\tcol.g = smoothstep(0.0,1.0,i);\r\n\t\tcol.b = smoothstep(0.3,1.0, i);\r\n\t}\r\n\tgl_FragColor.rgb = col;\r\n}\r\n\r\n`"]}