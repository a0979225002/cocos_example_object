{
  "__type__": "cc.TextAsset",
  "_name": "fcc-framework.d",
  "_objFlags": 0,
  "_native": "",
  "text": "/// <reference types=\"../@types/creator\" />\ndeclare namespace fcc {\n    namespace type {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description 各種錯誤類型\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        enum ErrorType {\n            /**\n             * 參數錯誤\n             * @type {ErrorType.TYPE_FW}\n             */\n            TYPE_FW = \"\\u50B3\\u5165\\u7684Type \\u932F\\u8AA4 ,\\u8ACB\\u6AA2\\u5BDF\\u8A72Type\\u662F\\u5426\\u975EFarmWork\\u5167\\u7684Type\",\n            /**\n             * 執行流程錯誤\n             * @type {ErrorType.IS_RUNNING_FW}\n             */\n            IS_RUNNING_FW = \"\\u904A\\u6232\\u6B63\\u5728\\u57F7\\u884C\\u4E2D,\\u8ACB\\u52FF\\u91CD\\u8907\\u547C\\u53EB\",\n            /**\n             * 空變數錯誤\n             * @type {ErrorType.UNDEFINED_FW}\n             */\n            UNDEFINED_FW = \"\\u8B8A\\u6578\\u70BAundefined,\\u6D41\\u7A0B\\u7121\\u6CD5\\u7E7C\\u7E8C\",\n            /**\n             * 加載資源類有錯誤\n             * @type {ErrorType.LOAD_FW}\n             */\n            LOAD_FW = \"\\u52A0\\u8F09\\u7684\\u8CC7\\u6E90\\u6709\\u554F\\u984C\",\n            /**\n             * 動畫類有錯誤\n             * @type {ErrorType.ANIMATION_FW}\n             */\n            ANIMATION_FW = \"Animation \\u985E\\u4E2D\\u65B9\\u6CD5\\u6709\\u932F\\u8AA4 : \",\n            /**\n             * server 請求錯誤\n             * @type {ErrorType.WEB_REQUEST_FW}\n             */\n            WEB_REQUEST_FW = \"WebRequest \\u985E\\u6709\\u932F\\u8AA4 : \",\n            /**\n             * server 響應錯誤\n             * @type {ErrorType.WEB_RESPONSE_FW}\n             */\n            WEB_RESPONSE_FW = \"WebResponse \\u985E\\u6709\\u932F\\u8AA4 : \",\n            /**\n             * 音樂類錯誤\n             * @type {ErrorType.AUDIO_FW}\n             */\n            AUDIO_FW = \"AUDIO \\u985E\\u6709\\u932F\\u8AA4 :\",\n            /**\n             * 場景類錯誤\n             * @type {ErrorType.SCENE_FW}\n             */\n            SCENE_FW = \"Scene \\u985E\\u6709\\u932F\\u8AA4 :\",\n            /**\n             * 流程類錯誤\n             * @type {ErrorType.PROCESS_FW}\n             */\n            PROCESS_FW = \"process \\u985E\\u6709\\u932F\\u8AA4 :\",\n            /**\n             * 監聽事件類有錯誤\n             * @type {ErrorType.LISTENER_FW}\n             */\n            LISTENER_FW = \"Event \\u985E\\u6709\\u932F\\u8AA4 :\",\n            /**\n             * 老虎機樣式類有錯誤\n             * @type {ErrorType.SLOT_STYLE_FW}\n             */\n            SLOT_STYLE_FW = \"SlotStyleFW\\u985E\\u6709\\u932F\\u8AA4 :\",\n            /**\n             * 模板類有錯誤\n             */\n            TEMPLATE_FW = \"\\u6A21\\u677F\\u985E\\u6709\\u932F\\u8AA4 :\"\n        }\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 無從判斷該錯誤類型\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class UnknownError {\n        private configManager;\n        constructor(configManager: IF.IConfigManager);\n        checkErrorType(message?: string | type.ErrorType, obj?: any): void;\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 檢測該錯誤是否為框架錯誤\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class FrameWorkError {\n        private unknownError;\n        private configManager;\n        constructor(configManager: IF.IConfigManager);\n        checkErrorType(message: string | type.ErrorType, obj: any): void;\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 檢測該錯誤是否為物件錯誤\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class ObjectError {\n        private frameWorkError;\n        constructor(configManager: IF.IConfigManager);\n        checkErrorType(message: string | type.ErrorType, obj?: any): any;\n        checkObjectType(obj: any): \"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\";\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 顯示server回傳的錯誤\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class ServerError implements IF.IShowErrorDialog {\n        private timeOut;\n        private errorManager;\n        constructor(errorManager: IF.IErrorManager);\n        /**\n         *  顯示server回傳的錯誤事件\n         * @param {boolean} permanentState - 是否持續顯示\n         * @param {string} message - 顯示錯誤訊息文字\n         * @param {string} buttonText - 按鈕文字\n         * @param {string} canShowButton : 是否強制顯示Button\n         */\n        showError(permanentState: boolean, message: string, buttonText: string, canShowButton?: boolean): void;\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 顯示警告錯誤\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class WarningError implements IF.IShowErrorDialog {\n        private timeout;\n        private errorManager;\n        constructor(errorManager: IF.IErrorManager);\n        /**\n         * 顯示警告 Dialog\n         * @param {boolean} permanentState - 是否持續顯示\n         * @param {string} message - 顯示錯誤訊息文字\n         * @param {string} buttonText - 按鈕文字\n         */\n        showError(permanentState: boolean, message: string, buttonText: string): void;\n        /**\n         * XXX :\n         * 當前暫時無使用,一樣保留\n         * 顯示金額不足無法下注\n         * @param obj 顯示在label的文字\n         */\n        showErrorBet(obj: string): void;\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description (介面)Error管理器 錯誤事件中介者\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface IErrorHandler {\n            /**\n             * 確認錯誤類型\n             * @summary - 責任鏈模式 : Overload\n             * @throws (null,any) - return 該物件 or throw (\"該物件為null\")\n             * ```\n             *      參數:\n             *          (null,any) - return 該物件 or throw (\"該物件為null\")\n             *          (fcc.type.ErrorType,string) - throw (`ErrorType + ${string}`)\n             *          (string) - throw (`${string}`)\n             * ```\n             * @param {string | fcc.type.ErrorType} message\n             * @param obj\n             */\n            checkErrorType(message?: string | type.ErrorType, obj?: any): any;\n            /**\n             * 確認server回傳錯誤類型\n             * @param {boolean} permanentState - 是否持續顯示\n             * @param {string} message - 顯示錯誤訊息文字\n             * @param {string} buttonText - 按鈕文字\n             * @param {string} canShowButton : 是否強制顯示Button\n             */\n            checkServerError(permanentState: boolean, message: string, buttonText?: string, canShowButton?: boolean): void;\n            /**\n             * 確認警告類型\n             * @param {boolean} permanentState - 是否持續顯示\n             * @param {string} message - 顯示錯誤訊息文字\n             * @param {string} buttonText - 按鈕文字\n             */\n            checkWarning(permanentState: boolean, message: string, buttonText?: string): void;\n        }\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description Error管理器 錯誤事件中介者\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class ErrorHandler implements IF.IErrorHandler {\n        private objectError;\n        private serverError;\n        private warningError;\n        constructor(configManager: IF.IConfigManager, errorManager: IF.IErrorManager);\n        /**\n         * 確認錯誤類型\n         * @summary - 責任鏈模式 : Overload\n         * @throws (null,any) - return 該物件 or throw (\"該物件為null\")\n         * ```\n         *      參數:\n         *          (null,any) - return 該物件 or throw (\"該物件為null\")\n         *          (fcc.type.ErrorType,string) - throw (`ErrorType + ${string}`)\n         *          (string) - throw (`${string}`)\n         * ```\n         * @param {string | fcc.type.ErrorType} message\n         * @param obj\n         */\n        checkErrorType(message: string | type.ErrorType, obj?: any): any;\n        /**\n         * 確認server回傳錯誤類型\n         * @param {boolean} permanentState - 是否持續顯示\n         * @param {string} message - 顯示錯誤訊息文字\n         * @param {string} buttonText - 按鈕文字\n         * @param {string} canShowButton : 是否強制顯示Button\n         */\n        checkServerError(permanentState: boolean, message: string, buttonText?: string, canShowButton?: boolean): void;\n        /**\n         * 確認警告類型\n         * @param {boolean} permanentState - 是否持續顯示\n         * @param {string} message - 顯示錯誤訊息文字\n         * @param {string} buttonText - 按鈕文字\n         */\n        checkWarning(permanentState: boolean, message: string, buttonText?: string): void;\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description (介面) 錯誤訊息管理器\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface IErrorManager {\n            /**\n             * 綁定要顯示Error組件的物件\n             */\n            errorNode: cc.Node;\n            /**\n             *綁定警告訊息\n             */\n            warningNode: cc.Node;\n            /**\n             *綁定ErrorButton\n             */\n            errorButton: cc.Node;\n            /**\n             * 綁定警告要顯示的錯誤訊息\n             */\n            warningLabel: cc.Label;\n            /**\n             * 綁定要顯示錯誤訊息的Label\n             */\n            errorLabel: cc.Label;\n            /**\n             * 綁定錯誤訊息的按鈕\n             */\n            errorButtonLabel: cc.Label;\n            /**\n             * 顯示要顯示錯誤訊息的時間\n             */\n            errorDelayTime: number;\n            /**\n             * 顯示警告訊息的時間\n             */\n            warningDelayTime: number;\n            /**\n             * 是否顯示返回Button\n             */\n            isShowBackHomeButton: boolean;\n            /**\n             * 執行該類型之錯誤提示\n             * @summary - 責任鏈模式 : Overload\n             * @throws (null,any) - return 該物件 or throw (\"該物件為null\")\n             * ```\n             *      參數:\n             *          (null,any) - return 該物件 or throw (\"該物件為null\")\n             *          (fcc.type.ErrorType,string) - throw (`ErrorType + ${string}`)\n             *          (string) - throw (`${string}`)\n             * ```\n             * @param {string | fcc.type.ErrorType} message\n             * @param obj\n             */\n            executeError(message: string | type.ErrorType, obj?: any): void;\n            /**\n             * 顯示錯誤視窗\n             * @param {boolean} permanentState : 是否常駐\n             * @param {string} message  : 錯誤訊息\n             * @param {string} buttonText : button文字\n             * @param {string} canShowButton : 是否強制顯示Button\n             */\n            showErrorDialog(permanentState: boolean, message: string, buttonText?: string, canShowButton?: boolean): void;\n            /**\n             * 顯示警告,將會調用已保存的警告Node\n             * @param {boolean} permanentState : 是否常駐\n             * @param {string} message  : 錯誤訊息\n             * @param {string} buttonText : button文字\n             */\n            showWarningDialog(permanentState: boolean, message: string, buttonText?: string): void;\n            /**\n             * 添加要綁定的Error組件\n             * @param node\n             */\n            setErrorNode(node: cc.Node): this;\n            /**\n             * 添加要顯示Error訊息的Label\n             * @param label\n             */\n            setErrorLabel(label: cc.Label): this;\n            /**\n             * 添加errorButton綁定\n             * @param node\n             */\n            setErrorButton(node: cc.Node): this;\n            /**\n             * 添加要顯示的時間,目前只對(ErrorType.bet)生效\n             * @param time\n             */\n            setErrorDelayTime(time: number): this;\n            /**\n             * 添加警告要顯示的時間\n             */\n            setWarningDelayTime(time: number): this;\n            /**\n             * 添加要顯示警告的Node\n             * @param node\n             */\n            setWarningNode(node: cc.Node): this;\n            /**\n             * 添加要顯示警告的Node\n             * @param label\n             */\n            setWarningLabel(label: cc.Label): this;\n            /**\n             * 添加要顯示錯誤視窗中按鈕的label\n             * @param {cc.Label} label\n             * @return {this}\n             */\n            setErrorButtonLabel(label: cc.Label): this;\n        }\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 錯誤管理器 : 框架錯誤管理\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class ErrorManager implements IF.IErrorManager {\n        private static _instance;\n        private static _errorState;\n        private static _warningState;\n        private configManager;\n        private handler;\n        private _errorDelayTime;\n        private _errorLabel;\n        private _errorNode;\n        private _warningLabel;\n        private _warningNode;\n        private readonly _isShowBackHomeButton;\n        private _errorButton;\n        private _errorButtonLabel;\n        private _warningDelayTime;\n        private constructor();\n        /**\n         *  懶漢加載\n         *  初始化,只讓一個專案產生一次該class\n         */\n        static setInstance(configManager: IF.IConfigManager): void;\n        /**\n         *  獲取已經初始化的靜態實例class\n         */\n        static get instance(): IF.IErrorManager;\n        /**\n         * 執行該類型之錯誤提示\n         * @summary - 責任鏈模式 : Overload\n         * @throws (null,any) - return 該物件 or throw (\"該物件為null\")\n         * ```\n         *      參數:\n         *          (null,any) - return 該物件 or throw (\"該物件為null\")\n         *          (fcc.type.ErrorType,string) - throw (`ErrorType + ${string}`)\n         *          (string) - throw (`${string}`)\n         * ```\n         * @param {string | fcc.type.ErrorType} message\n         * @param obj\n         */\n        executeError(message: string | type.ErrorType, obj: any): any;\n        /**\n         * 顯示錯誤視窗\n         * @param {boolean} permanentState - 是否常駐\n         * @param {string} message  - 錯誤訊息\n         * @param {string} buttonText - button文字\n         * @param {string} canShowButton : 是否強制顯示Button\n         */\n        showErrorDialog(permanentState: boolean, message: string, buttonText?: string, canShowButton?: boolean): void;\n        /**\n         * 顯示警告,將會調用已保存的警告Node\n         * @param {boolean} permanentState - 是否常駐\n         * @param {string} message  - 錯誤訊息\n         * @param {string} buttonText - button文字\n         */\n        showWarningDialog(permanentState: boolean, message: string, buttonText?: string): void;\n        /**\n         * 添加要綁定的Error組件\n         * @param node\n         */\n        setErrorNode(node: cc.Node): this;\n        /**\n         * 添加要顯示Error訊息的Label\n         * @param label\n         */\n        setErrorLabel(label: cc.Label): this;\n        /**\n         * 添加errorButton綁定\n         * @param node\n         */\n        setErrorButton(node: cc.Node): this;\n        /**\n         * 添加要顯示的時間,目前只對(ErrorType.bet)生效\n         * @param time\n         */\n        setErrorDelayTime(time: number): this;\n        /**\n         * 添加警告要顯示的時間\n         */\n        setWarningDelayTime(time: number): this;\n        /**\n         * 添加要顯示警告的Node\n         * @param node\n         */\n        setWarningNode(node: cc.Node): this;\n        /**\n         * 添加要顯示警告的Node\n         * @param label\n         */\n        setWarningLabel(label: cc.Label): this;\n        /**\n         * 添加要顯示錯誤視窗中按鈕的label\n         * @param {cc.Label} label\n         * @return {this}\n         */\n        setErrorButtonLabel(label: cc.Label): this;\n        static get errorState(): boolean;\n        /**\n         * 當前 error dialog 狀態\n         * @param {boolean} value\n         */\n        static set errorState(value: boolean);\n        static get warningState(): boolean;\n        /**\n         * 當前 warning dialog 狀態\n         * @param {boolean} value\n         */\n        static set warningState(value: boolean);\n        get errorNode(): cc.Node;\n        get warningNode(): cc.Node;\n        get errorButton(): cc.Node;\n        get warningLabel(): cc.Label;\n        get errorLabel(): cc.Label;\n        get errorDelayTime(): number;\n        get warningDelayTime(): number;\n        get isShowBackHomeButton(): boolean;\n        get errorButtonLabel(): cc.Label;\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 動畫處理,處理後的動畫回傳給予manager保存\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class AnimationHandler implements IF.IAnimationHandler {\n        private readonly animationManager;\n        constructor(animationManager: IF.IAnimationManager);\n        /**\n         * 更新動畫管理器內的spineName數據\n         * @param resName\n         * @param keyName\n         * @param spineName\n         */\n        updateSpineAnimationName(resName: string, keyName: string, spineName: string): void;\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description TODO : 動畫管理器\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class AnimationManager implements IF.IAnimationManager {\n        private _spineName;\n        private static _instance;\n        private readonly _handler;\n        private readonly configManager;\n        private constructor();\n        /**\n         *  懶漢加載\n         *  初始化,只讓一個專案只有一次產生此class\n         */\n        static setInstance(configManager: IF.IConfigManager): void;\n        /**\n         *  獲取已經初始化的靜態實例class\n         */\n        static get instance(): IF.IAnimationManager;\n        getSpineName(resName: string, key: string | number): string;\n        set spineName(value: Map<string, Map<string, string>>);\n        get spineName(): Map<string, Map<string, string>>;\n        get handler(): IF.IAnimationHandler;\n    }\n}\ndeclare namespace fcc {\n    namespace type {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description 音樂撥放疊加時,各種狀態設定\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        enum AudioStateType {\n            /**\n             *檢測到該音樂正在撥放時,清除正在撥放的音樂,後重新播放該音樂\n             * @type {AudioStateType.CLEAR_TO_REPLAY}\n             */\n            CLEAR_TO_REPLAY = \"CLEAR_TO_REPLAY\",\n            /**\n             * 檢測到該音樂正在撥放時,將直接離開\n             * @type {AudioStateType.NOT_PLAYING}\n             */\n            NOT_PLAYING = \"NOT_PLAYING\",\n            /**\n             * 檢測到該音樂正在撥放時,將可疊加撥放\n             * @type {AudioStateType.SUPERIMPOSE}\n             */\n            SUPERIMPOSE = \"SUPERIMPOSE\"\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description (介面)音樂工廠類,派發音樂事件\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface IAudioFactory {\n            /**\n             * 保存該背景音樂撥放模式設定\n             * @param {string} name :音樂檔名稱\n             * @param {number} volume : 音量\n             * @param {boolean} loop : 是否循環\n             */\n            settingMusic(name: string, volume?: number, loop?: boolean): void;\n            /**\n             * 保存該效果音效撥放模式設定\n             * @param {string} name :音樂檔名稱\n             * @param {fcc.type.AudioStateType} canSuperimpose : 是否疊加撥放\n             * @param {number} volume : 音量\n             * @param {boolean} loop : 是否循環\n             */\n            settingEffect(name: string, canSuperimpose?: type.AudioStateType, volume?: number, loop?: boolean): void;\n            /**\n             * 撥放背景音樂\n             * 如果拿取不到享元撥放資料,將拿取預設資料\n             * @param {string} name\n             */\n            musicPlay(name: string): void;\n            /**\n             * 撥放效果音效\n             * 如果拿取不到享元撥放資料,將拿取預設資料\n             * @param {string} name\n             */\n            effectPlay(name: string): void;\n            /**\n             * 停止背景音樂\n             */\n            musicStop(): void;\n            /**\n             * 暫停背景音樂\n             */\n            musicPause(): void;\n            /**\n             * 停止效果音校\n             * @param {string} name\n             */\n            effectStop(name: string): any;\n            /**\n             * 停止所有效果音效\n             */\n            effectStopAll(): void;\n            /**\n             * 獲取該音樂撥放模式,如果返回NUll將照原預設\n             * @param {string} name\n             * @returns {Map<string, string | fcc.type.AudioStateType |boolean | number>}\n             */\n            getMusicState(name: string): Map<string, string | type.AudioStateType | boolean | number>;\n            /**\n             * 獲取該音效撥放模式,如果返回NUll將照原預設\n             * @param {string} name\n             * @returns {Map<string, string | fcc.type.AudioStateType | boolean | number>}\n             */\n            getEffectState(name: string): Map<string, string | type.AudioStateType | boolean | number>;\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description (介面)音樂管理類\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface IAudioManager {\n            /**\n             * 當前是否靜音\n             */\n            musicOnMute: boolean;\n            /**\n             * 當前是否靜音\n             */\n            effectOnMute: boolean;\n            /**\n             * 額外對該音樂做設定,可以不做設定,將會依照默認設定自動設定\n             * ```\n             *      預設參數:\n             *          volume : 默認為 Config 內的音量參數\n             *          loop : 默認 false\n             * ```\n             * @param {string} name - 音樂名稱\n             * @param {number} volume - 音量 0~1\n             * @param {boolean} loop - 是否重複撥放\n             * @return {this}\n             */\n            settingMusic(name: string, volume?: number, loop?: boolean): this;\n            /**\n             * 額外對該音效做設定,你可以不做設定,將會依照默認設定自動設定\n             * ```\n             *      預設參數:\n             *          canSuperimpose : fcc.type.AudioStateType.NOT_PLAYING\n             *          volume : 默認為 Config 內的音量參數\n             *          loop :默認為 false\n             * ```\n             * @param {string} name : 音效檔名\n             * @param {AudioStateType} canSuperimpose : 能否疊加\n             * @param {number} volume : 音量 0~1\n             * @param {boolean} loop : 是否重複撥放\n             * @return {this}\n             */\n            settingEffect(name: string, canSuperimpose?: type.AudioStateType, volume?: number, loop?: boolean): this;\n            /**\n             * 撥放音樂,將會依照當初設定的參數進行播放\n             * 若無發現可用參數設定,依照默認參數撥放\n             * @param {string} name - 音樂檔名\n             */\n            musicPlay(name: string): void;\n            /**\n             * 撥放音效,將會依照當初設定的參數進行播放\n             * 若無發現可用參數設定,依照默認參數撥放\n             * @param {string} name - 音效檔名\n             */\n            effectPlay(name: string): void;\n            /**\n             * 停止音樂\n             */\n            musicStop(): void;\n            /**\n             * 暫停音樂\n             */\n            musicPause(): void;\n            /**\n             * 停止音效\n             * @param {string} name - 音效檔名\n             */\n            effectStop(name: string): void;\n            /**\n             * 停止所有音效\n             */\n            effectStopAll(): void;\n            /**\n             * 獲取撥放的狀態\n             * ```\n             *      return data:\n             *          volume : number\n             *          loop : boolean\n             * ```\n             * @param {string} name - 音效檔名\n             * @return {Map<string, string | boolean | number>} - 撥放設定參數\n             */\n            getMusicState(name: string): Map<string, string | boolean | number>;\n            /**\n             * 獲取撥放的狀態\n             * ```\n             *      return data:\n             *          volume : number\n             *          canSuperimpose : fcc.type.AudioStateType\n             *          loop : boolean\n             * ```\n             * @param {string} name - 音樂檔名\n             * @return {Map<string, string | fcc.type.AudioStateType |boolean | number>} -\n             */\n            getEffectState(name: string): Map<string, string | boolean | number>;\n            /**\n             * 更新當前是否靜音模式\n             * @return {boolean} 當前是否靜音\n             */\n            updateMusicOnMute(): boolean;\n            /**\n             * 更新當前是否靜音模式\n             * @return {boolean} 當前是否靜音\n             */\n            updateEffectOnMute(): boolean;\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace global {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description 共用:操作數字{number}類方法\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        class Util {\n            private static formatting;\n            /**\n             * 四捨五入到小數點第N位\n             * @param {number} float - 浮點數\n             * @param {number} number - 要四捨五入到哪一位\n             * @return {number}\n             */\n            static roundOff(float: number, number: number): number;\n            /**\n             * 無條件捨去到小數點第N位\n             * @param {number} float - 浮點數\n             * @param {number} number - 要無條件捨去到哪一位\n             * @return {number}\n             */\n            static roundDown(float: number, number: number): number;\n            /**\n             * 無條件進位到小數點第N位\n             * @param {number} float - 浮點數\n             * @param {number} number - 要無條件進位到哪一位\n             * @return {number}\n             */\n            static roundUp(float: number, number: number): number;\n            /**\n             * 檢查該數字為小數有幾位\n             * @example input(1.03) -> output(2)\n             * @param {number}float - 浮點數\n             * @return {number}\n             */\n            static decimalsCount(float: number): number;\n            /**\n             * 將該數字轉字串並判斷是否能使用(K)單位取代零\n             * @example input(1000) -> output(1K)\n             * @param {number} number 需要格式化的數字\n             * @return {string} - 格式化後的字串數字\n             */\n            static numberFormat(number: number): string;\n            /**\n             * 將該數字格式化,每三個0前方給予','標記\n             * @example input(1000000) -> output(1,000,000)\n             * @param {number} number - 需要格式化的數字\n             * @return {string} - 格式化後的字串數字\n             */\n            static format(number: number): string;\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace type {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description 各種類型資源\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        enum LoadType {\n            /**\n             * 單一圖片\n             */\n            /**\n             * 圖輯類型\n             * @type {fcc.type.LoadType.IMG}\n             */\n            IMG = \"IMG\",\n            /**\n             * 圖輯類型\n             * @type {fcc.type.LoadType.IMG_ATLAS}\n             */\n            IMG_ATLAS = \"IMG_ATLAS\",\n            /**\n             * 骨骼动画類型\n             * @type {fcc.type.LoadType.SPINE}\n             */\n            SPINE = \"SPINE\",\n            /**\n             * 預載資源類型\n             * @type {fcc.type.LoadType.PREFAB}\n             */\n            PREFAB = \"PREFAB\",\n            /**\n             * 音樂類型\n             * @type {fcc.type.LoadType.MUSIC}\n             */\n            MUSIC = \"MUSIC\",\n            /**\n             * 文字類型(注意:目前只接收 .CSV 檔案)\n             * @type {fcc.type.LoadType.TEXT}\n             */\n            TEXT = \"TEXT\",\n            /**\n             * 場景類型(注意:動態載入資源需放入resource資料夾內 or bundle資料夾內)\n             * @type {fcc.type.LoadType.SCENE}\n             */\n            SCENE = \"SCENE\",\n            /**\n             * 外部URL腳本\n             * @type {fcc.type.LoadType.SCRIPT}\n             */\n            SCRIPT = \"SCRIPT\",\n            /**\n             * 外部URL CSS\n             * @type {fcc.type.LoadType.SCRIPT}\n             */\n            CSS = \"CSS\"\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description (介面)資源管理者\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface ILoadResManager {\n            /**\n             * 初始加載物件\n             */\n            initialLoadState: Map<string, number>;\n            /**\n             * 次加載,可以在還未加載完成時,也能進入MainGame Scene\n             */\n            secondaryLoadState: Map<string, number>;\n            /**\n             * 外部資料加載資源狀態\n             */\n            scriptLoadState: Map<string, number>;\n            /**\n             * img物件保存\n             */\n            imgRes: Map<string, Map<string, cc.SpriteFrame>>;\n            /**\n             * spine 物件保存\n             */\n            spineRes: Map<string, sp.SkeletonData>;\n            /**\n             * 讀取後的文件檔案,保存位置\n             */\n            readFileRes: Map<string, Map<string, string>>;\n            /**\n             * 讀取後的Prefab,保存位置\n             */\n            prefabRes: Map<string, cc.Prefab>;\n            /**\n             * 音樂保存位置\n             */\n            musicRes: Map<string, cc.AudioClip>;\n            /**\n             * 場景保存位置\n             */\n            sceneRes: Map<string, cc.SceneAsset>;\n            /**\n             * 外部腳本保存URL地址,單存判斷是否重複加載\n             * @type {Set<string>}\n             */\n            scriptRes: Set<string>;\n            /**\n             * 主資源加載物件,監聽是否有callback,隨之返回該狀態\n             * @param name - 加載物件名稱,由使用者自訂義加載名稱\n             * @param progress - 加載進度\n             * @param state - 該物件加載百分比\n             */\n            loadMainEventCallback(name: string, progress: number, state: number): void;\n            /**\n             * 次資源加載物件,監聽是否有callback,隨之返回該狀態\n             * 注意,該狀態無總資源監聽回傳事件\n             * @param {string} name - 加載物件名稱,由使用者自訂義加載名稱\n             * @param {number} state - 該物件加載百分比\n             */\n            loadSecondaryEventCallback(name: string, state: number): void;\n            /**\n             * 外部資源加載完成返回\n             * @param {string} name - 加載物件名稱(檔名)\n             * @param {number} isError - 是否加載錯誤\n             */\n            loadScriptEventCallback(name: string, isError: boolean): void;\n            /**\n             * 加載該資料夾底下所有資源 注意: 需存放於 resources中\n             * @param {string} name - 自訂義拿取資源時的名稱\n             * @param {LoadType} type - 要獲取的資源類型\n             * @param {string} url - 要獲取的資源位置\n             * @param {boolean} isLanguageUsed - 是否要使用語系位置\n             * @return {this}\n             */\n            loadAsset(name: string, type: type.LoadType, url: string, isLanguageUsed?: boolean): this;\n            /**\n             * 加載 該 assetBundle 底下資源\n             * 使用此方法者,加載狀態存放次加載中 secondaryLoadState\n             * 注意:須於UI勾選配置為Bundle資料夾\n             * @param {string} name - 自訂義拿取資源時的名稱\n             * @param {LoadType} type - 要獲取的資源類型\n             * @param {string} url - 要獲取的資源位置\n             * @param {boolean} isLanguageUsed - 是否要使用語系位置\n             */\n            loadBundle(name: string, type: type.LoadType, url: string, isLanguageUsed?: boolean): this;\n            /**\n             * 保存使用者要callback的方法,當有回傳進度時將透過 loadEventCallback方法回傳進度\n             * @param {(progress: number,isError?:boolean) => void} callFun\n             * @param {string} methodName- 自訂義拿取資源時的名稱\n             * @returns {this}: methodName 未使用情況,回傳 void\n             */\n            callback(callFun: (progress: number, isError?: boolean) => void, methodName?: string): this;\n            /**\n             * 加載外部腳本\n             * @param name - 檔案名稱,不含副檔名\n             * @param type - 檔案類型\n             * @param url - 檔案URL,不含外部 URL\n             * @param parameter - GET 參數\n             * @returns {this}\n             */\n            loadExternalScript(name: string, type: type.LoadType, url: string, parameter?: string): this;\n            /**\n             * 查看該資源是否已加載完畢\n             * @param name\n             * @param isMainResources\n             */\n            getLoadState(name: string, isMainResources: boolean): boolean;\n            /**\n             * 清除資源\n             * @param {string} type - 資源類型\n             */\n            remove(type: string): void;\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description (介面) 載入各類資源工廠\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface ILoadFactory {\n            /**\n             * 檢測當前Type,做各自對應的加載動作\n             * @param name\n             * @param type\n             * @param url\n             */\n            executeLoad(name: string, type: type.LoadType, url: string): void;\n            /**\n             * 執行Bundle載入動作\n             * @param name\n             * @param type\n             * @param url\n             */\n            executeLoadBundle(name: string, type: type.LoadType, url: string): void;\n            /**\n             * 加載外部腳本\n             * @param name - 檔案名稱,不含副檔名\n             * @param type - 檔案類型\n             * @param url - 檔案url,不含外部 url\n             * @param parameter - get 參數\n             */\n            executeLoadExternalScript(name: string, type: type.LoadType, url: string, parameter: string): void;\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description (介面)EventTarget 事件\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface IEventManager {\n            /**\n             * 事件總數量\n             */\n            eventCount: number;\n            /**\n             * 當前正在監聽那些事件;\n             */\n            eventsCurrentlyBeing: Map<string, string>;\n            /**\n             * 添加事件\n             * @param {string} eventName - 事件名稱\n             * @param parameter\n             */\n            emitEvent(eventName: type.ServerEventType | string, ...parameter: any): void;\n            /**\n             * server監聽回傳接收\n             * @param {string} eventName - 事件名稱\n             * @param {Function} callFun - 返回方法\n             * @param isPermanent - 是否常駐\n             * @param {any} self - 調用回哪個對象\n             */\n            eventListener(eventName: string, callFun: (...parameter: any) => void, isPermanent?: boolean, self?: any): void;\n            /**\n             * 刪除之前用同類型，回調，目標或 useCapture 註冊的事件監聽器，如果只傳遞 type，將會刪除 type 類型的所有事件監聽器。\n             * @param {ServerEventType | GameEventType} eventName - 事件名稱\n             * @param callFun?{Function} - 要刪除的方法,如果未傳參數,將默認全部相關的callFun一並刪除\n             */\n            destroyEvent(eventName: string, callFun?: Function): void;\n            /**\n             * 是否該事件持續監聽中\n             * @param {string} eventName - 事件名稱\n             * @return {boolean}\n             */\n            hasListening(eventName: type.ServerEventType | string): boolean;\n        }\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 事件管理器,當前綁定的事件,事件數量\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class EventManager implements IF.IEventManager {\n        private static _instance;\n        private configManager;\n        /**\n         * 事件總數量\n         */\n        private _eventCount;\n        /**\n         * 遊戲內事件\n         */\n        target: cc.EventTarget;\n        /**\n         * 當前正在監聽那些事件;\n         */\n        private readonly _eventsCurrentlyBeing;\n        private constructor();\n        /**\n         *  懶漢加載\n         *  初始化,只讓一個專案產生一次該class\n         */\n        static setInstance(configManager: IF.IConfigManager): void;\n        /**\n         *  獲取已經初始化的靜態實例class\n         */\n        static get instance(): IF.IEventManager;\n        /**\n         * 添加事件\n         * @param {string} eventName - 事件名稱\n         * @param {any} any : 要回傳的物件\n         */\n        emitEvent(eventName: type.ServerEventType | string, ...any: any): void;\n        /**\n         * server監聽回傳接收\n         * @param {string} eventName - 事件名稱\n         * @param {Function} callFun - 返回方法\n         * @param isPermanent - 是否常駐\n         * @param {any} self - 調用回哪個對象\n         */\n        eventListener(eventName: string, callFun: (...parameter: any) => void, isPermanent?: boolean, self?: any): void;\n        /**\n         * 刪除之前用同類型，回調，目標或 useCapture 註冊的事件監聽器，如果只傳遞 type，將會刪除 type 類型的所有事件監聽器。\n         * @param {ServerEventType | GameEventType} eventName - 事件名稱\n         * @param callFun?{Function} - 要刪除的方法,如果未傳參數,將默認全部相關的callFun一並刪除\n         */\n        destroyEvent(eventName: string, callFun?: Function): void;\n        /**\n         * 是否該事件持續監聽中\n         * @param {string} eventName - 事件名稱\n         * @return {boolean}\n         */\n        hasListening(eventName: string): boolean;\n        get eventCount(): number;\n        get eventsCurrentlyBeing(): Map<string, string>;\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 遊戲流程管理器 : 管理當前流程,執行當前流程\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class ProcessManager implements IF.IProcessManager {\n        private static _instance;\n        private configManager;\n        /**\n         * 當前遊戲狀態\n         * @type {fcc.type.GameStateType}\n         * @default - type.GameStateType.STANDBY\n         * @private\n         */\n        private _gameState;\n        /**\n         * 是否當前流程執行中\n         * @type {boolean}\n         * @private\n         */\n        private isStartProcess;\n        /**\n         * 流程工廠\n         * @type {fcc.IF.IGameProcessFactory}\n         * @private\n         */\n        private gameProcessFactory;\n        private constructor();\n        /**\n         *  懶漢加載\n         *  初始化,只讓一個專案只有一次產生此class\n         */\n        static setInstance(configManager: IF.IConfigManager): void;\n        /**\n         *  獲取已經初始化的靜態實例class\n         */\n        static get instance(): IF.IProcessManager;\n        /**\n         * 設定流程\n         * @param {fcc.type.ProcessType | string} processName - 可使用預設 ProcessType 或自訂義流程名稱\n         * @param {fcc.IF.IProcess} process - 流程\n         * @return {this}\n         */\n        setProcess(processName: type.ProcessType | string, process: IF.IProcess): this;\n        /**\n         * 初始流程,執行綁定的流程內的onCreate方法\n         * @param {string | fcc.type.ProcessType} processName - 指定只要初始哪個流程 class,如果使用無參方法,將會初始化所有綁定的流程\n         */\n        initProcess(processName?: string | fcc.type.ProcessType): void;\n        /**\n         * 設定初始要執行的流程\n         * @param processName - 流程名稱\n         */\n        setDefaultProcess(processName: type.ProcessType | string): void;\n        /**\n         * 更換流程\n         * @param {fcc.type.ProcessType | string} processName - 要更換的流程名稱\n         */\n        changeProcess(processName: type.ProcessType | string): void;\n        /**\n         * 執行設定好的流程\n         * @return {Promise<void>}\n         */\n        play(): Promise<void>;\n        /**\n         * 改變當前流程進行狀態\n         * @param {boolean} state\n         */\n        private updateProcessState;\n        /**\n         * 清除堵塞狀態\n         * 注意:清除該狀態後,該次的流程即使尚未執行完,也能執行下次流程\n         */\n        remake(): void;\n        set gameState(value: type.GameStateType);\n        get gameState(): type.GameStateType;\n    }\n}\ndeclare namespace fcc {\n    namespace type {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description 遊戲場景樣式\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        enum SceneStyleType {\n            /**\n             * 自動模式,將會配合玩家自動切換直式或橫式\n             * @type {SceneStyleType.AUTO}\n             */\n            AUTO = \"AUTO\",\n            /**\n             * 橫式樣式\n             * @type {SceneStyleType.HORIZONTAL}\n             */\n            HORIZONTAL = \"HORIZONTAL\",\n            /**\n             * 直式樣式\n             * @type {SceneStyleType.VERTICAL}\n             */\n            VERTICAL = \"VERTICAL\"\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace type {\n        /**\n         * @Author 蕭立品\n         * @Description 當前方向\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        enum SceneDirectionType {\n            /**\n             * 直向\n             * @type {SceneDirectionType.PORTRAIT}\n             */\n            PORTRAIT = \"PORTRAIT\",\n            /**\n             * 橫向\n             * @type {SceneDirectionType.LANDSCAPE}\n             */\n            LANDSCAPE = \"LANDSCAPE\"\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description (介面) 場景管理器\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface ISceneManager {\n            /**\n             *\n             */\n            sceneDirection: type.SceneDirectionType;\n            /**\n             * cavers 設計寬度\n             * @param {number} width - 寬度\n             * @returns {this}\n             */\n            setDesignWidth(width: number): this;\n            /**\n             * cavers 設計高度\n             * @param {number} height - 高度\n             * @return {this}\n             */\n            setDesignHeight(height: number): this;\n            /**\n             * 更新當前示配寬高,會保存上次的scene更動模式\n             * 如不添加 style 參數 ,第一次將會使用預設模式更動,\n             * 如果已經更動過,將會使用你上次的style樣式\n             * @param {SceneStyleType | Function} style : 可自定義更動樣式,但實作(介面)ISceneStyle\n             * @return {this}\n             */\n            updateSize(style?: type.SceneStyleType | ISceneStyle): this;\n            /**\n             * 監聽當前cavers是否有更動大小,如果有將會自動更新當前是配寬高\n             * 將會比照上次更動的樣式進行更動\n             * 如果需求更動樣式,須先更新 updateSize()\n             * @param {number} time : 更新的頻率 單位毫秒 ms\n             */\n            startListener(time: number): void;\n            /**\n             * 更換場景\n             * @param {string} name - 場景資源名稱為你Res動態加載的自訂義的scene名稱\n             */\n            changeScene(name: string): void;\n            /**\n             * 清除該scene所有動作\n             * @param scene{cc.Component} - 要清除的scene class\n             */\n            removeScene(scene: cc.Component): void;\n        }\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 監聽當前遊戲,玩家是否有更動寬高\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class SceneSizeChangeListener {\n        private _isCanUpdateScene;\n        private configManager;\n        private sceneManager;\n        constructor(configManager: IF.IConfigManager, sceneManager: IF.ISceneManager);\n        /**\n         * 監聽是否要更動scene寬高\n         * @param {number} delayTime - 更新頻率\n         */\n        designSceneEventListener(delayTime: number): void;\n        /**\n         * 依照designSceneEventListener()參數中的delay時間,更新cavers\n         * @param {number} time - 更新頻率\n         * @return {Promise<void>}\n         * @private\n         */\n        private makeDesignScene;\n    }\n}\ndeclare namespace fcc {\n    namespace ABS {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description TODO\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        abstract class ABaseNotification implements IF.IBaseNotification {\n            /**\n             * (抽象)NotificationHandler 用來獲取這個class的標籤\n             * 詳細由子類實現\n             */\n            abstract readonly TAG_NAME: string;\n            /**\n             * 觀察者\n             * @type {Set<IBaseObserver>}\n             * @protected\n             */\n            protected readonly observer: Set<IF.IBaseObserver>;\n            /**\n             * (抽象)推播事件,參數由子類詳細實現\n             * @param any\n             */\n            abstract notify(...any: any[]): void;\n            protected constructor();\n            /**\n             * 訂閱該事件\n             * @param {IBaseObserver} observer - 關注者\n             * @param {boolean} isPermanent - 是否常駐\n             */\n            subscribe(observer: IF.IBaseObserver, isPermanent: boolean): void;\n            /**\n             * 移除訂閱\n             * @param {IBaseObserver} observer - 關注者\n             */\n            unsubscribe(observer: IF.IBaseObserver): void;\n            /**\n             * 移除所有訂閱\n             */\n            removeAll(): void;\n            /**\n             * 獲取該事件所有訂閱數量\n             */\n            getSubscribeCount(): number;\n            /**\n             * 獲取該事件所有訂閱者\n             */\n            getAllSubscribe(): Set<IF.IBaseObserver>;\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace type {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description 推播事件\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        enum NotificationType {\n            /**\n             * 自動狀態改變時\n             * @type {fcc.type.NotificationType.AUTO_CHANGE}\n             */\n            AUTO_CHANGE = \"AUTO_CHANGE\",\n            /**\n             * 當前遊戲速度狀態改變時\n             * @type {fcc.type.NotificationType.SPEED_CHANGE}\n             */\n            SPEED_CHANGE = \"SPEED_CHANGE\",\n            /**\n             * 用戶金額變更時\n             * @type {fcc.type.NotificationType.USER_MONEY_CHANGE}\n             */\n            USER_MONEY_CHANGE = \"USER_MONEY_CHANGE\",\n            /**\n             * 用戶更換的押住金額時\n             * @type {fcc.type.NotificationType.USER_BET_CHANGE}\n             */\n            USER_BET_CHANGE = \"USER_BET_CHANGE\",\n            /**\n             * 用戶贏分時\n             * @type {fcc.type.NotificationType.USER_GET_WIN}\n             */\n            USER_GET_WIN = \"USER_GET_WIN\",\n            /**\n             * 用戶改變mobile方向時\n             * @type {fcc.type.NotificationType.SCENE_DIRECTION_CHANGE}\n             */\n            SCENE_DIRECTION_CHANGE = \"SCENE_DIRECTION_CHANGE\",\n            /**\n             * server 回傳結果時\n             * @type {fcc.type.NotificationType.RESPONSE_RESULT}\n             */\n            RESPONSE_RESULT = \"RESPONSE_RESULT\",\n            /**\n             * 瞇排事件時\n             * @type {fcc.type.NotificationType.SCROLL_FOCUS_STATE}\n             */\n            SCROLL_FOCUS_STATE = \"SCROLL_FOCUS_STATE\",\n            /**\n             * 監聽SLOT所有列,當該列結束時,推播事件\n             * @type {fcc.type.NotificationType.AUTO_CHANGE}\n             */\n            SLOT_ROW_END = \"SLOT_ROW_END\",\n            /**\n             * 即停事件\n             */\n            STOP_NOW = \"STOP_NOW\"\n        }\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 場景方向改變觀察者,當有事件推送時,將會將該事件推播給綁定者\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class SceneDirectionChangeObserver implements IF.IBaseObserver {\n        private _isPermanent;\n        private readonly self;\n        private readonly callFun;\n        constructor(callFun: (type: type.SceneDirectionType) => void, self: any);\n        pushNotification(type: type.SceneDirectionType): void;\n        get isPermanent(): boolean;\n        set isPermanent(value: boolean);\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 場景方向改變通知管理器\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class SceneDirectionChangeNotification extends ABS.ABaseNotification {\n        /**\n         * NotificationHandler 用來獲取這個class的標籤\n         * @type {string}\n         */\n        readonly TAG_NAME: string;\n        constructor();\n        /**\n         * 訂閱該事件\n         * @param {AutoStateChangeObserver} observer - 推撥接收者\n         * @param {boolean} isPermanent - 是否常駐監聽\n         */\n        subscribe(observer: SceneDirectionChangeObserver, isPermanent: boolean): void;\n        /**\n         * 用戶更換方向時推送通知\n         * @param {SceneDirectionType} type - 當前用戶方向\n         */\n        notify(type: type.SceneDirectionType): void;\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 自動模式 : 依照玩家當前的使用方式,自動更新為橫式 or 直式\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class AutoStyle implements IF.ISceneStyle {\n        private sceneManager;\n        private readonly eventLock;\n        constructor(sceneManager: IF.ISceneManager);\n        executionStyle(width: number, height: number): void;\n        /**\n         * 更新管理器內的 sceneDirection 變數,並推撥已更新當前場景方向的事件\n         *\n         * 注意 : 如果當前方向不變,卻更新了遊戲是配度,是不會推波事件的\n         *       只有方向改變才會推送推波事件\n         */\n        updateSceneDirection(): void;\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 橫式樣式更新\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class HorizontalStyle implements IF.ISceneStyle {\n        private curDR;\n        executionStyle(width: number, height: number): void;\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 直式樣式更新\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class VerticalStyle implements IF.ISceneStyle {\n        executionStyle(width: number, height: number): void;\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 依照初始設定對應的更新模式,更新當前遊戲場景\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class SceneStyleHandler {\n        private autoStyle;\n        private horizontalStyle;\n        private verticalStyle;\n        private readonly sceneManager;\n        constructor(sceneManager: IF.ISceneManager);\n        /**\n         * 匹對對應的更新類,做相對應的更新\n         * @param {fcc.type.SceneStyleType | fcc.IF.ISceneStyle} sceneStyle - 對應的的樣式 or 自訂義樣式\n         * @param {number} width - 寬\n         * @param {number} height - 高\n         */\n        getStyle(sceneStyle: type.SceneStyleType | IF.ISceneStyle, width: number, height: number): void;\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 場景管理器 : 自動匹配遊戲寬高,監聽當前玩家遊玩模式(橫式or直式)\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class SceneManager implements IF.ISceneManager {\n        private configManager;\n        private static _instance;\n        private style;\n        private _designWidth;\n        private _designHeight;\n        private sceneSizeChangeListener;\n        private sceneStyleHandler;\n        private _sceneDirection;\n        private constructor();\n        /**\n         *  懶漢加載\n         *  初始化,只讓一個專案產生一次該class\n         * @param {fcc.IF.IConfigManager} configManager\n         */\n        static setInstance(configManager: IF.IConfigManager): void;\n        /**\n         *  獲取已經初始化的靜態實例class\n         */\n        static get instance(): IF.ISceneManager;\n        /**\n         * cavers 設計寬度\n         * @param {number} width - 寬度\n         * @return {this}\n         */\n        setDesignWidth(width: number): this;\n        /**\n         * cavers 設計高度\n         * @param {number} height - 高度\n         * @return {this}\n         */\n        setDesignHeight(height: number): this;\n        /**\n         * 更新當前示配寬高,會保存上次的scene更動模式\n         * 如不添加參數,第一次將會使用預設模式更動\n         * @param {SceneStyleType | Function} style - 可自定義更動樣式,但需實作(介面)ISceneStyle\n         * @return {this}\n         */\n        updateSize(style?: type.SceneStyleType | IF.ISceneStyle): this;\n        /**\n         * 監聽當前cavers是否有更動大小,如果有將會自動更新當前是配寬高\n         * 將會比照上次更動的樣式進行更動\n         * 如果需求更動樣式,須先更新 updateSize()\n         * @param {number} time : 更新的頻率 單位毫秒 ms\n         */\n        startListener(time: number): void;\n        /**\n         * 更換場景\n         * @param {string} name : 場景資源名稱為你Res動態加載的自訂義的scene名稱\n         */\n        changeScene(name: string): void;\n        /**\n         * 清除該scene所有動作\n         * @param scene{cc.Component} - 要清除的scene class\n         */\n        removeScene(scene: cc.Component): void;\n        get sceneDirection(): type.SceneDirectionType;\n        set sceneDirection(value: type.SceneDirectionType);\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        interface ISlotStyleManager {\n            readonly slot: Map<string, IF.ISlot>;\n            readonly slotStyle: Map<string, IF.ISlotSetting>;\n            /**\n             * 添加老虎機主流程 需繼承 ISlot\n             * @return {this}\n             */\n            setSlotTemplate<T extends new (styleData: IF.ISlotSetting, configManager: IF.IConfigManager) => IF.ISlot>(slotTemplate: T): this;\n            /**\n             * 添加slot主事件樣式設定\n             */\n            setSlotStyle<T extends IF.ISlotSetting>(slotSetting?: new (slotStyleManager: IF.ISlotStyleManager) => T): T;\n            /**\n             * 初始所有操作,並實例化  綁定的 slot Class\n             */\n            build(slotSetting: IF.ISlotSetting): void;\n        }\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 老虎機管理器 : 管理老虎機樣式,執行速度,效果\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class SlotStyleManager implements IF.ISlotStyleManager {\n        private static _instance;\n        private readonly configManager;\n        private template;\n        private readonly _slot;\n        private readonly _slotStyle;\n        private constructor();\n        /**\n         *  懶漢加載\n         *  初始化,只讓一個專案產生一次該class\n         */\n        static setInstance(configManager: IF.IConfigManager): void;\n        /**\n         *  獲取已經初始化的靜態實例class\n         */\n        static get instance(): IF.ISlotStyleManager;\n        /**\n         * 添加執行流程的class 需繼承 ISlot\n         * @param {ASlot} slotTemplate\n         * @return {this}\n         */\n        setSlotTemplate<T extends new (styleData: IF.ISlotSetting, configManager: IF.IConfigManager) => IF.ISlot>(slotTemplate: T): this;\n        /**\n         * 添加slot主事件樣式設定\n         * @param {{new(slotStyleManager: fcc.IF.ISlotStyleManager): T}} slotSetting\n         * @return {T}\n         */\n        setSlotStyle<T extends IF.ISlotSetting>(slotSetting?: new (slotStyleManager: IF.ISlotStyleManager) => T): T;\n        /**\n         * 初始化Slot : 將Slot設定參數給予Slot做初始處理\n         */\n        build(slotSetting: IF.ISlotSetting): void;\n        get slot(): Map<string, fcc.IF.ISlot>;\n        get slotStyle(): Map<string, fcc.IF.ISlotSetting>;\n    }\n}\ndeclare namespace fcc {\n    namespace type {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description 遊戲自動狀態種類\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        enum AutoType {\n            /**\n             * 無限AUTO\n             * @type {AutoType.AUTO}\n             */\n            AUTO = -1,\n            /**\n             * 直到Free出現後,結束AUTO狀態\n             * @type {AutoType.AUTO}\n             */\n            FREE_END = -2,\n            /**\n             * AUTO 50次\n             * @type {AutoType.AUTO_50}\n             */\n            AUTO_50 = 50,\n            /**\n             * AUTO 100次\n             * @type {AutoType.AUTO_100}\n             */\n            AUTO_100 = 100,\n            /**\n             * AUTO 500次\n             * @type {AutoType.AUTO_100}\n             */\n            AUTO_500 = 500,\n            /**\n             * AUTO 1000次\n             * @type {AutoType.AUTO_1000}\n             */\n            AUTO_1000 = 1000\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description (介面) 老虎機類遊戲初期設定\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface ISlotConfigManager extends IConfigManager {\n            /**\n             * 是否在遊戲進入後開啟auto狀態\n             * @type {boolean}\n             * @default false\n             * @private\n             */\n            readonly isAuto: boolean;\n            /**\n             * 初始遊戲最初的auto次數\n             * @type {AutoType}\n             * @default type.AutoType.AUTO\n             * @private\n             */\n            readonly autoCount: number;\n            /**\n             * 初始開始遊戲前是否是加速狀態\n             * @type {boolean}\n             * @default false\n             * @private\n             */\n            readonly isSpeedUp: boolean;\n            /**\n             * 初始遊戲最初的auto次數\n             * @param {AutoType} type\n             * @default type.AutoType.AUTO\n             * @returns {this}\n             */\n            setAutoCont(type: number): this;\n            /**\n             * 初始進入遊戲時Auto狀態\n             * @param {boolean} isAuto - 是否在遊戲進入後開啟auto狀態\n             * @default false\n             * @returns {this}\n             */\n            setAutoState(isAuto: boolean): this;\n            /**\n             * 是否在遊戲進入後是加速的狀態\n             * @param {boolean} isSpeedUp\n             * @default false\n             * @returns {this}\n             */\n            setSpeedState(isSpeedUp: boolean): this;\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace type {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description TODO\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        enum LanguageType {\n            /**\n             * 台灣\n             * @type {LanguageType.TAIWAN}\n             */\n            TAIWAN = \"NTD\",\n            /**\n             * 中國\n             * @type {LanguageType.CHINESE}\n             */\n            CHINESE = \"CNY\",\n            /**\n             * 泰國\n             * @type {LanguageType.THAILAND}\n             */\n            THAILAND = \"THB\",\n            /**\n             * 美國\n             * @type {LanguageType.AMERICA}\n             */\n            AMERICA = \"USD\",\n            /**\n             * 越南\n             * @type {LanguageType.VIETNAM}\n             */\n            VIETNAM = \"VND\",\n            /**\n             * 印尼\n             */\n            INDONESIA = \"IDR\",\n            /**\n             * 馬來西亞\n             */\n            MALAYSIA = \"MYR\"\n        }\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 遊戲初始設定,並透過builder加載所有Manager\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class SlotConfigManager implements IF.ISlotConfigManager {\n        private static _instance;\n        /**\n         * 載入外部資源URL\n         * @type {string}\n         * @private\n         */\n        private _externallyLoadURL;\n        /**\n         * 當前遊戲名稱\n         * @type {string}\n         * @private\n         */\n        private _gameNumber;\n        /**\n         * 是否在遊戲進入後開啟auto狀態\n         * @type {boolean}\n         * @private\n         */\n        private _isAuto;\n        /**\n         * 初始遊戲最初的auto次數\n         * @type {AutoType}\n         * @private\n         */\n        private _autoCount;\n        /**\n         * 是否在遊戲進入後是加速的狀態\n         * @type {boolean}\n         * @private\n         */\n        private _isSpeedUp;\n        /**\n         * 初始背景音樂音量(該音量將會成為AudioManager內預設音量)\n         * @type {number}\n         * @private\n         */\n        private _musicVolume;\n        /**\n         * 初始將背景音樂靜音\n         * @type {boolean}\n         * @private\n         */\n        private _isMusicOnMute;\n        /**\n         * 初始效果音量(該音量將會成為AudioManager內預設音量)\n         * @type {number}\n         * @private\n         */\n        private _effectVolume;\n        /**\n         * 初始將效果音效靜音\n         * @type {boolean}\n         * @private\n         */\n        private _isEffectOnMute;\n        /**\n         * 當前語系\n         * @type {LanguageType}\n         * @private\n         */\n        private _language;\n        /**\n         * 返回首頁URL\n         */\n        private _backHomeURL;\n        /**\n         * 是否要開啟Framework Debug模式\n         * 注意:遊戲正式上線須關閉\n         * @type {boolean}\n         * @private\n         */\n        private _isFrameworkDebug;\n        /**\n         * cocos 框架 debug設定\n         * @default : INFO\n         */\n        private _cocosDebugSetting;\n        private constructor();\n        /**\n         * 懶漢加載\n         * 初始化,只讓一個專案只有一次產生此class\n         * @returns {SlotConfigManager}\n         */\n        static get instance(): IF.ISlotConfigManager;\n        /**\n         * 添加遊戲名稱\n         * @param {string} name - 遊戲名稱\n         * @default null\n         * @returns {this}\n         */\n        setGameNumber(name: string): this;\n        /**\n         * 設置初始預設音量\n         * @param {number} number - 音量 0~1\n         * @default 1\n         * @returns {this}\n         */\n        setMusicVolume(number: number): this;\n        /**\n         * 設置初始預設效果音量\n         * @param {number} number - 音量 0~1\n         * @default 1\n         * @returns {this}\n         */\n        setEffectVolume(number: number): this;\n        /**\n         * 初始將背景音樂靜音\n         * @param {boolean} OnMute - 是否靜音\n         * @default false\n         * @returns {this}\n         */\n        setMusicOnMute(OnMute: boolean): this;\n        /**\n         * 初始是否將效果音效靜音\n         * @param {boolean} OnMute - 是否靜音\n         * @default false\n         * @returns {this}\n         */\n        setEffectOnMute(OnMute: boolean): this;\n        /**\n         * 初始遊戲最初的auto次數\n         * @param {AutoType} type\n         * @default type.AutoType.AUTO\n         * @returns {this}\n         */\n        setAutoCont(type: type.AutoType): this;\n        /**\n         * 初始要從外部拿取資源的URL\n         * @param {string} url : 獲取外部資源的URL\n         * @default \"\"\n         * @returns {this}\n         */\n        setExternallyLoadURL(url: string): this;\n        /**\n         * 初始語系\n         * @param {LanguageType} languageType - 語系\n         * @default LanguageType.CHINESE\n         * @returns {this}\n         */\n        setLanguage(languageType: string): this;\n        /**\n         * 初始進入遊戲時Auto狀態\n         * @param {boolean} isAuto - 是否在遊戲進入後開啟auto狀態\n         * @default false\n         * @returns {this}\n         */\n        setAutoState(isAuto: boolean): this;\n        /**\n         * 是否在遊戲進入後是加速的狀態\n         * @param {boolean} isSpeedUp\n         * @default false\n         * @returns {this}\n         */\n        setSpeedState(isSpeedUp: boolean): this;\n        /**\n         * 是否要開啟Framework Debug模式\n         * 注意:遊戲正式上線須關閉\n         * @param {boolean} use\n         * @default true\n         * @returns {this}\n         */\n        setFrameWorkDebug(use: boolean): this;\n        /**\n         * cocos 框架 debug設定\n         * @param {cc.debug.DebugMode} type - debug 樣式\n         * @default - cc.debug.DebugMode.INFO\n         * @return {this}\n         */\n        setCocosDebug(type: cc.debug.DebugMode): this;\n        /**\n         * 返回首頁URL\n         * @param {string} url\n         * @default null\n         * @returns {this}\n         */\n        setBackHomeURL(url: string): this;\n        /**\n         * 實例化所有Manager class;\n         */\n        build(): void;\n        get externallyLoadURL(): string;\n        get gameNumber(): string;\n        get isAuto(): boolean;\n        get autoCount(): number;\n        get isSpeedUp(): boolean;\n        get musicVolume(): number;\n        get effectVolume(): number;\n        get language(): type.LanguageType | string;\n        get isFrameworkDebug(): boolean;\n        get isEffectOnMute(): boolean;\n        get isMusicOnMute(): boolean;\n        get backHomeURL(): string;\n        get cocosDebugSetting(): cc.debug.DebugMode;\n    }\n}\ndeclare namespace fcc {\n    namespace ABS {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description (抽象類)載入外部腳本\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        abstract class ALoadScriptType {\n            protected scriptName: string;\n            protected type: string;\n            protected url: string;\n            protected parameter: string;\n            protected static head: HTMLHeadElement;\n            protected constructor(scriptName: string, type: string, url: string, parameter: string);\n            abstract loadScript(): void;\n        }\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 加載外部css資源\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class CSSLoad extends ABS.ALoadScriptType {\n        private readonly linkElem;\n        constructor(scriptName: string, type: string, url: string, parameter: string);\n        loadScript(): void;\n    }\n}\ndeclare namespace fcc {\n    class ScriptLoad extends ABS.ALoadScriptType {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description 載入外部 js 腳本\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        private readonly linkElem;\n        constructor(scriptName: string, type: string, url: string, parameter: string);\n        loadScript(): void;\n    }\n}\ndeclare namespace fcc {\n    namespace ABS {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description (抽象類)載入各類cocos資源\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        abstract class ALoadType implements IF.ILoadType {\n            protected type: any;\n            protected url: string;\n            protected dataName: string;\n            protected folder: string;\n            private beforeProgress;\n            private assetBundle;\n            protected constructor(dataName: string, type: cc.Asset, url: string, folder: string);\n            /**\n             * 加載資源方法\n             */\n            loadResources(): void;\n            /**\n             * 回傳該加載的資源\n             * @param {Error} error - 錯誤訊息\n             * @param {[] | cc.SceneAsset} assets - 資源\n             * @private\n             */\n            private loadResCallBack;\n            /**\n             * 回傳當前載入進度\n             * @param {number} complete - 以載入完畢的數量\n             * @param {number} TotalAmount - 總數量\n             * @private\n             */\n            private loadResProgress;\n            /**\n             * 載入完成後回調\n             * @protected\n             */\n            protected updateProgressEnd(): void;\n            /**\n             * 更新當前進度\n             * @param {string} key - 該資源名稱\n             * @param {number} state - 當前進度\n             * @param {number} update - 更上次進度比起,新增了多少進度\n             * @protected\n             */\n            protected updateManagerState(key: string, state: number, update: number): void;\n            /**\n             * 將資源保存在管理器中\n             * @param {string} dataName - 自訂義該資源名稱\n             * @param asset - 資源\n             * @protected\n             */\n            protected abstract setResToManager(dataName: string, asset: any): void;\n        }\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 載入圖片資源\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class ImgLoad extends ABS.ALoadType {\n        constructor(dataName: string, type: any, url: string, folder: string);\n        /**\n         * 將資源保存在管理器中\n         * @param {string} dataName - 自訂義該資源名稱\n         * @param {cc.SpriteAtlas} asset - 資源\n         * @protected\n         */\n        setResToManager(dataName: string, asset: cc.SpriteFrame[]): void;\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 載入音樂資源\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class MusicLoad extends ABS.ALoadType {\n        constructor(dataName: string, type: any, url: string, folder: string);\n        /**\n         * 將資源保存在管理器中\n         * @param {string} dataName - 自訂義該資源名稱\n         * @param {cc.AudioClip} asset - 資源\n         * @protected\n         */\n        setResToManager(dataName: string, asset: Array<cc.AudioClip>): void;\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 載入圖片資源\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class PrefabLoad extends ABS.ALoadType {\n        constructor(dataName: string, type: any, url: string, folder: string);\n        /**\n         * 將資源保存在管理器中\n         * @param {string} dataName - 自訂義該資源名稱\n         * @param {cc.AudioClip} asset - 資源\n         * @protected\n         */\n        setResToManager(dataName: string, asset: Array<cc.Prefab>): void;\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 載入場景資源\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class SceneLoad extends ABS.ALoadType {\n        constructor(dataName: string, type: any, url: string, folder: string);\n        /**\n         * 將資源保存在管理器中\n         * @param {string} dataName - 自訂義該資源名稱\n         * @param {cc.AudioClip} asset - 資源\n         * @protected\n         */\n        setResToManager(dataName: string, asset: any): void;\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 載入骨骼动画資源\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class SpineLoad extends ABS.ALoadType {\n        constructor(dataName: string, type: any, url: string, folder: string);\n        /**\n         * 將資源保存在管理器中\n         * @param {string} dataName - 自訂義該資源名稱\n         * @param {cc.SkeletonData} asset - 資源\n         * @protected\n         */\n        setResToManager(dataName: string, asset: Array<sp.SkeletonData>): void;\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 載入文本資源,目前只能載入.CSV 檔案\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class TextLoad extends ABS.ALoadType {\n        constructor(dataName: string, type: any, url: string, folder: string);\n        /**\n         *  目前只能傳入 .CSV 檔案,目前無從判斷該檔案副檔名\n         *  因此需自行檢查回傳資料是否正確\n         * @param {string} dataName - 自訂義該資源名稱\n         * @param {cc.SkeletonData} asset - 資源\n         * @protected\n         */\n        setResToManager(dataName: string, asset: cc.TextAsset): void;\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 載入各類資源工廠\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class LoadTypeFactory implements IF.ILoadFactory {\n        private isLoadBundle;\n        private assetBundle;\n        private promise;\n        private readonly assetMethod;\n        private configManager;\n        private loadResManager;\n        constructor(loadResManager: IF.ILoadResManager, configManager: IF.IConfigManager);\n        /**\n         * 次資源加載\n         * @param {string} dataName - 檔案名稱\n         * @param {fcc.type.LoadType} type - 檔案類型\n         * @param {string} url - 檔案位置\n         * @return {Promise<void>}\n         */\n        loadBundle(dataName: string, type: type.LoadType, url: string): Promise<void>;\n        /**\n         * 檢測當前Type,做各自對應的加載動作\n         * @param dataName - 自訂義資源名稱\n         * @param type - 資源類型\n         * @param url - 資源位置\n         */\n        executeLoad(dataName: string, type: type.LoadType, url: string): void;\n        /**\n         * 執行Bundle載入動作\n         * @param dataName - 自訂義資源名稱\n         * @param type - 資源類型\n         * @param url - 資源位置\n         */\n        executeLoadBundle(dataName: string, type: type.LoadType, url: string): Promise<void>;\n        /**\n         * 確認當前資源類型,給相對應class 處理\n         * @param {string} dataName - 自訂義資源名稱\n         * @param {fcc.type.LoadType} type - 資源類型\n         * @param {string} url - 資源位置\n         * @param {string} folder - 資源父類資料夾,默認 resource\n         * @private\n         */\n        private checkLoadType;\n        /**\n         * 加載外部腳本\n         * @param name - 檔案名稱,不含副檔名\n         * @param type - 檔案類型\n         * @param url - 檔案url,不含外部 url\n         * @param parameter - get 參數\n         */\n        executeLoadExternalScript(name: string, type: type.LoadType, url: string, parameter: string): void;\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 處理個別類型資源載入\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class LoadTypeHandler implements IF.ILoadFactory {\n        private factory;\n        private loadResManager;\n        constructor(loadResManager: IF.ILoadResManager, configManager: IF.IConfigManager);\n        /**\n         * 檢測當前Type,做各自對應的加載動作\n         * @param name\n         * @param type\n         * @param url\n         */\n        executeLoad(name: string, type: type.LoadType, url: string): void;\n        /**\n         * 執行Bundle載入動作\n         * @param name\n         * @param type\n         * @param url\n         */\n        executeLoadBundle(name: string, type: type.LoadType, url: string): Promise<void>;\n        /**\n         * 檢查重複命名\n         * @param {string} name\n         * @private\n         */\n        private checkRepeatTheName;\n        /**\n         * 加載外部腳本\n         * @param name - 檔案名稱,不含副檔名\n         * @param type - 檔案類型\n         * @param url - 檔案url,不含外部 url\n         * @param parameter - get 參數\n         */\n        executeLoadExternalScript(name: string, type: type.LoadType, url: string, parameter: string): void;\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 資源管理者 : 加載資源,保存資源,或取當前加載進度\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class LoadResManager implements IF.ILoadResManager {\n        private configManager;\n        private static _instance;\n        /**\n         * 初始加載物件進度\n         */\n        private _initialLoadState;\n        /**\n         * 次加載,可以在還未加載完成時,也能進入MainGame Scene\n         */\n        private _secondaryLoadState;\n        /**\n         * 外部資料加載資源狀態\n         * @type {Map<string, number>}\n         * @private\n         */\n        private readonly _scriptLoadState;\n        /**\n         * img物件保存\n         */\n        private _imgRes;\n        /**\n         * spine 物件保存\n         */\n        private _spineRes;\n        /**\n         * 讀取後的文件檔案,保存位置\n         */\n        private _readFileRes;\n        /**\n         * 讀取後的Prefab,保存位置\n         */\n        private _prefabRes;\n        /**\n         * 音樂保存位置\n         */\n        private _musicRes;\n        /**\n         * 外部腳本保存URL地址,單存判斷是否重複加載\n         * @type {Set<string>}\n         */\n        private _scriptRes;\n        /**\n         * 場景保存位置\n         */\n        private _sceneRes;\n        private readonly loadTypeHandler;\n        private callFun;\n        private count;\n        private allProgress;\n        private beforeProgress;\n        private allProgressEndCount;\n        private constructor();\n        /**\n         *  懶漢加載\n         *  初始化,只讓一個專案產生一次該class\n         */\n        static setInstance(configManager: IF.IConfigManager): void;\n        /**\n         *  獲取已經初始化的靜態實例class\n         */\n        static get instance(): IF.ILoadResManager;\n        /**\n         * 主資源加載物件,監聽是否有callback,隨之返回該狀態\n         * @param name - 加載物件名稱,由使用者自訂義加載名稱\n         * @param progress - 加載進度\n         * @param state - 該物件加載百分比\n         */\n        loadMainEventCallback(name: string, progress: number, state: number): void;\n        /**\n         * 次資源加載物件,監聽是否有callback,隨之返回該狀態\n         * 注意,該狀態無總資源監聽回傳事件\n         * @param {string} name - 加載物件名稱,由使用者自訂義加載名稱\n         * @param {number} state - 該物件加載百分比\n         */\n        loadSecondaryEventCallback(name: string, state: number): void;\n        /**\n         * 外部資源加載完成返回\n         * @param {string} name - 加載物件名稱(檔名)\n         * @param {number} isError - 是否加載錯誤\n         */\n        loadScriptEventCallback(name: string, isError: boolean): void;\n        /**\n         * 單一資源返回判斷,用戶是否有添加callback參數\n         * @param {string} name - 加載物件名稱\n         * @param {number} state - 該物件加載百分比\n         * @param isError - 是否有錯誤回傳(外部加載腳本用)\n         * @private\n         */\n        private onlyResEventCallback;\n        /**\n         * 加載該資料夾底下所有資源 注意: 需存放於 resources中\n         * @param {string} name - 自訂義拿取資源時的名稱\n         * @param {LoadType} type - 要獲取的資源類型\n         * @param {string} url - 要獲取的資源位置\n         * @param {boolean} isLanguageUsed - 是否要使用語系位置\n         * @return {this}\n         */\n        loadAsset(name: string, type: type.LoadType, url: string, isLanguageUsed?: boolean): this;\n        /**\n         * 加載 該 assetBundle 底下資源\n         * 使用此方法者,加載狀態存放次加載中 secondaryLoadState\n         * 注意:須於UI勾選配置為Bundle資料夾\n         * @param {string} name - 自訂義拿取資源時的名稱\n         * @param {LoadType} type - 要獲取的資源類型\n         * @param {string} url - 要獲取的資源位置\n         * @param {boolean} isLanguageUsed - 是否要使用語系位置\n         */\n        loadBundle(name: string, type: type.LoadType, url: string, isLanguageUsed?: boolean): this;\n        /**\n         * 保存使用者要callback的方法,當有回傳進度時將透過 loadEventCallback方法回傳進度\n         * @param {(progress: number,isError?:boolean) => void} callFun\n         * @param {string} resName - 檔案名稱\n         * @returns {this}: methodName 未使用情況,回傳 void\n         */\n        callback(callFun: (progress: number, isError?: boolean) => void, resName?: string): this;\n        /**\n         * 查看該資源是否已加載完畢\n         * @param name\n         * @param isMainResources\n         */\n        getLoadState(name: string, isMainResources: boolean): boolean;\n        /**\n         * 加載外部腳本\n         * @param name - 檔案名稱,不含副檔名\n         * @param type - 檔案類型\n         * @param url - 檔案URL,不含外部 URL\n         * @param parameter - GET 參數\n         * @returns {this}\n         */\n        loadExternalScript(name: string, type: type.LoadType, url: string, parameter?: string): this;\n        /**\n         * 清除資源\n         * @param {string} type - 資源類型\n         */\n        remove(type: string): void;\n        set initialLoadState(value: Map<string, number>);\n        set secondaryLoadState(value: Map<string, number>);\n        set imgRes(value: Map<string, Map<string, cc.SpriteFrame>>);\n        set spineRes(value: Map<string, sp.SkeletonData>);\n        set readFileRes(value: Map<string, Map<string, string>>);\n        set prefabRes(value: Map<string, cc.Prefab>);\n        set musicRes(value: Map<string, cc.AudioClip>);\n        set scriptRes(value: Set<string>);\n        set sceneRes(value: Map<string, cc.SceneAsset>);\n        get initialLoadState(): Map<string, number>;\n        get secondaryLoadState(): Map<string, number>;\n        get scriptLoadState(): Map<string, number>;\n        get imgRes(): Map<string, Map<string, cc.SpriteFrame>>;\n        get spineRes(): Map<string, sp.SkeletonData>;\n        get readFileRes(): Map<string, Map<string, string>>;\n        get prefabRes(): Map<string, cc.Prefab>;\n        get musicRes(): Map<string, cc.AudioClip>;\n        get scriptRes(): Set<string>;\n        get sceneRes(): Map<string, cc.SceneAsset>;\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 音樂撥放|暫停控制器,跟音效類稍微不同,只保存當下一個MusicID\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class MusicController implements IF.IAudioType {\n        private musicID;\n        constructor();\n        /**\n         * 撥放背景音樂,並配合享元資料,作相對應的撥放模式處理\n         * @param {string} name\n         * @param {Map<string, any>} data\n         */\n        play(name: string, data: Map<string, any>): void;\n        /**\n         *停止背景音樂\n         */\n        stop(): void;\n        /**\n         * 暫停背景音樂\n         */\n        pause(): void;\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 效果音效撥放|暫停控制器\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class EffectController implements IF.IAudioType {\n        private effectID;\n        constructor();\n        /**\n         * 撥放效果音效,並配合享元資料,作相對應的撥放模式處理\n         * @param {string} name\n         * @param {Map<string, any>} data : 撥放模式資料\n         */\n        play(name: string, data: Map<string, any>): void;\n        /**\n         * 停止該音樂,並清除該Map effectID\n         * @param {string} name\n         */\n        stop(name: string): void;\n        /**\n         * 停止所有音效,並清除整個Map effectID\n         */\n        stopAll(): void;\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 音樂工廠類,派發音樂事件\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class AudioFactory implements IF.IAudioFactory {\n        private readonly musicVolume;\n        private readonly effectVolume;\n        private readonly canSuperimpose;\n        private musicOnMute;\n        private effectOnMute;\n        private readonly loop;\n        private readonly musicData;\n        private readonly effectData;\n        private musicNormalData;\n        private effectNormalData;\n        private musicController;\n        private effectController;\n        private audioManager;\n        private configManager;\n        constructor(audioManager: IF.IAudioManager, configManager: IF.IConfigManager);\n        /**\n         * 初始化享元預設撥放模式\n         */\n        private initializeData;\n        /**\n         * 保存該背景音樂撥放模式設定\n         * @param {string} name - 音樂檔名稱\n         * @param {number} volume - 音量\n         * @param {boolean} loop - 是否循環\n         */\n        settingMusic(name: string, volume?: number, loop?: boolean): void;\n        /**\n         * 保存該效果音效撥放模式設定\n         * @param {string} name -音樂檔名稱\n         * @param {AudioStateType} canSuperimpose - 是否疊加撥放\n         * @param {number} volume - 音量\n         * @param {boolean} loop - 是否循環\n         */\n        settingEffect(name: string, canSuperimpose?: type.AudioStateType, volume?: number, loop?: boolean): void;\n        /**\n         * 撥放背景音樂\n         * 如果拿取不到享元撥放資料,將拿取預設資料\n         * @param {string} name - 音樂檔名\n         */\n        musicPlay(name: string): void;\n        /**\n         * 撥放效果音效\n         * 如果拿取不到享元撥放資料,將拿取預設資料\n         * @param {string} name - 音樂檔名\n         */\n        effectPlay(name: string): void;\n        /**\n         * 停止背景音樂\n         */\n        musicStop(): void;\n        /**\n         * 暫停背景音樂\n         */\n        musicPause(): void;\n        /**\n         * 停止效果音校\n         * @param {string} name - 音樂檔名\n         */\n        effectStop(name: string): void;\n        /**\n         * 停止所有效果音效\n         */\n        effectStopAll(): void;\n        /**\n         * 獲取該音樂撥放模式,如果返回NUll將照原預設\n         * @param {string} name - 音樂檔名\n         * @returns {Map<string, string | boolean | number>}\n         */\n        getMusicState(name: string): Map<string, string | number | boolean>;\n        /**\n         * 獲取該音效撥放模式,如果返回NUll將照原預設\n         * @param {string} name - 音樂檔名\n         * @returns {Map<string, string | boolean | number>}\n         */\n        getEffectState(name: string): Map<string, string | number | boolean>;\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 音樂管理器,初始設定各音樂狀態,保存當前撥放音量\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class AudioManager implements IF.IAudioManager {\n        private configManager;\n        private static _instance;\n        private factory;\n        private _musicOnMute;\n        private _effectOnMute;\n        private constructor();\n        /**\n         *  懶漢加載\n         *  初始化,只讓一個專案只有一次產生此class\n         */\n        static setInstance(configManager: IF.IConfigManager): void;\n        /**\n         *  獲取已經初始化的靜態實例class\n         */\n        static get instance(): IF.IAudioManager;\n        /**\n         * 額外對該音樂做設定,可以不做設定,將會依照默認設定自動設定\n         * ```\n         *      預設參數:\n         *          volume : 默認為 Config 內的音量參數\n         *          loop : 默認 false\n         * ```\n         * @param {string} name - 音樂名稱\n         * @param {number} volume - 音量 0~1\n         * @param {boolean} loop - 是否重複撥放\n         * @return {this}\n         */\n        settingMusic(name: string, volume?: number, loop?: boolean): this;\n        /**\n         * 額外對該音效做設定,你可以不做設定,將會依照默認設定自動設定\n         * ```\n         *      預設參數:\n         *          canSuperimpose : fcc.type.AudioStateType.NOT_PLAYING\n         *          volume : 默認為 Config 內的音量參數\n         *          loop :默認為 false\n         * ```\n         * @param {string} name : 音效檔名\n         * @param {AudioStateType} canSuperimpose : 能否疊加\n         * @param {number} volume : 音量 0~1\n         * @param {boolean} loop : 是否重複撥放\n         * @return {this}\n         */\n        settingEffect(name: string, canSuperimpose?: type.AudioStateType, volume?: number, loop?: boolean): this;\n        /**\n         * 撥放音樂,將會依照當初設定的參數進行播放\n         * 若無發現可用參數設定,依照默認參數撥放\n         * @param {string} name - 音樂檔名\n         */\n        musicPlay(name: string): void;\n        /**\n         * 撥放音效,將會依照當初設定的參數進行播放\n         * 若無發現可用參數設定,依照默認參數撥放\n         * @param {string} name - 音效檔名\n         */\n        effectPlay(name: string): void;\n        /**\n         * 停止音樂\n         */\n        musicStop(): void;\n        /**\n         * 暫停音樂\n         */\n        musicPause(): void;\n        /**\n         * 停止音效\n         * @param {string} name - 音效檔名\n         */\n        effectStop(name: string): void;\n        /**\n         * 停止所有音效\n         */\n        effectStopAll(): void;\n        /**\n         * 獲取撥放的狀態\n         * ```\n         *      return data:\n         *          volume : number\n         *          loop : boolean\n         * ```\n         * @param {string} name - 音效檔名\n         * @return {Map<string, string | boolean | number>} - 撥放設定參數\n         */\n        getMusicState(name: string): Map<string, string | boolean | number>;\n        /**\n         * 獲取撥放的狀態\n         * ```\n         *      return data:\n         *          volume : number\n         *          canSuperimpose : fcc.type.AudioStateType\n         *          loop : boolean\n         * ```\n         * @param {string} name - 音樂檔名\n         * @return {Map<string, string | fcc.type.AudioStateType |boolean | number>} -\n         */\n        getEffectState(name: string): Map<string, string | type.AudioStateType | boolean | number>;\n        /**\n         * 更新當前是否靜音模式\n         * @return {boolean} 當前是否靜音\n         */\n        updateEffectOnMute(): boolean;\n        /**\n         * 更新當前是否靜音模式\n         * @return {boolean} 當前是否靜音\n         */\n        updateMusicOnMute(): boolean;\n        /**\n         * 當前是否靜音背景音樂\n         * @returns {boolean}\n         */\n        get effectOnMute(): boolean;\n        /**\n         * 當前是否靜音效果音效\n         * @returns {boolean}\n         */\n        get musicOnMute(): boolean;\n    }\n    /**\n     * 裝飾器\n     * 撥放背景音樂\n     * @param name {string} : 音樂檔名\n     * @returns {(target: any, key: string, descriptor: PropertyDescriptor) => void}\n     * @constructor\n     */\n    function Music(name: any): (target: any, key: string, descriptor: PropertyDescriptor) => void;\n    /**\n     * 裝飾器\n     * 停止背景音樂\n     * @returns {(target: any, key: string, descriptor: PropertyDescriptor) => void}\n     * @constructor\n     */\n    function MusicStop(): (target: any, key: string, descriptor: PropertyDescriptor) => void;\n    /**\n     * 裝飾器\n     * 撥放效果音效\n     * @param name[] {string} : 音樂檔名\n     * @returns {(target: any, key: string, descriptor: PropertyDescriptor) => void}\n     * @constructor\n     */\n    function Effect(...name: string[]): (target: any, key: string, descriptor: PropertyDescriptor) => void;\n    /**\n     * 裝飾器\n     * 暫停效果音效\n     * @param name[] {string} : 音樂檔名\n     * @returns {(target: any, key: string, descriptor: PropertyDescriptor) => void}\n     * @constructor\n     */\n    function EffectStop(...name: string[]): (target: any, key: string, descriptor: PropertyDescriptor) => void;\n}\ndeclare namespace fcc {\n    /**\n     * @Author 蕭立品\n     * @Description 語系管理器 : 保存當前語言本,語系樣式\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class LanguageManager implements IF.ILanguageManager {\n        /**\n         * 當前語言文字緩存\n         * @type {{[p: string]: string}}\n         */\n        private languageCache;\n        /**\n         * 當前語系\n         * @type {string}\n         */\n        private _nowLang;\n        /**\n         * 當前綁定的組件\n         * @type {Map<cc.Label, string>}\n         */\n        private readonly _nowLanguageLabels;\n        /**\n         * 所有更新完後的label 都會保存至這,需要再次更換語系時使用\n         * @type {Array<Map<cc.Label, string>>}\n         * @private\n         */\n        private readonly allLanguageLabel;\n        /**\n         * 當前所有語系樣式列表\n         * @type {object}\n         */\n        private readonly _style;\n        private configManager;\n        private static _instance;\n        constructor(configManager: IF.IConfigManager);\n        /**\n         *  懶漢加載\n         *  初始化,只讓一個專案只有一次產生此class\n         */\n        static setInstance(configManager: IF.IConfigManager): void;\n        /**\n         *  獲取已經初始化的靜態實例class\n         */\n        static get instance(): IF.ILanguageManager;\n        /**\n         * 添加默認樣式\n         * @private\n         */\n        private initDefaultStyle;\n        /**\n         * 額外添加新的語系樣式\n         * @param {string | fcc.type.LanguageType} key - 國家簡寫\n         * @param {fcc.IF.ILanguageStyle} style - 新樣式\n         */\n        addStyle(key: string | type.LanguageType, style: IF.ILanguageStyle): void;\n        /**\n         * 更新語系,會更新當前所有已經綁定的 cc.Label\n         * @param {string | fcc.type.LanguageType} language - 要更新的語系\n         */\n        updateLanguage(language: string | type.LanguageType): void;\n        /**\n         * 添加當前語系\n         */\n        setLanguage(): void;\n        /**\n         * 獲取當前語系\n         * @return {string}\n         */\n        getLanguage(): string;\n        /**\n         * 獲取當前語系數據,返回該key對應的文字\n         * @param {string | undefined} key - 拿取當前緩存語系文本的某一段文字 |(空參數)獲取當前語系數據,返回所有數據\n         * @return {string} - 返回該段文字,如果找不到鍵值,默認返回 key\n         */\n        getText(key: string): string;\n        /**\n         * 獲取當前語系緩存\n         * @return {object}\n         */\n        getAllText(): object;\n        /**\n         * 重新獲取語系,並更新緩衝內\n         * @param {string | fcc.type.LanguageType} language - 有參數為強制更新該參數語系,無參為當前拿取當前語系更新緩衝\n         */\n        reTakeLanguageBuffer(language?: string | type.LanguageType): void;\n        /**\n         * TODO 清除無用的語系緩存\n         */\n        removeStringBuffer(): void;\n        /**\n         * 更新文字該label文字\n         * @param {cc.Label} target - 要更新的目標\n         * @param {string?} textKey - 要更新的文字 key\n         * @return {this}\n         */\n        updateText(target: cc.Label, textKey?: string): this;\n        /**\n         * 更新所有透過 updateText更新的組件,更新該組件樣是\n         * 注意 : 須配合 updateText 一起使用\n         * @param {boolean} save - 是否要保存 label組件,可配合updateLanguage()方法將已經綁定的label全部再次更換語系文字\n         */\n        updateStyle(save: boolean): void;\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 綁定自己需要的所有推撥者\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class NotificationManager<T extends IF.IBaseNotification> implements IF.INotificationManager<T> {\n        /**\n         * 保存使用中的推撥者\n         * @type {Map<string, IBaseNotification>}\n         * @protected\n         */\n        protected readonly notificationToMap: Map<string, T>;\n        /**\n         * 懶漢加載\n         * @type {NotificationManager<any>}\n         * @private\n         */\n        private static _instance;\n        private constructor();\n        /**\n         * 懶漢加載\n         * @return {INotificationHandler<T>}\n         */\n        static instance<T extends IF.IBaseNotification>(): IF.INotificationManager<T>;\n        /**\n         * 添加推撥者\n         * @param {T} notification - 推撥者\n         * @return {this}\n         */\n        setNotification(notification: T): this;\n        /**\n         * 獲取以綁定的推播者\n         * @param {string} type - 事件名稱\n         * @return\n         */\n        getNotification(type: string): T;\n        /**\n         * 查看該事件是否已經加入管理器中\n         * @param {string} type - 事件名稱\n         * @return {boolean}\n         */\n        hasNotification(type: string): boolean;\n        /**\n         * 拿取所有以綁定的推播\n         * @return {Map<String, T>}\n         */\n        getAllNotifications(): Map<String, T>;\n    }\n}\ndeclare const FCC_VERSION = 0.04;\ndeclare namespace fcc {\n    /**\n     * 遊戲初始設定,並透過builder加載所有Manager\n     * @return {fcc.IF.IConfigManager}\n     * @private\n     */\n    let configMgr: IF.ISlotConfigManager;\n    /**\n     * TODO : 動畫管理器\n     * @return {fcc.IF.IAnimationManager}\n     * @private\n     */\n    let animationMgr: IF.IAnimationManager;\n    /**\n     * 音樂管理器,初始設定各音樂狀態,保存當前撥放音量\n     * @return {fcc.IF.IAudioManager}\n     * @private\n     */\n    let audioMgr: IF.IAudioManager;\n    /**\n     * 框架錯誤管理\n     * @return {fcc.IF.IErrorManager}\n     * @private\n     */\n    let errorMgr: IF.IErrorManager;\n    /**\n     * 語系管理器 : 保存當前語言本,語系樣式\n     * @return {fcc.IF.ILanguageManager}\n     * @private\n     */\n    let languageMgr: IF.ILanguageManager;\n    /**\n     * 事件管理器,當前綁定的事件,事件數量\n     * @return {fcc.IF.IEventManager}\n     * @private\n     */\n    let eventMgr: IF.IEventManager;\n    /**\n     * 資源管理者 : 加載資源,保存資源,獲取當前加載進度\n     * @return {fcc.IF.ILoadResManager}\n     * @constructor\n     * @private\n     */\n    let loadMgr: IF.ILoadResManager;\n    /**\n     * 網路管理 : 傳送封包,接收封包\n     * @return {fcc.IF.ILoadResManager}\n     * @private\n     */\n    function networkMgr(): null;\n    /**\n     * 遊戲流程管理器 : 管理當前流程,執行當前流程\n     * @return {fcc.IF.IProcessManager}\n     * @private\n     */\n    let processMgr: IF.IProcessManager;\n    /**\n     * 場景管理器 : 自動匹配遊戲寬高,監聽當前玩家遊玩模式(橫式or直式)\n     * @return {fcc.IF.ISceneManager}\n     * @private\n     */\n    let sceneMgr: IF.ISceneManager;\n    /**\n     * 老虎機管理器 : 管理老虎機樣式,執行速度,效果\n     */\n    let slotStyleMgr: IF.ISlotStyleManager;\n    /**\n     * 推撥者綁定與拿取\n     * @return {fcc.IF.INotificationManager<T>}\n     */\n    function notificationMgr<T extends IF.IBaseNotification>(): IF.INotificationManager<T>;\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description (介面) 動畫類處理\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface IAnimationHandler {\n            /**\n             * 更新動畫管理器內的spine數據\n             * @param resName\n             * @param keyName\n             * @param spineName\n             */\n            updateSpineAnimationName(resName: string, keyName: string, spineName: string): any;\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description (介面) 動畫類管理器\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface IAnimationManager {\n            handler: IAnimationHandler;\n            spineName: Map<string, Map<string, string>>;\n            getSpineName(resName: string, key: string): string;\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace global {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description 共用:按鈕類方法\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        class Button {\n            /**\n             * 對該button添加監聽事件\n             * @param {cc.Button} buttonNode - 按鈕組件\n             * @param {string} methodName - 該按鈕綁定的方法名稱\n             * @param self - 該方法存在的位置\n             * @param customEventData - 回傳值\n             */\n            static addButtonEvent(buttonNode: cc.Button, methodName: string, self: any, customEventData?: any): void;\n            /**\n             * 禁用button\n             * @param {cc.Button} button - 按鈕組件\n             */\n            static disableButton(button: cc.Button): void;\n            /**\n             * 啟用button\n             * @param {cc.Button}button - 按鈕組件\n             */\n            static enableButton(button: cc.Button): void;\n            /**\n             * 對該node 添加 TOUCH_START 事件\n             * @param {cc.Node} node - 要綁定的事件物件\n             * @param {function} method - 觸發事件的方法\n             * @param {this} self - 該方法存在的位置\n             * @param {boolean} useCapture : \"是否關閉多點觸控功能\"\n             */\n            static addTouchStartEvent(node: cc.Node, method: Function, self: any, useCapture?: boolean): void;\n            /**\n             * 對該node 關閉 TOUCH_START 事件\n             * @param {cc.Node} node - 要綁定的事件物件\n             * @param {Function} method - 觸發事件的方法\n             * @param {this} self - 該方法存在的位置\n             * @param {boolean} useCapture - 是否關閉多點觸控功能\n             */\n            static offTouchStartEvent(node: cc.Node, method: Function, self: any, useCapture?: boolean): void;\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace global {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description 共用:Prefab方法\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        class Prefab {\n            /**\n             * 尋訪該node底下一層節點內所有物件\n             * @param {cc.Node} node - 父節點\n             * @return {Map<string, cc.Node>} - Map(key: 該子類node URL, value:該子類node物件)\n             */\n            static getNodeOneChildren(node: cc.Node): Map<string, cc.Node>;\n            /**\n             * 尋訪該node底下兩層子節點\n             * @param {node : 物件} node - 父節點\n             * @return {Map<string, cc.Node>} - Map(key: 該子類node URL, value:該子類node物件)\n             */\n            static getNodeTowChildren(node: cc.Node): Map<string, cc.Node>;\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author 蕭立品\n         * @Description (介面) 語言樣是樣式表\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface ILanguageStyle {\n            fontSize: number;\n            lineHeight: number;\n            textScale: {\n                default: number;\n                title: number;\n                text: number;\n            };\n            fontFamily: string;\n        }\n        /**\n         * @Author 蕭立品\n         * @Description (介面)語系管理\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface ILanguageManager {\n            /**\n             * 額外添加新的語系樣式\n             * @param {string | fcc.type.LanguageType} key - 國家簡寫\n             * @param {fcc.IF.ILanguageStyle} style - 新樣式\n             */\n            addStyle(key: string | type.LanguageType, style: IF.ILanguageStyle): void;\n            /**\n             * 更新語系,會更新當前所有已經綁定的 cc.Label\n             * @param {string | fcc.type.LanguageType} language - 要更新的語系\n             */\n            updateLanguage(language: string | type.LanguageType): void;\n            /**\n             * 重新獲取語系,並更新緩衝內\n             * @param {string | fcc.type.LanguageType} language - 有參數為強制更新該參數語系,無參為當前拿取當前語系更新緩衝\n             */\n            reTakeLanguageBuffer(language?: string | type.LanguageType): any;\n            /**\n             * 更新文字該label文字\n             * @param {cc.Label} target - 要更新的目標\n             * @param {string?} textKey - 要更新的文字 key\n             * @return {this}\n             */\n            updateText(target: cc.Label, textKey?: string): this;\n            /**\n             * 更新所有透過 updateText更新的組件,更新該組件樣是\n             * 注意 : 須配合 updateText 一起使用\n             * @param {boolean} save - 是否要保存 label組件,可配合updateLanguage()方法將已經綁定的label全部再次更換語系文字\n             */\n            updateStyle(save: boolean): void;\n            /**\n             * 清除無用的語系緩存\n             */\n            removeStringBuffer(language?: string | type.LanguageType): void;\n            /**\n             * 添加當前語系\n             */\n            setLanguage(): void;\n            /**\n             * 獲取當前語系數據,返回該key對應的文字\n             * @param {string | undefined} key - 拿取當前緩存語系文本的某一段文字\n             * @return {string} - 返回該段文字,如果找不到鍵值,默認返回 key\n             */\n            getText(key: string): string;\n            /**\n             * 獲取當前語系緩存\n             * @return {object}\n             */\n            getAllText(): object;\n            /**\n             * 獲取當前語系\n             * @return {string}\n             */\n            getLanguage(): string;\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace ABS {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description 推撥持有者,可綁定於該推播者底下,當有事件推播時,將會推播給該class\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        abstract class ABaseObserver implements IF.IBaseObserver {\n            /**\n             * 是否常駐推撥\n             * @type {boolean}\n             * @private\n             */\n            private _isPermanent;\n            /**\n             * 推撥事件指向的 this\n             * @type {any}\n             * @private\n             */\n            private readonly _self;\n            /**\n             * 返回方法\n             * @type {(...any) => void} - 正確參數數量由子類實現\n             * @private\n             */\n            private readonly _callFun;\n            protected constructor(callFun: (...any: any[]) => void, self: any);\n            /**\n             * 推播事件\n             * @param any - 正確參數數量由子類實現\n             */\n            pushNotification(...any: any[]): void;\n            /**\n             * 是否常駐推撥\n             * @return {boolean}\n             */\n            get isPermanent(): boolean;\n            /**\n             * 是否常駐推撥\n             * @param {boolean} value\n             */\n            set isPermanent(value: boolean);\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description (介面)通知事件管理器\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface IBaseNotification {\n            /**\n             * NotificationHandler 用來獲取這個class的標籤\n             */\n            readonly TAG_NAME: string;\n            /**\n             * 訂閱該事件\n             * @param {IBaseObserver} observer - 關注者\n             * @param {boolean} isPermanent - 是否常駐\n             */\n            subscribe(observer: IBaseObserver, isPermanent: boolean): void;\n            /**\n             * 移除訂閱\n             * @param {IBaseObserver} observer - 關注者\n             */\n            unsubscribe(observer: IBaseObserver): void;\n            /**\n             * 清除所有訂閱\n             */\n            removeAll(): void;\n            /**\n             * 發送通知\n             * @param any - 發送參數\n             */\n            notify(...any: any[]): void;\n            /**\n             * 獲取該事件所有訂閱數量\n             */\n            getSubscribeCount(): number;\n            /**\n             * 獲取該事件所有訂閱者\n             */\n            getAllSubscribe(): Set<any>;\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description (介面)綁定自己需要的所有推撥者\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface INotificationManager<T extends IBaseNotification> {\n            /**\n             * 添加推撥者\n             * @param {T} notification - 推撥者\n             * @return {this}\n             */\n            setNotification(notification: T): this;\n            /**\n             * 獲取以綁定的推播者\n             * @param {string} type - 事件名稱\n             * @return\n             */\n            getNotification(type: string): T;\n            /**\n             * 查看該事件是否已經加入管理器中\n             * @param {string} type - 事件名稱\n             * @return {boolean}\n             */\n            hasNotification(type: string): boolean;\n            /**\n             * 查看當前所有以綁定的通知\n             */\n            getAllNotifications(): Map<String, T>;\n        }\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author 蕭立品\n     * @Description TODO\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class SmartFoxLink {\n    }\n}\ndeclare namespace fcc {\n    namespace type {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description 遊戲當下狀態\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        enum GameStateType {\n            /**\n             * 無狀態,待機狀態...\n             * @type {GameStateType.STANDBY}\n             */\n            STANDBY = \"STANDBY\",\n            /**\n             * 一般狀態遊戲中....\n             * @type {GameStateType.PLAYING}\n             */\n            PLAYING = \"PLAYING\",\n            /**\n             * 免費遊戲中....\n             * @type {GameStateType.FREEING}\n             */\n            FREEING = \"FREEING\"\n        }\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description 框架預設的流程\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        enum ProcessType {\n            FREE = \"FREE\",\n            NORMAL = \"NORMAL\"\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description (介面)遊戲管理器,管理當前流程,遊戲當前狀態\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface IProcessManager {\n            /**\n             * 當前遊戲狀態\n             * @type {fcc.type.GameStateType}\n             * @default - type.GameStateType.STANDBY\n             * @private\n             */\n            gameState: type.GameStateType;\n            /**\n             * 設定流程\n             * @param {fcc.type.ProcessType | string} processName - 可使用預設 ProcessType 或自訂義流程名稱\n             * @param {fcc.IF.IProcess} process - 流程\n             * @return {this}\n             */\n            setProcess(processName: type.ProcessType | string, process: IProcess): this;\n            /**\n             * 初始流程,執行綁定的流程內的onCreate方法\n             * @param {string | fcc.type.ProcessType} processName - 指定只要初始哪個流程 class,如果使用無參方法,將會初始化所有綁定的流程\n             */\n            initProcess(processName?: string | fcc.type.ProcessType): void;\n            /**\n             * 設定初始要執行的流程\n             * @param processName - 流程名稱\n             */\n            setDefaultProcess(processName: string | type.ProcessType): void;\n            /**\n             * 更換流程\n             * @param {fcc.type.ProcessType | string} processName - 原本設定的流程名稱\n             */\n            changeProcess(processName: type.ProcessType | string): void;\n            /**\n             * 執行設定好的流程\n             */\n            play(): Promise<void>;\n            /**\n             * 清除堵塞狀態\n             * 注意:清除該狀態後,該次的流程即使尚未執行完,也能執行下次流程\n             */\n            remake(): void;\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description (介面)更新,獲取,加入,變更,使用等..流程工廠\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface IGameProcessFactory {\n            /**\n             * 當前流程\n             */\n            process: IProcess;\n            /**\n             * 初始流程,執行綁定的流程內的onCreate方法\n             * @param {string | fcc.type.ProcessType} processName - 指定只要初始哪個流程 class,如果使用無參方法,將會初始化所有綁定的流程\n             */\n            initProcess(processName?: string | type.ProcessType): void;\n            /**\n             * 添加流程\n             * @param {string | GameType} processName - 可使用預設 ProcessType 或自訂義流程名稱\n             * @param {IProcess} process - 流程 class\n             */\n            setProcess(processName: string | type.ProcessType, process: IProcess): any;\n            /**\n             * 獲取該流程\n             * @param {string | GameType} processName - 可使用預設 ProcessType 或自訂義流程名稱\n             * @returns {IProcess}\n             */\n            getProcess(processName: string | type.ProcessType): IProcess;\n            /**\n             * 拿取全部已經綁定的流程\n             * @return {Map<string, fcc.IF.IProcess>}\n             */\n            getAllProcess(): Map<string, IF.IProcess>;\n            /**\n             * 改變流程\n             * @param {string | GameType} processName - 可使用預設 ProcessType 或自訂義流程名稱\n             */\n            changeProcess(processName: string | type.ProcessType): any;\n            /**\n             * 執行流程\n             * @returns {Promise<void>}\n             */\n            useProcess(): Promise<void>;\n        }\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 流程工廠 : 更新,獲取,加入,變更等.. 注意:此 class 由 manager 實例化,如果無特殊需求,請勿使用\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class GameProcessFactory implements IF.IGameProcessFactory {\n        private gameManager;\n        private readonly processToMap;\n        process: IF.IProcess;\n        constructor(gameManager: IF.IProcessManager);\n        /**\n         * 初始流程,執行綁定的流程內的onCreate方法\n         * @param {string | fcc.type.ProcessType} processName - 指定只要初始哪個流程 class,如果使用無參方法,將會初始化所有綁定的流程\n         */\n        initProcess(processName?: string | fcc.type.ProcessType): void;\n        /**\n         * 添加流程\n         * @param {string | GameType} processName - 可使用預設 ProcessType 或自訂義流程名稱\n         * @param {IProcess} process - 流程 class\n         */\n        setProcess(processName: string | type.ProcessType, process: IF.IProcess): void;\n        /**\n         * 獲取該流程\n         * @param {string | GameType} processName - 可使用預設 ProcessType 或自訂義流程名稱\n         * @returns {IProcess}\n         */\n        getProcess(processName: string | type.ProcessType): IF.IProcess;\n        /**\n         * 拿取全部已經綁定的流程\n         * @return {Map<string, fcc.IF.IProcess>}\n         */\n        getAllProcess(): Map<string, IF.IProcess>;\n        /**\n         * 改變流程\n         * @param {string | GameType} processName - 可使用預設 ProcessType 或自訂義流程名稱\n         */\n        changeProcess(processName: string | type.ProcessType): void;\n        /**\n         * 執行流程\n         * @returns {Promise<void>}\n         */\n        useProcess(): Promise<void>;\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description (介面)執行老虎機主要方法\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface ISlot {\n            /**\n             * 初始化該輪所有狀態\n             */\n            initializeState(): void;\n            /**\n             * Loop 老虎機方法\n             * @return {Promise<void>}\n             */\n            runSlotAnimation(): Promise<void>;\n            /**\n             * 啟動老虎機時過場動畫方法\n             * @return {Promise<void>}\n             */\n            sineInSlot(): Promise<void>;\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description (介面)音樂控制器,由音樂工廠做相對應呼叫對應的控制器\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface IAudioType {\n            /**\n             * 撥放音樂\n             * @param {string} name : 資源名稱\n             * @param {Map<string, any>} data : 該音樂撥放數據\n             */\n            play(name: string, data: Map<string, any>): void;\n            /**\n             * 停止該音樂\n             * @param {string} name\n             */\n            stop(name?: string): void;\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description (介面)一般遊戲初期設定\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface IConfigManager {\n            /**\n             * 載入外部資源URL\n             * @type {string}\n             * @default \"\"\n             * @private\n             */\n            readonly externallyLoadURL: string;\n            /**\n             * 當前遊戲名稱\n             * @type {string}\n             * @default null\n             * @private\n             */\n            readonly gameNumber: string;\n            /**\n             * 初始背景音樂音量(該音量將會成為AudioManager內預設音量)\n             * @type {number}\n             * @default 1\n             * @private\n             */\n            readonly musicVolume: number;\n            /**\n             * 初始將背景音樂靜音\n             * @type {boolean}\n             * @default false\n             * @private\n             */\n            readonly isMusicOnMute: boolean;\n            /**\n             * 初始效果音量(該音量將會成為AudioManager內預設音量)\n             * @type {number}\n             * @default 1\n             * @private\n             */\n            readonly effectVolume: number;\n            /**\n             * 初始將效果音效靜音\n             * @type {boolean}\n             * @default false\n             * @private\n             */\n            readonly isEffectOnMute: boolean;\n            /**\n             * 初始當前語系\n             * @type {LanguageType}\n             * @default LanguageType.CHINESE\n             * @private\n             */\n            readonly language: string | type.LanguageType;\n            /**\n             * 返回首頁URL\n             * @default null\n             */\n            readonly backHomeURL: string;\n            /**\n             * 是否要開啟Framework Debug模式\n             * 注意:遊戲正式上線須關閉\n             * @type {boolean}\n             * @default true\n             * @private\n             */\n            readonly isFrameworkDebug: boolean;\n            /**\n             * cocos 框架 debug設定\n             * @default - cc.debug.DebugMode.INFO\n             */\n            readonly cocosDebugSetting: cc.debug.DebugMode;\n            /**\n             * 添加遊戲名稱\n             * @param {string} name - 遊戲名稱\n             * @default null\n             * @returns {this}\n             */\n            setGameNumber(name: string): this;\n            /**\n             * 設置初始預設音量\n             * @param {number} number - 音量 0~1\n             * @default 1\n             * @returns {this}\n             */\n            setMusicVolume(number: number): this;\n            /**\n             * 設置初始預設效果音量\n             * @param {number} number - 音量 0~1\n             * @default 1\n             * @returns {this}\n             */\n            setEffectVolume(number: number): this;\n            /**\n             * 初始要從外部拿取資源的URL\n             * @param {string} url : 獲取外部資源的URL\n             * @default \"\"\n             * @returns {this}\n             */\n            setExternallyLoadURL(url: string): this;\n            /**\n             * 初始語系\n             * @param {LanguageType} languageType - 語系\n             * @default LanguageType.CHINESE\n             * @returns {this}\n             */\n            setLanguage(languageType: string | type.LanguageType): this;\n            /**\n             * 初始將背景音樂靜音\n             * @param {boolean} OnMute - 是否靜音\n             * @default false\n             * @returns {this}\n             */\n            setMusicOnMute(OnMute: boolean): this;\n            /**\n             * 初始是否將效果音效靜音\n             * @param {boolean} OnMute - 是否靜音\n             * @default false\n             * @returns {this}\n             */\n            setEffectOnMute(OnMute: boolean): this;\n            /**\n             * 是否要開啟Framework Debug模式\n             * 注意:遊戲正式上線須關閉\n             * @param {boolean} use\n             * @default true\n             * @returns {this}\n             */\n            setFrameWorkDebug(use: boolean): this;\n            /**\n             * cocos 框架 debug設定\n             * @param {cc.debug.DebugMode} type - debug 樣式\n             * @default - cc.debug.DebugMode.INFO\n             * @return {this}\n             */\n            setCocosDebug(type: cc.debug.DebugMode): this;\n            /**\n             * 返回首頁URL\n             * @param {string} url\n             * @default null\n             * @returns {this}\n             */\n            setBackHomeURL(url: string): this;\n            /**\n             * 實例化所有Manager class;\n             */\n            build(): void;\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author 蕭立品\n         * @Description TODO\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface IShowErrorDialog {\n            /**\n             * 顯示錯誤\n             * @param {boolean} permanentState - 是否持續顯示\n             * @param {string} message - 顯示錯誤訊息文字\n             * @param {string} buttonText - 按鈕文字\n             */\n            showError(permanentState: boolean, message: string, buttonText: string): any;\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace type {\n        /**\n         * 待刪除\n         */\n        enum GameEventType {\n            TEST = \"TEST\"\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace type {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description server 回傳事件 型\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        enum ServerEventType {\n            /**\n             *  一般獲獎回傳\n             */\n            BET_RESULT = \"BET_RESULT\",\n            /**\n             * 免費模式獲獎\n             */\n            FREE_SPIN_RESULT = \"FREE_SPIN_RESULT\",\n            /**\n             * 底層進遊戲 通知Loading頁面 可以顯示主遊戲場景\n             */\n            CAN_PLAY_GAME = \"CAN_PLAY_GAME\",\n            /**\n             * 獲取遊戲歷史結果\n             */\n            GET_GAME_HISTORY_RESULT = \"GET_GAME_HISTORY_RESULT\",\n            /**\n             * 獲取遊戲祥單\n             */\n            GET_HISTORY_DETAIL_RESULT = \"GET_HISTORY_DETAIL_RESULT\",\n            /**\n             * 該局遊戲序號\n             */\n            GROUP_ID = \"GROUP_ID\",\n            /**\n             * 進入遊戲後初始資訊\n             */\n            TABLE_INFO = \"TABLE_INFO\",\n            /**\n             * 各種錯誤訊息\n             */\n            WARNING = \"WARNING\"\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description 所有的通知推波實作接繼承這個介面\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface IBaseObserver {\n            isPermanent: boolean;\n            /**\n             * 推波通知\n             */\n            pushNotification(...any: any[]): void;\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        interface ILoadType {\n            /**\n             * 加載資源方法\n             */\n            loadResources(): void;\n        }\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 載入圖片資源\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class ImgAtlasLoad extends ABS.ALoadType {\n        constructor(dataName: string, type: any, url: string, folder: string);\n        /**\n         * 將資源保存在管理器中\n         * @param {string} dataName - 自訂義該資源名稱\n         * @param {cc.SpriteAtlas} asset - 資源\n         * @protected\n         */\n        setResToManager(dataName: string, asset: cc.SpriteAtlas): void;\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description (介面)所有執行容器接繼承於他\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface IExecutionContent {\n            /**\n             * 更換流程\n             */\n            onChangeStatus(): void;\n            /**\n             * 初始化流程\n             * @returns {Promise<void>}\n             */\n            onCreate(): any;\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description (介面)一般遊戲程序執行容器\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface IGameProcedureExecutionContent extends IExecutionContent {\n            /**\n             * 執行流程\n             * @returns {Promise<void>}\n             */\n            onExecution(): Promise<void>;\n            /**\n             * 流程結束時\n             * @returns {Promise<void>}\n             */\n            onEnd(): Promise<void>;\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description (介面)老虎機程式流程執行容器\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface ISlotProcedureExecutionContent extends IExecutionContent {\n            /**\n             * 自訂流程開始時判斷\n             * @returns {Promise<void>}\n             */\n            onCustomizeStart(): Promise<void>;\n            /**\n             * 老虎機開始前漸入執行\n             * @returns {Promise<void>}\n             */\n            onSineInGrid(): Promise<void>;\n            /**\n             * 老虎機轉動\n             * @returns {Promise<void>}\n             */\n            onRunning(): Promise<void>;\n            /**\n             * 顯示結果動畫\n             * @returns {Promise<void>}\n             */\n            onShowAnswer(): Promise<void>;\n            /**\n             * 自訂義結束\n             * @returns {Promise<void>}\n             */\n            onCustomizeEnd(): Promise<void>;\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description (介面)一般流程\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface IGameProcess extends IProcess {\n            /**\n             * 執行流程\n             * @returns {this}\n             */\n            onExecution(): this;\n            /**\n             * 流程結束時\n             * @returns {this}\n             */\n            onEnd(): this;\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description (介面)所有的流程父類\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface IProcess {\n            /**\n             * 儲存使用者綁定的流程方法\n             */\n            readonly process: Set<() => Promise<void> | void>;\n            /**\n             * 流程容器\n             */\n            readonly executionContent: IF.IExecutionContent;\n            /**\n             * 更換流程\n             */\n            onChangeStatus(): this;\n            /**\n             * 將所有綁定的流程方法依序執行\n             * @returns {Promise<void>}\n             */\n            start(): Promise<void>;\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description (介面)老虎機流程\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface ISlotGameProcess extends IProcess {\n            /**\n             * 初始化 : 自訂開始遊戲前的效果\n             * @example - 按鈕,背景…等\n             * @return {this}\n             */\n            onCustomizeStart(): this;\n            /**\n             * 老虎機運行前,漸入效果\n             * @return {this}\n             */\n            onSineInGrid(): this;\n            /**\n             * 遊戲持續執行動作\n             * @return {this}\n             */\n            onRunning(): this;\n            /**\n             * 自訂義停止後事件\n             * @example - 更換音樂,更換背景圖案,校正回歸流程狀態...等\n             * @return {this}\n             */\n            onCustomizeEnd(): this;\n            /**\n             * 顯示結果\n             * @returns {this}\n             */\n            onShowAnswer(): this;\n        }\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 任何遊戲皆可用流程\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class GameProcess implements IF.IGameProcess {\n        /**\n         * 保存使用者綁定的流程方法\n         * @type {Set<Function>}\n         * @private\n         */\n        private readonly _process;\n        /**\n         * 流程容器\n         * @type {IGameProcedureExecutionContainer}\n         * @private\n         */\n        private readonly _executionContent;\n        constructor(container: IF.IGameProcedureExecutionContent);\n        /**\n         * 執行流程\n         * @return {this}\n         */\n        onExecution(): this;\n        /**\n         * 流程結束時\n         * @return {this}\n         */\n        onEnd(): this;\n        /**\n         * 更換流程\n         * @return {this}\n         */\n        onChangeStatus(): this;\n        /**\n         * 將所有綁定的流程方法依序執行\n         * @return {Promise<void>}\n         */\n        start(): Promise<void>;\n        get process(): Set<() => (Promise<void> | void)>;\n        get executionContent(): fcc.IF.IGameProcedureExecutionContent;\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author XIAO-LI-PIN\n     * @Description 老虎機流程\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class SlotGameProcess implements IF.ISlotGameProcess {\n        /**\n         * 保存使用者綁定的流程方法\n         * @type {Set<Function>}\n         * @private\n         */\n        private readonly _process;\n        /**\n         * 流程容器\n         * @type {ISlotProcedureExecutionContainer}\n         * @private\n         */\n        private readonly _executionContainer;\n        constructor(container: IF.ISlotProcedureExecutionContent);\n        /**\n         * 初始化 : 自訂開始遊戲前的效果\n         * @example - 按鈕,背景…等\n         * @return {this}\n         */\n        onCustomizeStart(): this;\n        /**\n         * 老虎機運行前,漸入效果\n         * @return {this}\n         */\n        onSineInGrid(): this;\n        /**\n         * 遊戲持續執行動作\n         * @return {this}\n         */\n        onRunning(): this;\n        /**\n         * 自訂義停止後事件\n         * @example - 更換音樂,更換背景圖案,校正回歸流程狀態...等\n         * @return {this}\n         */\n        onCustomizeEnd(): this;\n        /**\n         * 顯示結果\n         * @return {this}\n         */\n        onShowAnswer(): this;\n        /**\n         * 更換流程\n         * @example - fcc.processManager.changeProcess(GameType.NORMAL);\n         * @return {this}\n         */\n        onChangeStatus(): this;\n        /**\n         * 開始執行\n         * @return {Promise<void>}\n         */\n        start(): Promise<void>;\n        get executionContent(): fcc.IF.ISlotProcedureExecutionContent;\n        get process(): Set<() => (Promise<void> | void)>;\n    }\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description (介面) 對應該樣式,更新當前場景\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface ISceneStyle {\n            executionStyle(width: number, height: number): void;\n        }\n    }\n}\ndeclare namespace fcc {\n    namespace ABS {\n        /**\n         * @Author 蕭立品\n         * @Description TODO\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        abstract class ASlotSetting implements IF.ISlotSetting {\n            private _tag;\n            private _columnIntervalTime;\n            private _gridNodeToMap;\n            private _slotColumnToTween;\n            private _slotGirdSpeed;\n            private _slotGridHeight;\n            private _slotRowGridCount;\n            private _slotTurnCount;\n            private _speedUpMultiple;\n            private _lookAtCount;\n            sineInEasing: string;\n            sineOutEasing: string;\n            private _resultModule;\n            private readonly _slotStyleManager;\n            constructor(slotStyleManager: IF.ISlotStyleManager);\n            /**\n             * 瞇排轉動次數\n             * @param {number} count\n             * @return {this}\n             */\n            setLookAtCount(count: number): this;\n            /**\n             * 該樣式標籤\n             * @param {string} tag\n             * @return {this}\n             */\n            setTag(tag: string): this;\n            /**\n             * 老虎機顯示答案前的最少轉動次數\n             * @param {number} count\n             * @return {this}\n             */\n            setSlotTurnCount(count: number): this;\n            /**\n             * 老虎機每隔格子高度\n             * @param {number} height\n             * @return {this}\n             */\n            setSlotGridHeight(height: number): this;\n            /**\n             * 遊戲每格格子間的速度\n             * @param {number} time\n             * @return {this}\n             */\n            setSlotGirdSpeed(time: number): this;\n            /**\n             * 加速時的加速被率\n             * @param {number} multiple\n             * @return {this}\n             */\n            setSpeedUpMultiple(multiple: number): this;\n            /**\n             * 該老虎機 每列的格子數量\n             * @param {number} gridCount\n             * @return {this}\n             */\n            setSlotRowGridCount(gridCount: number): this;\n            /**\n             * 非加速模式,每列停止的時間間格\n             * @param {number} time\n             * @return {this}\n             */\n            setColumnIntervalTime(time: number): this;\n            /**\n             * 要執行輪播動化轉動老虎機的node\n             * @param {Array<cc.Node>} node\n             * @return {this}\n             */\n            setSlotColumnToTween(node: Array<cc.Node>): this;\n            /**\n             * 所有格子,做循環老虎機時,需更動該Node的位置\n             * @param {Map<number, Array<cc.Node>>} node\n             * @return {this}\n             */\n            setGridNodeToMap(node: Map<number, Array<cc.Node>>): this;\n            setSineInEasing(easing: string): this;\n            setSineOutEasing(easing: string): this;\n            /**\n             * 添加儲存SERVER答案的Model\n             */\n            setResultModel(resultModel: ISlotBaseResultModel | ISlotFreeBaseResultModel): this;\n            /**\n             * 設定結束\n             */\n            complete(): void;\n            get columnIntervalTime(): number;\n            get gridNodeToMap(): Map<number, Array<cc.Node>>;\n            get slotColumnToTween(): Array<cc.Node>;\n            get slotGirdSpeed(): number;\n            get slotGridHeight(): number;\n            get slotRowGridCount(): number;\n            get slotTurnCount(): number;\n            get speedUpMultiple(): number;\n            get slotStyleManager(): fcc.IF.ISlotStyleManager;\n            get tag(): string;\n            get resultModule(): ISlotBaseResultModel | ISlotFreeBaseResultModel;\n            get lookAtCount(): number;\n        }\n    }\n}\n/**\n * @Author XIAO-LI-PIN\n * @Description (介面)所有類型Slot免費狀態接收封包的父類\n * @Date 2021/9/11 下午6:07:05\n * @Version 0.0.5\n */\ninterface ISlotFreeBaseResultModel {\n    /**\n     * 0: 押注成功 1: 非免費時間押注\n     */\n    State: number;\n    /**\n     * 玩家現有金額(贏分後)\n     */\n    UserPointAfter: number;\n    /**\n     * 接下來遊戲狀態(0:一般 1:免費遊戲 2:小遊戲)\n     */\n    GameState: number;\n    /**\n     * 剩餘免費遊戲次數 (0:沒有 1~99次)\n     */\n    Count: number;\n    /**\n     * 免費遊戲累計贏分\n     */\n    FreeSpinWin: number;\n    /**\n     * 總贏得金額 (0:輸了 大於0:贏了 )\n     */\n    TotalWinPoint: number;\n    /**\n     * 15格的資料\n     */\n    Grid: Array<number>;\n    /**\n     * 瞇牌0:不用 1:瞇牌效果\n     */\n    LookAt: Array<number>;\n}\n/**\n * @Author XIAO-LI-PIN\n * @Description (介面)所有類型Slot一般狀態接收封包的父類\n * @Date 2021/9/11 下午6:07:05\n * @Version 0.0.5\n */\ninterface ISlotBaseResultModel {\n    /**\n     * 0: 押注成功 1:遊戲狀態不符 2:超過\n     */\n    State: number;\n    /**\n     * 總贏得金額 (0:輸了 大於0:贏了 )\n     */\n    TotalWinPoint: number;\n    /**\n     * 玩家現有金額(贏分後)\n     */\n    UserPointAfter: number;\n    /**\n     * 玩家現有金額(押注後)\n     */\n    UserPointBefore: number;\n    /**\n     * 15格的資料\n     */\n    Grid: Array<number>;\n    /**\n     * 瞇牌0:不用 1:瞇牌效果\n     */\n    LookAt: Array<number>;\n}\ndeclare namespace fcc {\n    namespace IF {\n        /**\n         * @Author XIAO-LI-PIN\n         * @Description (介面)參數設定\n         * @Date 2021/9/11 下午6:07:05\n         * @Version 0.0.5\n         */\n        interface ISlotSetting {\n            /**\n             * 該樣式標籤\n             */\n            tag: string;\n            /**\n             * 老虎機顯示答案前的最少轉動次數\n             * @param {number} count\n             * @return {this}\n             */\n            slotTurnCount: number;\n            /**\n             * 老虎機每格格子高度\n             * @param {number} height\n             * @return {this}\n             */\n            slotGridHeight: number;\n            /**\n             * 遊戲每格格子間的速度\n             * @param {number} time\n             * @return {this}\n             */\n            slotGirdSpeed: number;\n            /**\n             * 該老虎機 每列的格子數量\n             * @param {number} gridCount\n             * @return {this}\n             */\n            slotRowGridCount: number;\n            /**\n             * 加速時的加速倍率\n             * @param {number} multiple\n             * @return {this}\n             */\n            speedUpMultiple: number;\n            /**\n             * 要執行輪播動畫,轉動老虎機的所有列 cc.Node\n             * @param {Array<cc.Node>} node\n             * @return {this}\n             */\n            slotColumnToTween: Array<cc.Node>;\n            /**\n             * 非加速模式,每列停止的時間間格\n             * @param {number} time\n             * @return {this}\n             */\n            columnIntervalTime: number;\n            /**\n             * 所有格子,執行動畫的所有格子\n             * @param {Map<number, Array<cc.Node>>} node\n             * @return {this}\n             */\n            gridNodeToMap: Map<number, Array<cc.Node>>;\n            /**\n             * 瞇排轉動次數\n             */\n            lookAtCount: number;\n            /**\n             * 漸入時TWEEN動畫類型\n             */\n            sineInEasing: string;\n            /**\n             * 淡出時TWEEN 動畫類型\n             */\n            sineOutEasing: string;\n            /**\n             * 添加儲存SERVER答案的Model\n             */\n            resultModule: ISlotBaseResultModel | ISlotFreeBaseResultModel;\n            /**\n             * 該樣式標籤\n             * @param {string} tag\n             * @return {this}\n             */\n            setTag(tag: string): this;\n            /**\n             * 瞇排轉動次數\n             */\n            setLookAtCount(count: number): this;\n            /**\n             * 老虎機顯示答案前的最少轉動次數\n             * @param {number} count\n             * @return {this}\n             */\n            setSlotTurnCount(count: number): this;\n            /**\n             * 老虎機每格格子高度\n             * @param {number} height\n             * @return {this}\n             */\n            setSlotGridHeight(height: number): this;\n            /**\n             * 老虎機一般狀態速度\n             * @param {number} time\n             * @return {this}\n             */\n            setSlotGirdSpeed(time: number): this;\n            /**\n             * 該老虎機 每列的格子數量\n             * @param {number} gridCount\n             * @return {this}\n             */\n            setSlotRowGridCount(gridCount: number): this;\n            /**\n             * 加速時的加速倍率\n             * @param {number} multiple\n             * @return {this}\n             */\n            setSpeedUpMultiple(multiple: number): this;\n            /**\n             * 要執行輪播動畫,轉動老虎機的所有列 cc.Node\n             * @param {Array<cc.Node>} node\n             * @return {this}\n             */\n            setSlotColumnToTween(node: Array<cc.Node>): this;\n            /**\n             * 非加速模式,每列停止的時間間格\n             * @param {number} time\n             * @return {this}\n             */\n            setColumnIntervalTime(time: number): this;\n            /**\n             * 所有格子,執行動畫的所有格子\n             * @param {Map<number, Array<cc.Node>>} node\n             * @return {this}\n             */\n            setGridNodeToMap(node: Map<number, Array<cc.Node>>): this;\n            /**\n             * 漸入時TWEEN動畫類型\n             */\n            setSineInEasing(easing: string): this;\n            /**\n             * 淡出時TWEEN 動畫類型\n             */\n            setSineOutEasing(easing: string): this;\n            /**\n             * 添加儲存SERVER答案的Model\n             */\n            setResultModel(resultModel: ISlotBaseResultModel | ISlotFreeBaseResultModel): this;\n            /**\n             * 設定結束\n             */\n            complete(): any;\n        }\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author 蕭立品\n     * @Description 老虎機轉動時與顯示答案時的圖片一致\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class SlotImgSetting extends ABS.ASlotSetting {\n        /**\n         * 更換圖片的所有格子\n         * @param {Map<number, Array<cc.Sprite>>} sprite\n         * @return {this}\n         */\n        private _gridSpriteToMap;\n        /**\n         * slot 所有靜態格子圖片\n         * @param {Map<string, cc.SpriteFrame>} img\n         * @return {this}\n         */\n        private _gridImg;\n        /**\n         * slot 所有靜態格子圖片\n         * @param {Array<cc.SpriteFrame>} img\n         * @return {this}\n         */\n        setGridImg(img: Map<string, cc.SpriteFrame>): this;\n        /**\n         * 所有格子的圖片,做循環老虎雞時,需更動的圖片\n         * @param {Map<number, Array<cc.Sprite>>} sprite\n         * @return {this}\n         */\n        setGirdSpriteToMap(sprite: Map<number, Array<cc.Sprite>>): this;\n        get gridSpriteToMap(): Map<number, Array<cc.Sprite>>;\n        get gridImg(): Map<string, cc.SpriteFrame>;\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author 蕭立品\n     * @Description 老虎機轉動時使用模糊圖片\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class SlotBurredImgSetting extends SlotImgSetting {\n        /**\n         * slot 所有模糊圖片\n         * @type {Map<string, cc.SpriteFrame>}\n         * @private\n         */\n        private _gridBurredImg;\n        /**\n         * slot 所有模糊圖片\n         * @param {Array<cc.SpriteFrame>} img\n         * @return {this}\n         */\n        setGridBurredImg(img: Map<string, cc.SpriteFrame>): this;\n        get gridBurredImg(): Map<string, cc.SpriteFrame>;\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author 蕭立品\n     * @Description 老虎機轉動時與顯示答案時的圖片一致,且可對各列分別給予停軸時間\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class SlotImgSpecialSetting extends SlotImgSetting {\n        /**\n         * slot 停軸間格\n         * 依照你SLOT 列數 各列間的停軸間格\n         */\n        private _slotRowTime;\n        /**\n         * 各軸瞇排時間\n         * @type {number}\n         * @private\n         */\n        private _lookAtTime;\n        /**\n         * slot 各列停軸時間\n         * 依照你SLOT 列數 各列間的停軸間格\n         * @param {Array<number>} time - 各軸間格時間\n         * @return {this}\n         */\n        setSlotRowTime(time: number): this;\n        /**\n         * 瞇排時間\n         * @param {number} time\n         * @return {this}\n         */\n        setLookAtTime(time: number): this;\n        get slotRowTime(): number;\n        get lookAtTime(): number;\n    }\n}\ndeclare namespace fcc {\n    /**\n     * @Author 蕭立品\n     * @Description 老虎機轉動時使用模糊圖片,且可對各列分別給予停軸時間\n     * @Date 2021/9/11 下午6:07:05\n     * @Version 0.0.5\n     */\n    class SlotBurredImgSpecialSetting extends SlotImgSpecialSetting {\n        /**\n         * slot 所有模糊圖片\n         * @type {Map<string, cc.SpriteFrame>}\n         * @private\n         */\n        private _gridBurredImg;\n        /**\n         * slot 所有模糊圖片\n         * @param {Array<cc.SpriteFrame>} img\n         * @return {this}\n         */\n        setGridBurredImg(img: Map<string, cc.SpriteFrame>): this;\n        get gridBurredImg(): Map<string, cc.SpriteFrame>;\n    }\n}\n"
}