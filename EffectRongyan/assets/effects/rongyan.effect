CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        u_normalMap: { value: white }
        alphaThreshold: { value: 0.5 }
        time: { value: 0.5 }
}% 

CCProgram vs %{
  precision highp float;
  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE 
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;
    gl_Position = pos;
  }
}%

CCProgram fs %{
  precision highp float;  
  #include <alpha-test>
  #include <texture>
  #include <cc-global>

 // 接收来自上方顶点 Shader 片段的输出参数 v_color
  in vec4 v_color;

  uniform ARGS{
    float time;// 熔岩阀值[0, 1];
  };

  #if USE_TEXTURE
    in vec2 v_uv0;
    uniform sampler2D u_normalMap;// 熔岩形状的纹理;
    uniform sampler2D texture;//纹理像素在顶点着色器已经被存入显存里了。这里的texture 只是存一个索引。根据这个索引，找到具体的像素点
  #endif

  void main () {
    vec4 color = v_color;
    float value = texture2D(u_normalMap, v_uv0).r;// 如果颜色的r分量小于阀值，将这个着色操作丢弃;

    if (value < time) {
      discard;// discard将着色操作丢弃, 实现空洞
    }

    color *= texture2D(texture, v_uv0); // 从原纹理里面采样一个颜色，叠加;
    if (value < time + 0.05) {
      color = vec4(0.9, 0.6, 0.3, color.a);// 熔岩的边缘设置一个边缘过度颜色
    }
    gl_FragColor = color;
  }
}%