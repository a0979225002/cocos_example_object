{"version":3,"sources":["file:///D:/My_Game/%E5%88%A5%E4%BA%BA%E5%AF%AB%E7%9A%84%E5%8F%83%E8%80%83%E7%94%A8/MultiTexture/assets/Scripts/MultiTexture2d.ts"],"names":["_decorator","Sprite","gfx","ccclass","property","executeInEditMode","Attribute","attributes","Format","RGB32F","RG32F","RGBA32F","R32F","simple","createData","sprite","renderData","requestRenderData","dataLength","vertexCount","indicesCount","vData","Float32Array","updateRenderData","frame","spriteFrame","vertDirty","updateVertexData","uvDirty","updateUvs","textureIdxDirty","updateTextureIdx","updateWorldVerts","dataList","data","node","data0","data3","matrix","worldMatrix","a","m00","b","m01","c","m04","d","m05","justTranslate","tx","m12","ty","m13","vl","x","vr","vb","y","vt","vltx","vrtx","vbty","vtty","al","ar","bl","br","cb","ct","db","dt","cbtx","cttx","dbty","dtty","_uiProps","uiTransformDirty","fillBuffers","renderer","buffer","acquireBufferBatch","vertexOffset","byteOffset","indicesOffset","vertexId","bufferUnchanged","request","currBufferBatch","vBuf","iBuf","iData","set","index0","index1","index2","index3","uiTrans","uiTransformComp","cw","width","ch","height","appX","anchorX","appY","anchorY","l","r","t","trim","originSize","getOriginalSize","rect","getRect","ow","oh","rw","rh","offset","getOffset","scaleX","scaleY","trimLeft","trimRight","trimBottom","trimTop","uv","updateColor","colorOffset","color","colorR","colorG","g","colorB","colorA","opacity","i","textureIdx","MultiTexture2d","start","_texture","_textureHash","_flushAssembler","assembler","cc","log","_assembler","destroyRenderData","_renderData","material","getRenderMaterial","markForUpdateRenderData","_colorDirty","_updateColor"],"mappings":"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","sourcesContent":["import {_decorator, Sprite, gfx, IAssembler, Color, __private, UI} from 'cc';\r\n\r\nconst {ccclass, property, executeInEditMode} = _decorator;\r\n\r\nconst Attribute = gfx.Attribute;\r\n\r\nconst attributes: gfx.Attribute[] = [\r\n    new Attribute('a_position', gfx.Format.RGB32F),\r\n    new Attribute('a_texCoord', gfx.Format.RG32F),\r\n    new Attribute('a_color', gfx.Format.RGBA32F),\r\n    new Attribute('a_texture_idx', gfx.Format.R32F),\r\n];\r\n\r\ninterface IRenderData {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n    u: number;\r\n    v: number;\r\n    color: Color;\r\n}\r\n\r\nconst simple: IAssembler = {\r\n    createData(sprite: Sprite) {\r\n        const renderData = sprite.requestRenderData();\r\n        renderData.dataLength = 4;\r\n        renderData.vertexCount = 4;\r\n        renderData.indicesCount = 6;\r\n\r\n        renderData.vData = new Float32Array(4 * 10);\r\n\r\n        return renderData;\r\n    },\r\n\r\n    updateRenderData(sprite: MultiTexture2d) {\r\n        const frame = sprite.spriteFrame;\r\n\r\n        const renderData = sprite.renderData;\r\n        if (renderData && frame) {\r\n            if (renderData.vertDirty) {\r\n                this.updateVertexData(sprite);\r\n            }\r\n            if (renderData.uvDirty) {\r\n                this.updateUvs(sprite);\r\n            }\r\n            if (sprite.textureIdxDirty) {\r\n                this.updateTextureIdx(sprite);\r\n            }\r\n        }\r\n    },\r\n\r\n    updateWorldVerts(sprite: Sprite, vData: Float32Array) {\r\n        const renderData = sprite.renderData;\r\n\r\n        const dataList: IRenderData[] = renderData!.data;\r\n        const node = sprite.node;\r\n\r\n        const data0 = dataList[0];\r\n        const data3 = dataList[3];\r\n        const matrix = node.worldMatrix;\r\n        const a = matrix.m00;\r\n        const b = matrix.m01;\r\n        const c = matrix.m04;\r\n        const d = matrix.m05;\r\n\r\n        const justTranslate = a === 1 && b === 0 && c === 0 && d === 1;\r\n\r\n        const tx = matrix.m12;\r\n        const ty = matrix.m13;\r\n        const vl = data0.x;\r\n        const vr = data3.x;\r\n        const vb = data0.y;\r\n        const vt = data3.y;\r\n\r\n        if (justTranslate) {\r\n            const vltx = vl + tx;\r\n            const vrtx = vr + tx;\r\n            const vbty = vb + ty;\r\n            const vtty = vt + ty;\r\n\r\n            // left bottom\r\n            vData[0] = vltx;\r\n            vData[1] = vbty;\r\n            // right bottom\r\n            vData[10] = vrtx;\r\n            vData[11] = vbty;\r\n            // left top\r\n            vData[20] = vltx;\r\n            vData[21] = vtty;\r\n            // right top\r\n            vData[30] = vrtx;\r\n            vData[31] = vtty;\r\n        } else {\r\n            const al = a * vl;\r\n            const ar = a * vr;\r\n            const bl = b * vl;\r\n            const br = b * vr;\r\n            const cb = c * vb;\r\n            const ct = c * vt;\r\n            const db = d * vb;\r\n            const dt = d * vt;\r\n\r\n            const cbtx = cb + tx;\r\n            const cttx = ct + tx;\r\n            const dbty = db + ty;\r\n            const dtty = dt + ty;\r\n\r\n            // left bottom\r\n            vData[0] = al + cbtx;\r\n            vData[1] = bl + dbty;\r\n            // right bottom\r\n            vData[10] = ar + cbtx;\r\n            vData[11] = br + dbty;\r\n            // left top\r\n            vData[20] = al + cttx;\r\n            vData[21] = bl + dtty;\r\n            // right top\r\n            vData[30] = ar + cttx;\r\n            vData[31] = br + dtty;\r\n        }\r\n        node._uiProps.uiTransformDirty = false;\r\n    },\r\n\r\n    fillBuffers(sprite: Sprite, renderer: UI) {\r\n        if (sprite === null) {\r\n            return;\r\n        }\r\n\r\n        const vData = sprite.renderData!.vData!;\r\n        if (sprite.node._uiProps.uiTransformDirty) {\r\n            this.updateWorldVerts(sprite, vData);\r\n        }\r\n\r\n        // const buffer: MeshBuffer = renderer.createBuffer(\r\n        //     sprite.renderData!.vertexCount,\r\n        //     sprite.renderData!.indicesCount,\r\n        // );\r\n        // const commitBuffer: IUIRenderData = renderer.createUIRenderData();\r\n\r\n        let buffer = renderer.acquireBufferBatch(attributes)!;\r\n\r\n        let vertexOffset = buffer.byteOffset >> 2;\r\n        let indicesOffset = buffer.indicesOffset;\r\n        let vertexId = buffer.vertexOffset;\r\n\r\n        const bufferUnchanged = buffer.request();\r\n        if (!bufferUnchanged) {\r\n            buffer = renderer.currBufferBatch!;\r\n            vertexOffset = 0;\r\n            indicesOffset = 0;\r\n            vertexId = 0;\r\n        }\r\n\r\n        // buffer data may be reallocated, need get reference after request.\r\n        const vBuf = buffer.vData!;\r\n        const iBuf = buffer.iData!;\r\n\r\n        vBuf.set(vData, vertexOffset);\r\n\r\n        const index0 = vertexId;\r\n        const index1 = vertexId + 1;\r\n        const index2 = vertexId + 2;\r\n        const index3 = vertexId + 3;\r\n\r\n        // fill index data\r\n        iBuf[indicesOffset++] = index0;\r\n        iBuf[indicesOffset++] = index1;\r\n        iBuf[indicesOffset++] = index2;\r\n        iBuf[indicesOffset++] = index2;\r\n        iBuf[indicesOffset++] = index1;\r\n        iBuf[indicesOffset++] = index3;\r\n    },\r\n\r\n    updateVertexData(sprite: Sprite) {\r\n        const renderData: __private.cocos_2d_renderer_render_data_RenderData | null = sprite.renderData;\r\n        if (!renderData) {\r\n            return;\r\n        }\r\n\r\n        const uiTrans = sprite.node._uiProps.uiTransformComp!;\r\n        const dataList: IRenderData[] = renderData.data;\r\n        const cw = uiTrans.width;\r\n        const ch = uiTrans.height;\r\n        const appX = uiTrans.anchorX * cw;\r\n        const appY = uiTrans.anchorY * ch;\r\n        let l = 0;\r\n        let b = 0;\r\n        let r = 0;\r\n        let t = 0;\r\n        if (sprite.trim) {\r\n            l = -appX;\r\n            b = -appY;\r\n            r = cw - appX;\r\n            t = ch - appY;\r\n        } else {\r\n            const frame = sprite.spriteFrame!;\r\n            const originSize = frame.getOriginalSize();\r\n            const rect = frame.getRect();\r\n            const ow = originSize.width;\r\n            const oh = originSize.height;\r\n            const rw = rect.width;\r\n            const rh = rect.height;\r\n            const offset = frame.getOffset();\r\n            const scaleX = cw / ow;\r\n            const scaleY = ch / oh;\r\n            const trimLeft = offset.x + (ow - rw) / 2;\r\n            const trimRight = offset.x - (ow - rw) / 2;\r\n            const trimBottom = offset.y + (oh - rh) / 2;\r\n            const trimTop = offset.y - (oh - rh) / 2;\r\n            l = trimLeft * scaleX - appX;\r\n            b = trimBottom * scaleY - appY;\r\n            r = cw + trimRight * scaleX - appX;\r\n            t = ch + trimTop * scaleY - appY;\r\n        }\r\n\r\n        dataList[0].x = l;\r\n        dataList[0].y = b;\r\n\r\n        dataList[3].x = r;\r\n        dataList[3].y = t;\r\n\r\n        renderData.vertDirty = false;\r\n        this.updateWorldVerts(sprite, renderData.vData);\r\n    },\r\n\r\n    updateUvs(sprite: Sprite) {\r\n        const renderData = sprite.renderData!;\r\n        const vData = renderData.vData!;\r\n        const uv = sprite.spriteFrame!.uv;\r\n        vData[3] = uv[0];\r\n        vData[4] = uv[1];\r\n        vData[13] = uv[2];\r\n        vData[14] = uv[3];\r\n        vData[23] = uv[4];\r\n        vData[24] = uv[5];\r\n        vData[33] = uv[6];\r\n        vData[34] = uv[7];\r\n\r\n        renderData.uvDirty = false;\r\n    },\r\n\r\n    updateColor(sprite: Sprite) {\r\n        const vData = sprite.renderData!.vData;\r\n\r\n        let colorOffset = 5;\r\n        const color = sprite.color;\r\n        const colorR = color.r / 255;\r\n        const colorG = color.g / 255;\r\n        const colorB = color.b / 255;\r\n        const colorA = sprite.node._uiProps.opacity;\r\n        for (let i = 0; i < 4; i++) {\r\n            vData![colorOffset] = colorR;\r\n            vData![colorOffset + 1] = colorG;\r\n            vData![colorOffset + 2] = colorB;\r\n            vData![colorOffset + 3] = colorA;\r\n\r\n            colorOffset += 10;\r\n        }\r\n    },\r\n\r\n    updateTextureIdx(sprite: MultiTexture2d) {\r\n        const renderData = sprite.renderData!;\r\n        const vData = renderData.vData!;\r\n\r\n        vData[9] = sprite.textureIdx;\r\n        vData[19] = sprite.textureIdx;\r\n        vData[29] = sprite.textureIdx;\r\n        vData[39] = sprite.textureIdx;\r\n\r\n        sprite.textureIdxDirty = false;\r\n    }\r\n};\r\n//\r\n//\r\n@ccclass('MultiTexture2d')\r\n@executeInEditMode\r\nexport class MultiTexture2d extends Sprite {\r\n    @property\r\n    textureIdx: number = 0;\r\n    textureIdxDirty: boolean = true;\r\n\r\n    handle: number = -1;\r\n\r\n    start() {\r\n        // @ts-ignore\r\n        // 因为已经批量上传了纹理，所以就不需要引擎计算的texture哈希值，不然会打断dc\r\n        this.spriteFrame._texture._textureHash = 9999;\r\n    }\r\n\r\n    protected _flushAssembler() {\r\n        const assembler = simple;\r\n        cc.log(assembler);\r\n        if (this._assembler !== assembler) {\r\n            this.destroyRenderData();\r\n            this._assembler = assembler;\r\n        }\r\n\r\n        if (!this._renderData) {\r\n            if (this._assembler && this._assembler.createData) {\r\n                this._renderData = this._assembler.createData(this);\r\n                this._renderData!.material = this.getRenderMaterial(0);\r\n                this.markForUpdateRenderData();\r\n                this._colorDirty = true;\r\n                this._updateColor();\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}