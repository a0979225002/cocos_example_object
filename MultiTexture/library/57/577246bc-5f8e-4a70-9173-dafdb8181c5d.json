{
  "__type__": "cc.EffectAsset",
  "_name": "../LocalRes/Shaders/multi-texture-2d",
  "_objFlags": 0,
  "_native": "",
  "techniques": [
    {
      "passes": [
        {
          "blendState": {
            "targets": [
              {
                "blend": true,
                "blendSrc": 2,
                "blendDst": 4,
                "blendDstAlpha": 4
              }
            ]
          },
          "rasterizerState": {
            "cullMode": 0
          },
          "program": "../LocalRes/Shaders/multi-texture-2d|sprite-vs:vert|sprite-fs:frag",
          "depthStencilState": {
            "depthTest": false,
            "depthWrite": false
          },
          "properties": {
            "texture0": {
              "value": "white",
              "type": 28
            },
            "texture1": {
              "value": "white",
              "type": 28
            },
            "texture2": {
              "value": "white",
              "type": 28
            },
            "texture3": {
              "value": "white",
              "type": 28
            },
            "texture4": {
              "value": "white",
              "type": 28
            },
            "texture5": {
              "value": "white",
              "type": 28
            },
            "texture6": {
              "value": "white",
              "type": 28
            },
            "texture7": {
              "value": "white",
              "type": 28
            },
            "alphaThreshold": {
              "value": [
                0.5
              ],
              "type": 13
            }
          }
        }
      ]
    }
  ],
  "shaders": [
    {
      "hash": 1934237666,
      "glsl4": {
        "vert": "\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_LOCAL\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\n#if SAMPLE_FROM_RT\n#endif\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec2 a_texCoord;\nlayout(location = 2) in vec4 a_color;\nlayout(location = 0) out vec4 color;\nlayout(location = 1) out vec2 uv0;\nlayout(location = 3) in float a_texture_idx;\nlayout(location = 2) out float texture_idx;\nvec4 vert () {\n  texture_idx = a_texture_idx;\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }",
        "frag": "\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(set = 1, binding = 0) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nlayout(location = 0) in vec4 color;\n#if USE_TEXTURE\n  layout(location = 1) in vec2 uv0;\n  layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;\n  layout(location = 2) in float texture_idx;\n#endif\nlayout(set = 1, binding = 1) uniform sampler2D texture0;\nlayout(set = 1, binding = 2) uniform sampler2D texture1;\nlayout(set = 1, binding = 3) uniform sampler2D texture2;\nlayout(set = 1, binding = 4) uniform sampler2D texture3;\nlayout(set = 1, binding = 5) uniform sampler2D texture4;\nlayout(set = 1, binding = 6) uniform sampler2D texture5;\nlayout(set = 1, binding = 7) uniform sampler2D texture6;\nlayout(set = 1, binding = 8) uniform sampler2D texture7;\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    if(texture_idx < 1.0) {\n      o *= CCSampleWithAlphaSeparated(texture0, uv0);\n    }\n    else if(texture_idx < 2.0) {\n      o *= CCSampleWithAlphaSeparated(texture1, uv0);\n    }\n    else if(texture_idx < 3.0) {\n      o *= CCSampleWithAlphaSeparated(texture2, uv0);\n    }\n    else if(texture_idx < 4.0) {\n      o *= CCSampleWithAlphaSeparated(texture3, uv0);\n    }\n    else if(texture_idx < 5.0) {\n      o *= CCSampleWithAlphaSeparated(texture4, uv0);\n    }\n    else if(texture_idx < 6.0) {\n      o *= CCSampleWithAlphaSeparated(texture5, uv0);\n    }\n    else if(texture_idx < 7.0) {\n      o *= CCSampleWithAlphaSeparated(texture6, uv0);\n    }\n    else if(texture_idx < 8.0) {\n      o *= CCSampleWithAlphaSeparated(texture7, uv0);\n    }\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\n#if SAMPLE_FROM_RT\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\nin float a_texture_idx;\nout float texture_idx;\nvec4 vert () {\n  texture_idx = a_texture_idx;\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }",
        "frag": "\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 color;\n#if USE_TEXTURE\n  in vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n  in float texture_idx;\n#endif\nuniform sampler2D texture0;\nuniform sampler2D texture1;\nuniform sampler2D texture2;\nuniform sampler2D texture3;\nuniform sampler2D texture4;\nuniform sampler2D texture5;\nuniform sampler2D texture6;\nuniform sampler2D texture7;\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    if(texture_idx < 1.0) {\n      o *= CCSampleWithAlphaSeparated(texture0, uv0);\n    }\n    else if(texture_idx < 2.0) {\n      o *= CCSampleWithAlphaSeparated(texture1, uv0);\n    }\n    else if(texture_idx < 3.0) {\n      o *= CCSampleWithAlphaSeparated(texture2, uv0);\n    }\n    else if(texture_idx < 4.0) {\n      o *= CCSampleWithAlphaSeparated(texture3, uv0);\n    }\n    else if(texture_idx < 5.0) {\n      o *= CCSampleWithAlphaSeparated(texture4, uv0);\n    }\n    else if(texture_idx < 6.0) {\n      o *= CCSampleWithAlphaSeparated(texture5, uv0);\n    }\n    else if(texture_idx < 7.0) {\n      o *= CCSampleWithAlphaSeparated(texture6, uv0);\n    }\n    else if(texture_idx < 8.0) {\n      o *= CCSampleWithAlphaSeparated(texture7, uv0);\n    }\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
      },
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\nattribute float a_texture_idx;\nvarying float texture_idx;\nvec4 vert () {\n  texture_idx = a_texture_idx;\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }",
        "frag": "\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 color;\n#if USE_TEXTURE\n  varying vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n  varying float texture_idx;\n#endif\nuniform sampler2D texture0;\nuniform sampler2D texture1;\nuniform sampler2D texture2;\nuniform sampler2D texture3;\nuniform sampler2D texture4;\nuniform sampler2D texture5;\nuniform sampler2D texture6;\nuniform sampler2D texture7;\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    if(texture_idx < 1.0) {\n      o *= CCSampleWithAlphaSeparated(texture0, uv0);\n    }\n    else if(texture_idx < 2.0) {\n      o *= CCSampleWithAlphaSeparated(texture1, uv0);\n    }\n    else if(texture_idx < 3.0) {\n      o *= CCSampleWithAlphaSeparated(texture2, uv0);\n    }\n    else if(texture_idx < 4.0) {\n      o *= CCSampleWithAlphaSeparated(texture3, uv0);\n    }\n    else if(texture_idx < 5.0) {\n      o *= CCSampleWithAlphaSeparated(texture4, uv0);\n    }\n    else if(texture_idx < 6.0) {\n      o *= CCSampleWithAlphaSeparated(texture5, uv0);\n    }\n    else if(texture_idx < 7.0) {\n      o *= CCSampleWithAlphaSeparated(texture6, uv0);\n    }\n    else if(texture_idx < 8.0) {\n      o *= CCSampleWithAlphaSeparated(texture7, uv0);\n    }\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"
      },
      "builtins": {
        "globals": {
          "blocks": [
            {
              "name": "CCGlobal",
              "defines": []
            },
            {
              "name": "CCCamera",
              "defines": []
            }
          ],
          "samplerTextures": []
        },
        "locals": {
          "blocks": [
            {
              "name": "CCLocal",
              "defines": [
                "USE_LOCAL"
              ]
            }
          ],
          "samplerTextures": [
            {
              "name": "cc_spriteTexture",
              "defines": [
                "USE_TEXTURE"
              ]
            }
          ]
        },
        "statistics": {
          "CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS": 46,
          "CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS": 1
        }
      },
      "defines": [
        {
          "name": "USE_LOCAL",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "SAMPLE_FROM_RT",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_PIXEL_ALIGNMENT",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "CC_USE_EMBEDDED_ALPHA",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_ALPHA_TEST",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_TEXTURE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "IS_GRAY",
          "type": "boolean",
          "defines": [
            "USE_TEXTURE"
          ]
        }
      ],
      "blocks": [
        {
          "name": "ALPHA_TEST_DATA",
          "members": [
            {
              "name": "alphaThreshold",
              "type": 13,
              "count": 1
            }
          ],
          "defines": [
            "USE_ALPHA_TEST"
          ],
          "stageFlags": 16,
          "binding": 0
        }
      ],
      "samplerTextures": [
        {
          "name": "texture0",
          "type": 28,
          "count": 1,
          "defines": [],
          "stageFlags": 16,
          "binding": 1
        },
        {
          "name": "texture1",
          "type": 28,
          "count": 1,
          "defines": [],
          "stageFlags": 16,
          "binding": 2
        },
        {
          "name": "texture2",
          "type": 28,
          "count": 1,
          "defines": [],
          "stageFlags": 16,
          "binding": 3
        },
        {
          "name": "texture3",
          "type": 28,
          "count": 1,
          "defines": [],
          "stageFlags": 16,
          "binding": 4
        },
        {
          "name": "texture4",
          "type": 28,
          "count": 1,
          "defines": [],
          "stageFlags": 16,
          "binding": 5
        },
        {
          "name": "texture5",
          "type": 28,
          "count": 1,
          "defines": [],
          "stageFlags": 16,
          "binding": 6
        },
        {
          "name": "texture6",
          "type": 28,
          "count": 1,
          "defines": [],
          "stageFlags": 16,
          "binding": 7
        },
        {
          "name": "texture7",
          "type": 28,
          "count": 1,
          "defines": [],
          "stageFlags": 16,
          "binding": 8
        }
      ],
      "attributes": [
        {
          "name": "a_position",
          "type": 15,
          "count": 1,
          "defines": [],
          "stageFlags": 1,
          "format": 32,
          "location": 0
        },
        {
          "name": "a_texCoord",
          "type": 14,
          "count": 1,
          "defines": [],
          "stageFlags": 1,
          "format": 21,
          "location": 1
        },
        {
          "name": "a_color",
          "type": 16,
          "count": 1,
          "defines": [],
          "stageFlags": 1,
          "format": 44,
          "location": 2
        },
        {
          "name": "a_texture_idx",
          "type": 13,
          "count": 1,
          "defines": [],
          "stageFlags": 1,
          "format": 11,
          "location": 3
        }
      ],
      "varyings": [
        {
          "name": "color",
          "type": 16,
          "count": 1,
          "defines": [],
          "stageFlags": 1,
          "location": 0
        },
        {
          "name": "uv0",
          "type": 14,
          "count": 1,
          "defines": [],
          "stageFlags": 1,
          "location": 1
        },
        {
          "name": "texture_idx",
          "type": 13,
          "count": 1,
          "defines": [],
          "stageFlags": 1,
          "location": 2
        }
      ],
      "name": "../LocalRes/Shaders/multi-texture-2d|sprite-vs:vert|sprite-fs:frag"
    }
  ],
  "combinations": [],
  "hideInEditor": false
}