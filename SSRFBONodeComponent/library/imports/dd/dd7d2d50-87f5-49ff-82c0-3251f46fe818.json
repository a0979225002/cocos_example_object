{
  "__type__": "cc.EffectAsset",
  "_name": "blur",
  "_objFlags": 0,
  "_native": "",
  "properties": null,
  "techniques": [
    {
      "passes": [
        {
          "blendState": {
            "targets": [
              {
                "blend": true
              }
            ]
          },
          "rasterizerState": {
            "cullMode": 0
          },
          "properties": {
            "texture": {
              "value": "white",
              "type": 29
            },
            "alphaThreshold": {
              "value": [
                0.5
              ],
              "type": 13
            }
          },
          "program": "blur|vs|fs"
        }
      ]
    }
  ],
  "shaders": [
    {
      "hash": 1739285557,
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  float v = 0.0+(10.0*0.7);\n   vec4 sum = vec4(0);\n   vec2 offset = vec2(0.0);\n   vec2 u_normalizred_resolution = vec2(1.0 / 1560.0 , 1.0 / 960.0 * 5.0);\n   float u_intensity = 0.5;\n   sum += texture2D(texture, v_uv0 + offset) * v_color;\n   offset = u_normalizred_resolution * vec2(0.0, -v) * u_intensity;\n   sum += texture2D(texture, v_uv0 + offset) * v_color;\n   offset = u_normalizred_resolution * vec2(0.0, -v) * u_intensity;\n   sum += texture2D(texture, v_uv0 + offset) * v_color;\n   offset = u_normalizred_resolution * vec2(0.0, 0.0) * u_intensity;\n   sum += texture2D(texture, v_uv0 + offset) * v_color;\n   offset = u_normalizred_resolution * vec2(0.0, 0.0) * u_intensity;\n   sum += texture2D(texture, v_uv0 + offset) * v_color;\n   offset = u_normalizred_resolution * vec2(0.0, 0.0) * u_intensity;\n   sum += texture2D(texture, v_uv0 + offset) * v_color;\n   offset = u_normalizred_resolution * vec2(0.0, v) * u_intensity;\n   sum += texture2D(texture, v_uv0 + offset) * v_color;\n   offset = u_normalizred_resolution * vec2(0.0, v) * u_intensity;\n   sum += texture2D(texture, v_uv0 + offset) * v_color;\n   offset = u_normalizred_resolution * vec2(0.0, v) * u_intensity;\n   sum += texture2D(texture, v_uv0 + offset) * v_color;\n   gl_FragColor = vec4((sum / 9.0).rgb, texture2D(texture, v_uv0).a);\n}"
      },
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  float v = 0.0+(10.0*0.7);\n   vec4 sum = vec4(0);\n   vec2 offset = vec2(0.0);\n   vec2 u_normalizred_resolution = vec2(1.0 / 1560.0 , 1.0 / 960.0 * 5.0);\n   float u_intensity = 0.5;\n   sum += texture2D(texture, v_uv0 + offset) * v_color;\n   offset = u_normalizred_resolution * vec2(0.0, -v) * u_intensity;\n   sum += texture2D(texture, v_uv0 + offset) * v_color;\n   offset = u_normalizred_resolution * vec2(0.0, -v) * u_intensity;\n   sum += texture2D(texture, v_uv0 + offset) * v_color;\n   offset = u_normalizred_resolution * vec2(0.0, 0.0) * u_intensity;\n   sum += texture2D(texture, v_uv0 + offset) * v_color;\n   offset = u_normalizred_resolution * vec2(0.0, 0.0) * u_intensity;\n   sum += texture2D(texture, v_uv0 + offset) * v_color;\n   offset = u_normalizred_resolution * vec2(0.0, 0.0) * u_intensity;\n   sum += texture2D(texture, v_uv0 + offset) * v_color;\n   offset = u_normalizred_resolution * vec2(0.0, v) * u_intensity;\n   sum += texture2D(texture, v_uv0 + offset) * v_color;\n   offset = u_normalizred_resolution * vec2(0.0, v) * u_intensity;\n   sum += texture2D(texture, v_uv0 + offset) * v_color;\n   offset = u_normalizred_resolution * vec2(0.0, v) * u_intensity;\n   sum += texture2D(texture, v_uv0 + offset) * v_color;\n   gl_FragColor = vec4((sum / 9.0).rgb, texture2D(texture, v_uv0).a);\n}"
      },
      "builtins": {
        "globals": {
          "blocks": [
            {
              "name": "CCGlobal",
              "defines": []
            }
          ],
          "samplers": []
        },
        "locals": {
          "blocks": [
            {
              "name": "CCLocal",
              "defines": []
            }
          ],
          "samplers": []
        }
      },
      "defines": [
        {
          "name": "USE_TEXTURE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "CC_USE_MODEL",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_ALPHA_TEST",
          "type": "boolean",
          "defines": []
        }
      ],
      "blocks": [
        {
          "name": "ALPHA_TEST",
          "members": [
            {
              "name": "alphaThreshold",
              "type": 13,
              "count": 1
            }
          ],
          "defines": [
            "USE_ALPHA_TEST"
          ],
          "binding": 0
        }
      ],
      "samplers": [
        {
          "name": "texture",
          "type": 29,
          "count": 1,
          "defines": [
            "USE_TEXTURE"
          ],
          "binding": 30
        }
      ],
      "record": null,
      "name": "blur|vs|fs"
    }
  ]
}