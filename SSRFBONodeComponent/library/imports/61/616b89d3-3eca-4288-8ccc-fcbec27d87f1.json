{
  "__type__": "cc.EffectAsset",
  "_name": "WaterTurbulence",
  "_objFlags": 0,
  "_native": "",
  "properties": null,
  "techniques": [
    {
      "passes": [
        {
          "blendState": {
            "targets": [
              {
                "blend": true
              }
            ]
          },
          "rasterizerState": {
            "cullMode": 0
          },
          "properties": {
            "texture": {
              "value": "white",
              "type": 29
            },
            "Intensity": {
              "value": [
                1
              ],
              "type": 13
            },
            "Speed": {
              "value": [
                0.1
              ],
              "type": 13
            },
            "Scale": {
              "value": [
                1
              ],
              "type": 13
            },
            "Sub": {
              "value": "white",
              "type": 29
            }
          },
          "program": "WaterTurbulence|vs|fs"
        }
      ]
    }
  ],
  "shaders": [
    {
      "hash": 1942296780,
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\n    in vec2 a_uv0;\n    out vec2 v_uv0;\n#endif\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  #if USE_TEXTURE\n      in vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  in vec4 v_color;\n  uniform Constant {\n  float Intensity;\n  float Speed;\n  float Scale;\n};\nuniform sampler2D Sub;\n  float c_Remap1_main_13(float Input, vec2 InMinMax, vec2 OutMinMax)\n{\n    return (OutMinMax.x + (Input - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x));\n}\nvec4 c_1To4_main_18(float Input) {\n    return vec4(Input);\n}\nvec4 c_Split4_main_5(vec4 Input) {\n    return Input;\n}\nfloat c_Mul1_main_4(float InputA, float InputB) {\n    return (InputA * InputB);\n}\nvec2 c_NoiseGradient_f_gradient_noise_dir_7(vec2 p)\n{\n    p = mod(p, 289.0);\n    float x = (34.0 * p.x + 1.0) * mod(p.x, 289.0) + p.y;\n    x = mod((34.0 * x + 1.0) * x, 289.0);\n    x = fract(x / 41.0) * 2.0 - 1.0;\n    return normalize(vec2(x - floor(x + 0.5), abs(x) - 0.5));\n}\nfloat c_NoiseGradient_main_7(vec2 UV, float Scale) {\n    vec2 p = UV * Scale;\n    vec2 ip = floor(p);\n    vec2 fp = fract(p);\n    float d00 = dot(c_NoiseGradient_f_gradient_noise_dir_7(ip), fp);\n    float d01 = dot(c_NoiseGradient_f_gradient_noise_dir_7(ip + vec2(0.0, 1.0)), fp - vec2(0.0, 1.0));\n    float d10 = dot(c_NoiseGradient_f_gradient_noise_dir_7(ip + vec2(1.0, 0.0)), fp - vec2(1.0, 0.0));\n    float d11 = dot(c_NoiseGradient_f_gradient_noise_dir_7(ip + vec2(1.0, 1.0)), fp - vec2(1.0, 1.0));\n    fp = fp * fp * fp * (fp * (fp * 6.0 - 15.0) + 10.0);\n    return mix(mix(d00, d01, fp.y), mix(d10, d11, fp.y), fp.x);\n}\nfloat c_Add1_main_9(float InputA, float InputB) {\n    return (InputA + InputB);\n}\nvec2 c_1To2_main_11(float Input) {\n    return vec2(Input);\n}\nvec2 c_UVTilingAndOffset_main_10(vec2 UV, vec2 Tiling, vec2 Offset) {\n    return UV * Tiling + Offset;\n}\nvec4 c_TextureToRGBA_main_16(vec2 UV, sampler2D Texture) {\n    return texture2D(Texture, UV);\n}\nvec4 c_Mul4_main_19(vec4 InputA, vec4 InputB) {\n    return (InputA * InputB);\n}\nvec4 c_Split4_main_22(vec4 Input) {\n    return Input;\n}\nvec2 c_2To2_main_25(float InputA, float InputB) {\n    return vec2(InputA, InputB);\n}\nvec2 c_UVTilingAndOffset_main_21(vec2 UV, vec2 Tiling, vec2 Offset) {\n    return UV * Tiling + Offset;\n}\nvec4 c_TextureToRGBA_main_26(vec2 UV, sampler2D Texture) {\n    return texture2D(Texture, UV);\n}\nvec4 c_Output_main_1(vec4 Color) {\n    return Color;\n}\nvoid main()\n{\n    float out_Output_Remap1_13 = c_Remap1_main_13(Intensity, vec2(0.00000, 1.00000), vec2(0.00000, 0.10000));\n    vec4 out_Output_1To4_18 = c_1To4_main_18(out_Output_Remap1_13);\n    vec4 out_Output_Split4_5 = c_Split4_main_5(cc_time);\n    float out_x_Split4_5 = out_Output_Split4_5.x;\n    float out_Output_Mul1_4 = c_Mul1_main_4(Speed, out_x_Split4_5);\n    float out_Output_NoiseGradient_7 = c_NoiseGradient_main_7(v_uv0, Scale);\n    float out_Output_Add1_9 = c_Add1_main_9(out_Output_NoiseGradient_7, out_Output_Mul1_4);\n    vec2 out_Output_1To2_11 = c_1To2_main_11(out_Output_Add1_9);\n    vec2 out_UV_UVTilingAndOffset_10 = c_UVTilingAndOffset_main_10(v_uv0, vec2(1.00000, 1.00000), out_Output_1To2_11);\n    vec4 out_Color_TextureToRGBA_16 = c_TextureToRGBA_main_16(out_UV_UVTilingAndOffset_10, Sub);\n    vec4 out_Output_Mul4_19 = c_Mul4_main_19(out_Output_1To4_18, out_Color_TextureToRGBA_16);\n    vec4 out_Output_Split4_22 = c_Split4_main_22(out_Output_Mul4_19);\n    float out_x_Split4_22 = out_Output_Split4_22.x;\n    vec2 out_Output_2To2_25 = c_2To2_main_25(out_x_Split4_22, 0.00000);\n    vec2 out_UV_UVTilingAndOffset_21 = c_UVTilingAndOffset_main_21(out_Output_2To2_25, vec2(1.00000, 1.00000), v_uv0);\n    vec4 out_Color_TextureToRGBA_26 = c_TextureToRGBA_main_26(out_UV_UVTilingAndOffset_21, texture);\n    gl_FragColor = c_Output_main_1(out_Color_TextureToRGBA_26);\n}"
      },
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\n    attribute vec2 a_uv0;\n    varying vec2 v_uv0;\n#endif\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform vec4 cc_time;\n  #if USE_TEXTURE\n      varying vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  varying vec4 v_color;\n  uniform float Intensity;\nuniform float Speed;\nuniform float Scale;\nuniform sampler2D Sub;\n  float c_Remap1_main_13(float Input, vec2 InMinMax, vec2 OutMinMax)\n{\n    return (OutMinMax.x + (Input - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x));\n}\nvec4 c_1To4_main_18(float Input) {\n    return vec4(Input);\n}\nvec4 c_Split4_main_5(vec4 Input) {\n    return Input;\n}\nfloat c_Mul1_main_4(float InputA, float InputB) {\n    return (InputA * InputB);\n}\nvec2 c_NoiseGradient_f_gradient_noise_dir_7(vec2 p)\n{\n    p = mod(p, 289.0);\n    float x = (34.0 * p.x + 1.0) * mod(p.x, 289.0) + p.y;\n    x = mod((34.0 * x + 1.0) * x, 289.0);\n    x = fract(x / 41.0) * 2.0 - 1.0;\n    return normalize(vec2(x - floor(x + 0.5), abs(x) - 0.5));\n}\nfloat c_NoiseGradient_main_7(vec2 UV, float Scale) {\n    vec2 p = UV * Scale;\n    vec2 ip = floor(p);\n    vec2 fp = fract(p);\n    float d00 = dot(c_NoiseGradient_f_gradient_noise_dir_7(ip), fp);\n    float d01 = dot(c_NoiseGradient_f_gradient_noise_dir_7(ip + vec2(0.0, 1.0)), fp - vec2(0.0, 1.0));\n    float d10 = dot(c_NoiseGradient_f_gradient_noise_dir_7(ip + vec2(1.0, 0.0)), fp - vec2(1.0, 0.0));\n    float d11 = dot(c_NoiseGradient_f_gradient_noise_dir_7(ip + vec2(1.0, 1.0)), fp - vec2(1.0, 1.0));\n    fp = fp * fp * fp * (fp * (fp * 6.0 - 15.0) + 10.0);\n    return mix(mix(d00, d01, fp.y), mix(d10, d11, fp.y), fp.x);\n}\nfloat c_Add1_main_9(float InputA, float InputB) {\n    return (InputA + InputB);\n}\nvec2 c_1To2_main_11(float Input) {\n    return vec2(Input);\n}\nvec2 c_UVTilingAndOffset_main_10(vec2 UV, vec2 Tiling, vec2 Offset) {\n    return UV * Tiling + Offset;\n}\nvec4 c_TextureToRGBA_main_16(vec2 UV, sampler2D Texture) {\n    return texture2D(Texture, UV);\n}\nvec4 c_Mul4_main_19(vec4 InputA, vec4 InputB) {\n    return (InputA * InputB);\n}\nvec4 c_Split4_main_22(vec4 Input) {\n    return Input;\n}\nvec2 c_2To2_main_25(float InputA, float InputB) {\n    return vec2(InputA, InputB);\n}\nvec2 c_UVTilingAndOffset_main_21(vec2 UV, vec2 Tiling, vec2 Offset) {\n    return UV * Tiling + Offset;\n}\nvec4 c_TextureToRGBA_main_26(vec2 UV, sampler2D Texture) {\n    return texture2D(Texture, UV);\n}\nvec4 c_Output_main_1(vec4 Color) {\n    return Color;\n}\nvoid main()\n{\n    float out_Output_Remap1_13 = c_Remap1_main_13(Intensity, vec2(0.00000, 1.00000), vec2(0.00000, 0.10000));\n    vec4 out_Output_1To4_18 = c_1To4_main_18(out_Output_Remap1_13);\n    vec4 out_Output_Split4_5 = c_Split4_main_5(cc_time);\n    float out_x_Split4_5 = out_Output_Split4_5.x;\n    float out_Output_Mul1_4 = c_Mul1_main_4(Speed, out_x_Split4_5);\n    float out_Output_NoiseGradient_7 = c_NoiseGradient_main_7(v_uv0, Scale);\n    float out_Output_Add1_9 = c_Add1_main_9(out_Output_NoiseGradient_7, out_Output_Mul1_4);\n    vec2 out_Output_1To2_11 = c_1To2_main_11(out_Output_Add1_9);\n    vec2 out_UV_UVTilingAndOffset_10 = c_UVTilingAndOffset_main_10(v_uv0, vec2(1.00000, 1.00000), out_Output_1To2_11);\n    vec4 out_Color_TextureToRGBA_16 = c_TextureToRGBA_main_16(out_UV_UVTilingAndOffset_10, Sub);\n    vec4 out_Output_Mul4_19 = c_Mul4_main_19(out_Output_1To4_18, out_Color_TextureToRGBA_16);\n    vec4 out_Output_Split4_22 = c_Split4_main_22(out_Output_Mul4_19);\n    float out_x_Split4_22 = out_Output_Split4_22.x;\n    vec2 out_Output_2To2_25 = c_2To2_main_25(out_x_Split4_22, 0.00000);\n    vec2 out_UV_UVTilingAndOffset_21 = c_UVTilingAndOffset_main_21(out_Output_2To2_25, vec2(1.00000, 1.00000), v_uv0);\n    vec4 out_Color_TextureToRGBA_26 = c_TextureToRGBA_main_26(out_UV_UVTilingAndOffset_21, texture);\n    gl_FragColor = c_Output_main_1(out_Color_TextureToRGBA_26);\n}"
      },
      "builtins": {
        "globals": {
          "blocks": [
            {
              "name": "CCGlobal",
              "defines": []
            }
          ],
          "samplers": []
        },
        "locals": {
          "blocks": [
            {
              "name": "CCLocal",
              "defines": []
            }
          ],
          "samplers": []
        }
      },
      "defines": [
        {
          "name": "USE_TEXTURE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "CC_USE_MODEL",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_TINT",
          "type": "boolean",
          "defines": []
        }
      ],
      "blocks": [
        {
          "name": "Constant",
          "members": [
            {
              "name": "Intensity",
              "type": 13,
              "count": 1
            },
            {
              "name": "Speed",
              "type": 13,
              "count": 1
            },
            {
              "name": "Scale",
              "type": 13,
              "count": 1
            }
          ],
          "defines": [],
          "binding": 0
        }
      ],
      "samplers": [
        {
          "name": "texture",
          "type": 29,
          "count": 1,
          "defines": [
            "USE_TEXTURE"
          ],
          "binding": 30
        },
        {
          "name": "Sub",
          "type": 29,
          "count": 1,
          "defines": [],
          "binding": 31
        }
      ],
      "record": null,
      "name": "WaterTurbulence|vs|fs"
    }
  ]
}