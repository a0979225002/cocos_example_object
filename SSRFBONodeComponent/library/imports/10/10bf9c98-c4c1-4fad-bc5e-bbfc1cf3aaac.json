{
  "__type__": "cc.EffectAsset",
  "_name": "fow",
  "_objFlags": 0,
  "_native": "",
  "properties": null,
  "techniques": [
    {
      "passes": [
        {
          "blendState": {
            "targets": [
              {
                "blend": true
              }
            ]
          },
          "rasterizerState": {
            "cullMode": 0
          },
          "properties": {
            "texture": {
              "value": "white",
              "type": 29
            }
          },
          "program": "fow|vs|fs"
        }
      ]
    }
  ],
  "shaders": [
    {
      "hash": 1110010281,
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n#if USE_TINT\n#endif\nin vec3 a_position;\nin vec2 a_uv0;\nout vec2 v_uv0;\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    v_uv0 = a_uv0;\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\nprecision highp float;\nuniform sampler2D texture;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec2 v_uv0;\nin vec4 v_color;\nvoid main () {\n    vec4 maskColor = vec4(0.0, 0.0, 0.0, 1.0);\n    float offset = 0.005;\n    vec4 uv01 = vec4(v_uv0.x, 1.0 - v_uv0.y, v_uv0.x, 1.0 - v_uv0.y) + offset * vec4(0, 1, 0, -1);\n    vec4 uv10 = vec4(v_uv0.x, 1.0 - v_uv0.y, v_uv0.x, 1.0 - v_uv0.y) + offset * vec4(1, 0, -1, 0);\n    vec4 uv23 = vec4(v_uv0.x, 1.0 - v_uv0.y, v_uv0.x, 1.0 - v_uv0.y) + offset * vec4(0, 1, 0, -1) * 2.0;\n    vec4 uv32 = vec4(v_uv0.x, 1.0 - v_uv0.y, v_uv0.x, 1.0 - v_uv0.y) + offset * vec4(1, 0, -1, 0) * 2.0;\n    vec4 uv45 = vec4(v_uv0.x, 1.0 - v_uv0.y, v_uv0.x, 1.0 - v_uv0.y) + offset * vec4(0, 1, 0, -1) * 3.0;\n    vec4 uv54 = vec4(v_uv0.x, 1.0 - v_uv0.y, v_uv0.x, 1.0 - v_uv0.y) + offset * vec4(1, 0, -1, 0) * 3.0;\n    vec4 uv67 = vec4(v_uv0.x, 1.0 - v_uv0.y, v_uv0.x, 1.0 - v_uv0.y) + offset * vec4(0, 1, 0, -1) * 4.0;\n    vec4 uv76 = vec4(v_uv0.x, 1.0 - v_uv0.y, v_uv0.x, 1.0 - v_uv0.y) + offset * vec4(1, 0, -1, 0) * 4.0;\n    vec4 c = vec4(0, 0, 0, 0);\n    c += 0.1 * texture2D(texture, vec2(v_uv0.x, 1.0 - v_uv0.y));\n    c += 0.08 * texture2D(texture, vec2(uv01.xy));\n    c += 0.08 * texture2D(texture, vec2(uv01.zw));\n    c += 0.08 * texture2D(texture, vec2(uv10.xy));\n    c += 0.08 * texture2D(texture, vec2(uv10.zw));\n    c += 0.06 * texture2D(texture, vec2(uv23.xy));\n    c += 0.06 * texture2D(texture, vec2(uv23.zw));\n    c += 0.06 * texture2D(texture, vec2(uv32.xy));\n    c += 0.06 * texture2D(texture, vec2(uv32.zw));\n    c += 0.04 * texture2D(texture, vec2(uv45.xy));\n    c += 0.04 * texture2D(texture, vec2(uv45.zw));\n    c += 0.04 * texture2D(texture, vec2(uv54.xy));\n    c += 0.04 * texture2D(texture, vec2(uv54.zw));\n    c += 0.02 * texture2D(texture, vec2(uv67.xy));\n    c += 0.02 * texture2D(texture, vec2(uv67.zw));\n    c += 0.02 * texture2D(texture, vec2(uv76.xy));\n    c += 0.02 * texture2D(texture, vec2(uv76.zw));\n    gl_FragColor = vec4(maskColor.rgb, 1.0 - c.a);\n}"
      },
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n#if USE_TINT\n#endif\nattribute vec3 a_position;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    v_uv0 = a_uv0;\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\nprecision highp float;\nuniform sampler2D texture;\nvarying vec2 v_uv0;\nvarying vec4 v_color;\nvoid main () {\n    vec4 maskColor = vec4(0.0, 0.0, 0.0, 1.0);\n    float offset = 0.005;\n    vec4 uv01 = vec4(v_uv0.x, 1.0 - v_uv0.y, v_uv0.x, 1.0 - v_uv0.y) + offset * vec4(0, 1, 0, -1);\n    vec4 uv10 = vec4(v_uv0.x, 1.0 - v_uv0.y, v_uv0.x, 1.0 - v_uv0.y) + offset * vec4(1, 0, -1, 0);\n    vec4 uv23 = vec4(v_uv0.x, 1.0 - v_uv0.y, v_uv0.x, 1.0 - v_uv0.y) + offset * vec4(0, 1, 0, -1) * 2.0;\n    vec4 uv32 = vec4(v_uv0.x, 1.0 - v_uv0.y, v_uv0.x, 1.0 - v_uv0.y) + offset * vec4(1, 0, -1, 0) * 2.0;\n    vec4 uv45 = vec4(v_uv0.x, 1.0 - v_uv0.y, v_uv0.x, 1.0 - v_uv0.y) + offset * vec4(0, 1, 0, -1) * 3.0;\n    vec4 uv54 = vec4(v_uv0.x, 1.0 - v_uv0.y, v_uv0.x, 1.0 - v_uv0.y) + offset * vec4(1, 0, -1, 0) * 3.0;\n    vec4 uv67 = vec4(v_uv0.x, 1.0 - v_uv0.y, v_uv0.x, 1.0 - v_uv0.y) + offset * vec4(0, 1, 0, -1) * 4.0;\n    vec4 uv76 = vec4(v_uv0.x, 1.0 - v_uv0.y, v_uv0.x, 1.0 - v_uv0.y) + offset * vec4(1, 0, -1, 0) * 4.0;\n    vec4 c = vec4(0, 0, 0, 0);\n    c += 0.1 * texture2D(texture, vec2(v_uv0.x, 1.0 - v_uv0.y));\n    c += 0.08 * texture2D(texture, vec2(uv01.xy));\n    c += 0.08 * texture2D(texture, vec2(uv01.zw));\n    c += 0.08 * texture2D(texture, vec2(uv10.xy));\n    c += 0.08 * texture2D(texture, vec2(uv10.zw));\n    c += 0.06 * texture2D(texture, vec2(uv23.xy));\n    c += 0.06 * texture2D(texture, vec2(uv23.zw));\n    c += 0.06 * texture2D(texture, vec2(uv32.xy));\n    c += 0.06 * texture2D(texture, vec2(uv32.zw));\n    c += 0.04 * texture2D(texture, vec2(uv45.xy));\n    c += 0.04 * texture2D(texture, vec2(uv45.zw));\n    c += 0.04 * texture2D(texture, vec2(uv54.xy));\n    c += 0.04 * texture2D(texture, vec2(uv54.zw));\n    c += 0.02 * texture2D(texture, vec2(uv67.xy));\n    c += 0.02 * texture2D(texture, vec2(uv67.zw));\n    c += 0.02 * texture2D(texture, vec2(uv76.xy));\n    c += 0.02 * texture2D(texture, vec2(uv76.zw));\n    gl_FragColor = vec4(maskColor.rgb, 1.0 - c.a);\n}"
      },
      "builtins": {
        "globals": {
          "blocks": [
            {
              "name": "CCGlobal",
              "defines": []
            }
          ],
          "samplers": []
        },
        "locals": {
          "blocks": [
            {
              "name": "CCLocal",
              "defines": []
            }
          ],
          "samplers": []
        }
      },
      "defines": [
        {
          "name": "USE_TINT",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "CC_USE_MODEL",
          "type": "boolean",
          "defines": []
        }
      ],
      "blocks": [],
      "samplers": [
        {
          "name": "texture",
          "type": 29,
          "count": 1,
          "defines": [],
          "binding": 30
        }
      ],
      "record": null,
      "name": "fow|vs|fs"
    }
  ]
}