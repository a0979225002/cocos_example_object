{
  "ver": "1.0.25",
  "uuid": "293675db-fdbb-414f-bf20-6486597c7a08",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform vec4 cc_time;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvarying vec4 v_time;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_time = cc_time;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nfloat col(vec2 coord) {\n    float time = cc_time.x;\n    float delta_theta = 0.897597901025655210989326680937;\n    float col = 0.0;\n    float theta = 0.0;\n    for (int i = 0; i < 8; i++) {\n        vec2 adjc = coord;\n        theta = delta_theta * float(i);\n        adjc.x += cos(theta) * time * 0.2 + time * 0.5;\n        adjc.y -= sin(theta) * time * 0.2 - time * 0.5;\n        col = col + cos((adjc.x * cos(theta) - adjc.y * sin(theta)) * 6.0);\n    }\n    return cos(col);\n}\nvoid main () {\n  vec2 p = v_uv0, c1 = p, c2 = p;\n  float cc1 = col(c1);\n  c2.x += 8.53;\n  float dx = 0.50 * (cc1 - col(c2)) / 60.0;\n  c2.x = p.x;\n  c2.y += 8.53;\n  float dy = 0.50 * (cc1 - col(c2)) / 60.0;\n  c1.x += dx * 2.0;\n  c1.y = (c1.y + dy * 2.0);\n  float alpha = 1.0 + dot(dx, dy) * 700.0 * 0.5;\n  float ddx = dx - 0.012;\n  float ddy = dy - 0.012;\n  if (ddx > 0.0 && ddy > 0.0) alpha = pow(alpha, ddx * ddy * 200000.0);\n  c1 = mix(p, c1, 0.5);\n  vec4 col = texture2D(texture, c1) * (alpha);\n  gl_FragColor = vec4(col.rgb, col.a);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nout vec4 v_time;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_time = cc_time;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nfloat col(vec2 coord) {\n    float time = cc_time.x;\n    float delta_theta = 0.897597901025655210989326680937;\n    float col = 0.0;\n    float theta = 0.0;\n    for (int i = 0; i < 8; i++) {\n        vec2 adjc = coord;\n        theta = delta_theta * float(i);\n        adjc.x += cos(theta) * time * 0.2 + time * 0.5;\n        adjc.y -= sin(theta) * time * 0.2 - time * 0.5;\n        col = col + cos((adjc.x * cos(theta) - adjc.y * sin(theta)) * 6.0);\n    }\n    return cos(col);\n}\nvoid main () {\n  vec2 p = v_uv0, c1 = p, c2 = p;\n  float cc1 = col(c1);\n  c2.x += 8.53;\n  float dx = 0.50 * (cc1 - col(c2)) / 60.0;\n  c2.x = p.x;\n  c2.y += 8.53;\n  float dy = 0.50 * (cc1 - col(c2)) / 60.0;\n  c1.x += dx * 2.0;\n  c1.y = (c1.y + dy * 2.0);\n  float alpha = 1.0 + dot(dx, dy) * 700.0 * 0.5;\n  float ddx = dx - 0.012;\n  float ddy = dy - 0.012;\n  if (ddx > 0.0 && ddy > 0.0) alpha = pow(alpha, ddx * ddy * 200000.0);\n  c1 = mix(p, c1, 0.5);\n  vec4 col = texture2D(texture, c1) * (alpha);\n  gl_FragColor = vec4(col.rgb, col.a);\n}"
      }
    }
  ],
  "subMetas": {}
}