{
  "ver": "1.0.25",
  "uuid": "705b8f5d-33cc-4964-8b43-3dabd1624280",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n   vec4 accum = vec4(0.0);\n   vec4 normal = vec4(0.0);\n   float u_radius = 0.001;\n   vec3 u_outlineColor = vec3(1.0, 1.0, 0.0);\n   normal = texture2D(texture, v_uv0);\n   accum += texture2D(texture, vec2(v_uv0.x - u_radius, v_uv0.y - u_radius));\n   accum += texture2D(texture, vec2(v_uv0.x + u_radius, v_uv0.y - u_radius));\n   accum += texture2D(texture, vec2(v_uv0.x + u_radius, v_uv0.y + u_radius));\n   accum += texture2D(texture, vec2(v_uv0.x - u_radius, v_uv0.y + u_radius));\n   accum.rgb = u_outlineColor * accum.a;\n   normal = (accum * (1.0 - normal.a)) + (normal * normal.a);\n   gl_FragColor = normal;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n   vec4 accum = vec4(0.0);\n   vec4 normal = vec4(0.0);\n   float u_radius = 0.001;\n   vec3 u_outlineColor = vec3(1.0, 1.0, 0.0);\n   normal = texture2D(texture, v_uv0);\n   accum += texture2D(texture, vec2(v_uv0.x - u_radius, v_uv0.y - u_radius));\n   accum += texture2D(texture, vec2(v_uv0.x + u_radius, v_uv0.y - u_radius));\n   accum += texture2D(texture, vec2(v_uv0.x + u_radius, v_uv0.y + u_radius));\n   accum += texture2D(texture, vec2(v_uv0.x - u_radius, v_uv0.y + u_radius));\n   accum.rgb = u_outlineColor * accum.a;\n   normal = (accum * (1.0 - normal.a)) + (normal * normal.a);\n   gl_FragColor = normal;\n}"
      }
    }
  ],
  "subMetas": {}
}