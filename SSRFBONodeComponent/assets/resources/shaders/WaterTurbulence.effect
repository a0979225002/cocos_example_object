
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          Intensity: 
            value: 1.00000
          Speed: 
            value: 0.10000
          Scale: 
            value: 1.00000
          Sub: 
            value: white
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		float Intensity;
		float Speed;
		float Scale;
	};
	uniform sampler2D Sub;

    float c_Remap1_main_13(float Input, vec2 InMinMax, vec2 OutMinMax)
	{
	    return (OutMinMax.x + (Input - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x));
	}
	vec4 c_1To4_main_18(float Input) {
	    return vec4(Input);
	}
	vec4 c_Split4_main_5(vec4 Input) {
	    return Input;
	}
	float c_Mul1_main_4(float InputA, float InputB) {
	    return (InputA * InputB);
	}
	vec2 c_NoiseGradient_f_gradient_noise_dir_7(vec2 p)
	{
	    p = mod(p, 289.0);
	    float x = (34.0 * p.x + 1.0) * mod(p.x, 289.0) + p.y;
	    x = mod((34.0 * x + 1.0) * x, 289.0);
	    x = fract(x / 41.0) * 2.0 - 1.0;
	    return normalize(vec2(x - floor(x + 0.5), abs(x) - 0.5));
	}
	float c_NoiseGradient_main_7(vec2 UV, float Scale) {
	    vec2 p = UV * Scale;
	    vec2 ip = floor(p);
	    vec2 fp = fract(p);
	    float d00 = dot(c_NoiseGradient_f_gradient_noise_dir_7(ip), fp);
	    float d01 = dot(c_NoiseGradient_f_gradient_noise_dir_7(ip + vec2(0.0, 1.0)), fp - vec2(0.0, 1.0));
	    float d10 = dot(c_NoiseGradient_f_gradient_noise_dir_7(ip + vec2(1.0, 0.0)), fp - vec2(1.0, 0.0));
	    float d11 = dot(c_NoiseGradient_f_gradient_noise_dir_7(ip + vec2(1.0, 1.0)), fp - vec2(1.0, 1.0));
	    fp = fp * fp * fp * (fp * (fp * 6.0 - 15.0) + 10.0);
	    return mix(mix(d00, d01, fp.y), mix(d10, d11, fp.y), fp.x);
	}
	float c_Add1_main_9(float InputA, float InputB) {
	    return (InputA + InputB);
	}
	vec2 c_1To2_main_11(float Input) {
	    return vec2(Input);
	}
	vec2 c_UVTilingAndOffset_main_10(vec2 UV, vec2 Tiling, vec2 Offset) {
	    return UV * Tiling + Offset;
	}
	vec4 c_TextureToRGBA_main_16(vec2 UV, sampler2D Texture) {
	    return texture2D(Texture, UV);
	}
	vec4 c_Mul4_main_19(vec4 InputA, vec4 InputB) {
	    return (InputA * InputB);
	}
	vec4 c_Split4_main_22(vec4 Input) {
	    return Input;
	}
	vec2 c_2To2_main_25(float InputA, float InputB) {
	    return vec2(InputA, InputB);
	}
	vec2 c_UVTilingAndOffset_main_21(vec2 UV, vec2 Tiling, vec2 Offset) {
	    return UV * Tiling + Offset;
	}
	vec4 c_TextureToRGBA_main_26(vec2 UV, sampler2D Texture) {
	    return texture2D(Texture, UV);
	}
	vec4 c_Output_main_1(vec4 Color) { 
	    return Color; 
	}
	void main()                                    
	{                                              
	    float out_Output_Remap1_13 = c_Remap1_main_13(Intensity, vec2(0.00000, 1.00000), vec2(0.00000, 0.10000));
	    vec4 out_Output_1To4_18 = c_1To4_main_18(out_Output_Remap1_13);
	    vec4 out_Output_Split4_5 = c_Split4_main_5(cc_time);
	    float out_x_Split4_5 = out_Output_Split4_5.x;
	    float out_Output_Mul1_4 = c_Mul1_main_4(Speed, out_x_Split4_5);
	    float out_Output_NoiseGradient_7 = c_NoiseGradient_main_7(v_uv0, Scale);
	    float out_Output_Add1_9 = c_Add1_main_9(out_Output_NoiseGradient_7, out_Output_Mul1_4);
	    vec2 out_Output_1To2_11 = c_1To2_main_11(out_Output_Add1_9);
	    vec2 out_UV_UVTilingAndOffset_10 = c_UVTilingAndOffset_main_10(v_uv0, vec2(1.00000, 1.00000), out_Output_1To2_11);
	    vec4 out_Color_TextureToRGBA_16 = c_TextureToRGBA_main_16(out_UV_UVTilingAndOffset_10, Sub);
	    vec4 out_Output_Mul4_19 = c_Mul4_main_19(out_Output_1To4_18, out_Color_TextureToRGBA_16);
	    vec4 out_Output_Split4_22 = c_Split4_main_22(out_Output_Mul4_19);
	    float out_x_Split4_22 = out_Output_Split4_22.x;
	    vec2 out_Output_2To2_25 = c_2To2_main_25(out_x_Split4_22, 0.00000);
	    vec2 out_UV_UVTilingAndOffset_21 = c_UVTilingAndOffset_main_21(out_Output_2To2_25, vec2(1.00000, 1.00000), v_uv0);
	    vec4 out_Color_TextureToRGBA_26 = c_TextureToRGBA_main_26(out_UV_UVTilingAndOffset_21, texture);
	    gl_FragColor = c_Output_main_1(out_Color_TextureToRGBA_26);
	}                                              
	
}%
        