
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          Size: 
            value: 16.378
          Scale: 
            value: 1.634
          Edge: 
            value: 0.392
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		float Size;
		float Scale;
		float Edge;
	};

    vec2 c_UV0_main_5() {
	    return v_uv0;
	}
	vec4 c_TextureToRGBA_main_3(vec2 UV, sampler2D Texture) {
	    return texture2D(Texture, UV);
	}
	vec2 c_1To2_main_32(float Input) {
	    return vec2(Input);
	}
	vec2 c_UVTilingAndOffset_main_30(vec2 UV, vec2 Tiling, vec2 Offset) {
	    return UV * Tiling + Offset;
	}
	float c_NoiseSimple_f_noise_randomValue_4(vec2 UV) { 
	    return fract(sin(dot(UV, vec2(12.9898, 78.233)))*43758.5453); 
	}
	float c_NoiseSimple_f_noise_interpolate_4(float a, float b, float t) { 
	    return (1.0 - t) * a + (t * b);
	 }
	float c_NoiseSimple_f_value_noise_4(vec2 UV) { 
	vec2 i = floor(UV); 
	vec2 f = fract(UV); 
	f = f * f * (3.0 - 2.0 * f); 
	UV = abs(fract(UV) - 0.5); 
	vec2 c0 = i + vec2(0.0, 0.0); 
	vec2 c1 = i + vec2(1.0, 0.0); 
	vec2 c2 = i + vec2(0.0, 1.0); 
	vec2 c3 = i + vec2(1.0, 1.0); 
	float r0 = c_NoiseSimple_f_noise_randomValue_4(c0); 
	float r1 = c_NoiseSimple_f_noise_randomValue_4(c1); 
	float r2 = c_NoiseSimple_f_noise_randomValue_4(c2); 
	float r3 = c_NoiseSimple_f_noise_randomValue_4(c3); 
	float bottomOfGrid = c_NoiseSimple_f_noise_interpolate_4(r0, r1, f.x); 
	float topOfGrid = c_NoiseSimple_f_noise_interpolate_4(r2, r3, f.x); 
	float t = c_NoiseSimple_f_noise_interpolate_4(bottomOfGrid, topOfGrid, f.y); 
	return t; 
	 }
	float c_NoiseSimple_main_4(vec2 UV, float Scale) {
	   float t = 0.0;
	   float freq = pow(2.0, 0.0);
	   float amp = pow(0.5, 3.0);
	   t += c_NoiseSimple_f_value_noise_4(vec2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;
	   freq = pow(2.0, 1.0);
	   amp = pow(0.5, 2.0);
	   t += c_NoiseSimple_f_value_noise_4(vec2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;
	   freq = pow(2.0, 2.0);
	   amp = pow(0.5, 1.0);
	   t += c_NoiseSimple_f_value_noise_4(vec2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;
	   return t;
	}
	float c_Step1_main_7(float Input, float Edge) {
	    return step(Edge, Input);
	}
	float c_Mul1_main_9(float InputA, float InputB) {
	    return (InputA * InputB);
	}
	vec4 c_1To4_main_11(float Input) {
	    return vec4(Input);
	}
	vec4 c_Mul4_main_12(vec4 InputA, vec4 InputB) {
	    return (InputA * InputB);
	}
	float c_Complement1_main_13(float Input) {
	    return (1.0 - Input);
	}
	float c_Mul1_main_14(float InputA, float InputB) {
	    return (InputA * InputB);
	}
	vec4 c_1To4_main_19(float Input) {
	    return vec4(Input);
	}
	vec4 c_Add4_main_20(vec4 InputA, vec4 InputB) {
	    return (InputA + InputB);
	}
	vec4 c_Output_main_1(vec4 Color) { 
	    return Color; 
	}
	void main()                                    
	{                                              
	    vec2 out_UV_UV0_5 = c_UV0_main_5();
	    vec4 out_Color_TextureToRGBA_3 = c_TextureToRGBA_main_3(out_UV_UV0_5, texture);
	    float out_a_TextureToRGBA_3 = out_Color_TextureToRGBA_3.a;
	    vec2 out_Output_1To2_32 = c_1To2_main_32(Scale);
	    vec2 out_UV_UVTilingAndOffset_30 = c_UVTilingAndOffset_main_30(out_UV_UV0_5, out_Output_1To2_32, v_uv0);
	    float out_Output_NoiseSimple_4 = c_NoiseSimple_main_4(out_UV_UVTilingAndOffset_30, Size);
	    float out_Output_Step1_7 = c_Step1_main_7(out_Output_NoiseSimple_4, Edge);
	    float out_Output_Mul1_9 = c_Mul1_main_9(out_Output_Step1_7, out_a_TextureToRGBA_3);
	    vec4 out_Output_1To4_11 = c_1To4_main_11(out_Output_Mul1_9);
	    vec4 out_Output_Mul4_12 = c_Mul4_main_12(out_Color_TextureToRGBA_3, out_Output_1To4_11);
	    float out_Output_Complement1_13 = c_Complement1_main_13(out_Output_Mul1_9);
	    float out_Output_Mul1_14 = c_Mul1_main_14(out_a_TextureToRGBA_3, out_Output_Complement1_13);
	    vec4 out_Output_1To4_19 = c_1To4_main_19(out_Output_Mul1_14);
	    vec4 out_Output_Add4_20 = c_Add4_main_20(out_Output_Mul4_12, out_Output_1To4_19);
	    gl_FragColor = c_Output_main_1(out_Output_Add4_20);
	}                                              
	
}%
        