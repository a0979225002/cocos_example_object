// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  void main () {

    float v = 0.0+(10.0*0.7);
     vec4 sum = vec4(0);
     vec2 offset = vec2(0.0);
     vec2 u_normalizred_resolution = vec2(1.0 / 1560.0 , 1.0 / 960.0 * 5.0);
     float u_intensity = 0.5;
    //  offset = u_normalizred_resolution * vec2(-v -v) * u_intensity;
     sum += texture2D(texture, v_uv0 + offset) * v_color;
     offset = u_normalizred_resolution * vec2(0.0, -v) * u_intensity;
     sum += texture2D(texture, v_uv0 + offset) * v_color;
     offset = u_normalizred_resolution * vec2(0.0, -v) * u_intensity;
     sum += texture2D(texture, v_uv0 + offset) * v_color;
     offset = u_normalizred_resolution * vec2(0.0, 0.0) * u_intensity;
     sum += texture2D(texture, v_uv0 + offset) * v_color;
     offset = u_normalizred_resolution * vec2(0.0, 0.0) * u_intensity;
     sum += texture2D(texture, v_uv0 + offset) * v_color;
     offset = u_normalizred_resolution * vec2(0.0, 0.0) * u_intensity;
     sum += texture2D(texture, v_uv0 + offset) * v_color;
     offset = u_normalizred_resolution * vec2(0.0, v) * u_intensity;
     sum += texture2D(texture, v_uv0 + offset) * v_color;
     offset = u_normalizred_resolution * vec2(0.0, v) * u_intensity;
     sum += texture2D(texture, v_uv0 + offset) * v_color;
     offset = u_normalizred_resolution * vec2(0.0, v) * u_intensity;
     sum += texture2D(texture, v_uv0 + offset) * v_color;
     gl_FragColor = vec4((sum / 9.0).rgb, texture2D(texture, v_uv0).a);
  }
}%
