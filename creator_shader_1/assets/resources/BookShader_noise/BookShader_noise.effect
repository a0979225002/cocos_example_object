// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: {  value: white }
        texture2: {  value: white }
        u_time: {value: 1}
        u_mouse: {value: [1.0, 1.0]}
}%


CCProgram vs %{
precision highp float;

#include <cc-global>
#include <cc-local>

attribute vec3 a_position;
attribute lowp vec4 a_color;
attribute mediump vec2 a_uv0;

varying mediump vec2 v_uv0;
varying lowp vec4 v_color;
varying lowp vec4 v_wp;

 void main () {
   mat4 mvp;
   mvp = cc_matViewProj;
   v_color = a_color;
   gl_Position = mvp * vec4(a_position, 1);
   v_wp = cc_matWorld * vec4(a_position, 1);

   v_uv0 = a_uv0;
 }

}%


CCProgram fs %{
precision mediump float;

uniform sampler2D texture;
uniform sampler2D texture2;

uniform Constants1 {
  vec2 u_mouse;
  float u_time;
};

varying mediump vec2 v_uv0;
varying lowp vec4 v_color;
varying lowp vec4 v_wp;


#define resolution vec2(960.,640.)
#define u_resolution resolution
#define time u_time
#define iResolution resolution
#define iTime time

#define fragColor gl_FragColor
#define fragCoord gl_FragCoord
#define iMouse u_mouse

 float box(in vec2 _st, in vec2 _pos,in vec2 _size){
   vec2 ret = step(_pos,_st);
   ret *= step(_st,_pos + _size);
   return ret.x * ret.y;
 }

 float cross1(in vec2 _st, in vec2 _pos,in vec2 _size){
   return  box(
               _st,
               vec2(_pos.x + _size.x / 3.,_pos.y),
               vec2(_size.x / 3.,_size.y)
               )
     +
     box(
         _st,
         vec2(_pos.x,_pos.y + _size.x / 3.),
         vec2(_size.y,_size.x / 3.)
         )
     ;
 }
#define PI 3.14159265358979323846

 vec2 rotate2D(vec2 _st, float _angle){
   _st -= 0.5;
   _st =  mat2(cos(_angle),-sin(_angle),
               sin(_angle),cos(_angle)) * _st;
   _st += 0.5;
   return _st;
 }

 vec2 tile(vec2 _st, float _zoom){
   _st *= _zoom;
   return fract(_st);
 }

 float box(vec2 _st, vec2 _size, float _smoothEdges){
   _size = vec2(0.5)-_size*0.5;
   vec2 aa = vec2(_smoothEdges*0.5);
   vec2 uv = smoothstep(_size,_size+aa,_st);
   uv *= smoothstep(_size,_size+aa,vec2(1.0)-_st);
   return uv.x*uv.y;
 }

 float random (vec2 st) {    //亂數範圍 [0,1]
   return fract(sin(dot(st.xy,
                        vec2(12.9898,78.233)))*
                43758.5453123);
 }

 float circle(in vec2 _st, in float _radius){
   vec2 l = _st-vec2(0.5);
   return 1.-smoothstep(_radius-(_radius*0.01),
                        _radius+(_radius*0.01),
                        dot(l,l)*4.0);
 }


 vec2 brickTile(vec2 _st, float _zoom){
   _st *= _zoom;

   // Here is where the offset is happening
   _st.x += step(1., mod(_st.y,2.0)) * -u_time;
   vec2 temp = _st;
   _st = fract(_st);
   _st = rotate2D(_st,PI* -u_time * step(1., mod(temp.y,2.0)));
   return _st; 
 }

 vec2 truchetPattern(in vec2 _st, in float _index){
    _index = fract(((_index-0.5)*2.0));
    if (_index > 0.75) {
        _st = vec2(1.0) - _st;
    } else if (_index > 0.5) {
        _st = vec2(1.0-_st.x,_st.y);
    } else if (_index > 0.25) {
        _st = 1.0-vec2(1.0-_st.x,_st.y);
    }
    return _st;
}
 ////////////////////////////////////////////////////////////////////////////////////////
 float hash1(vec2 p)			//亂數範圍 [-1,1]
 {
   p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));
   return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );
 }

 vec2 hash2( vec2 x )			//亂數範圍 [-1,1]
 {
   const vec2 k = vec2( 0.3183099, 0.3678794 );
   x = x*k + k.yx;
   return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );
 }

 float gnoise( in vec2 p )		//亂數範圍 [-1,1]
 {
   p += u_time * .1;
   vec2 i = floor( p );
   vec2 f = fract( p );
	
   vec2 u = f*f*(3.0-2.0*f);

   return mix( mix( dot( hash2( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), 
                    dot( hash2( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),
               mix( dot( hash2( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), 
                    dot( hash2( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);}

 float noise( in vec2 p )		//亂數範圍 [-1,1]
 {
   // return 0.;
   return gnoise(p);	//gradient noise
 }

 float rrr(vec2 st){
   return fract(sin(dot(st.xy,
                        vec2(12.9898,78.233)))*
                43758.5453123 );
 }

#define MYUV vec2 uv = vec2(1. - v_uv0.x,v_uv0.y);vec2 st = uv;
#define OCTAVES 6
 float fbm (in vec2 st) {
   // Initial values
   float value = 0.0;
   float amplitude = .5;
   float frequency = 0.;
   //
   // Loop of octaves
   for (int i = 0; i < OCTAVES; i++) {
     value += amplitude * noise(st);
     st *= 2.;
     amplitude *= .5;
   }
   return value;
 }

vec2 random2( vec2 p ) {
    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);
}

 float Remap(float a, float b, float c, float d, float t) {
   return ((t-a)/(b-a))*(d-c)+c;
 }
 
#if MAIN_1
void main() {
  MYUV;
    vec3 color = vec3(.0);
    vec2 posarr[5];
    posarr[0] = vec2(0.1,0.8);
    posarr[1] = vec2(0.3,0.3);
    posarr[2] = vec2(0.5,0.6);
    posarr[3] = vec2(0.9,0.7);
    posarr[4] = u_mouse/u_resolution;

    float mindis = 100.;
    mindis = min(mindis, distance(posarr[0],uv));
    mindis = min(mindis, distance(posarr[1],uv));
    mindis = min(mindis, distance(posarr[2],uv));
    mindis = min(mindis, distance(posarr[3],uv));
    mindis = min(mindis, distance(posarr[4],uv));

    color = vec3(mindis);

    color += 1. - step(.01,mindis);
    gl_FragColor = vec4(color,1.0);
}
 #elif MAIN_2
 void main() {
   MYUV;
   vec3 color = vec3(0.0);
   uv *= 10.;

   vec2 i_uv = floor(uv);
   vec2 f_uv = fract( uv );
   vec2 pointInTile = random2(i_uv);
   float dis = distance( pointInTile, f_uv );
   color = vec3(dis);

   color += step(dis,.02);
   gl_FragColor = vec4(color,1.);
 }

 #else
 void main() {
   MYUV;
   vec3 color = vec3(0.0);
   const int tileNum = 3;
   uv *= float(tileNum);

   vec2 i_uv = floor(uv);
   vec2 f_uv = fract( uv );
   vec2 pointInTile = random2(i_uv);
   vec2 savepoint;
   float dis = 100.;
   for(int i = -1; i <= 1; i++) {
     for(int j = -1; j <= 1; j++) {
       vec2 neighbor = vec2(float(i),float(j));
       vec2 point = random2(i_uv+neighbor);
       point = 1. + sin(u_time + 3.*point);
       point *= .5;
       float curdis = distance(f_uv,point+neighbor);
       if( curdis < dis){
         dis = curdis;
         savepoint = point + neighbor;
       }
       // dis = min(dis,distance(f_uv,point+neighbor));
     }
   }

   color = vec3(dis);
   color += step(dis,.02);
   // color -= abs(sin(u_time)) * .7;
   color.r += step(.98, f_uv.x) + step(.98, f_uv.y);

   //color.gb = savepoint;
   //color.gb *= 0.;
   gl_FragColor = vec4(color,1.);
 }
 #endif
}%
