// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: {  value: white }
        texture2: {  value: white }
        u_time: {value: 1}
        u_mouse: {value: [1.0, 1.0]}
}%


CCProgram vs %{
precision highp float;

#include <cc-global>
#include <cc-local>

attribute vec3 a_position;
attribute lowp vec4 a_color;
attribute mediump vec2 a_uv0;

varying mediump vec2 v_uv0;
varying lowp vec4 v_color;
varying lowp vec4 v_wp;

 void main () {
   mat4 mvp;
   mvp = cc_matViewProj;
   v_color = a_color;
   gl_Position = mvp * vec4(a_position, 1);
   v_wp = cc_matWorld * vec4(a_position, 1);

   v_uv0 = a_uv0;
 }

}%


CCProgram fs %{
precision mediump float;

uniform sampler2D texture;
uniform sampler2D texture2;

uniform Constants1 {
  vec2 u_mouse;
  float u_time;
};

varying mediump vec2 v_uv0;
varying lowp vec4 v_color;
varying lowp vec4 v_wp;


#define resolution vec2(960.,640.)
#define u_resolution resolution
#define time u_time
#define iResolution resolution
#define iTime time
#define fragColor gl_FragColor
#define fragCoord gl_FragCoord
#define iMouse u_mouse
#define PI 3.14159265358979323846
#define MYUV vec2 uv = vec2(1. - v_uv0.x,v_uv0.y);vec2 st = uv;
#define OCTAVES 6


// Shadertoy backbuffer emulation
#define iChannel0 backbuffer

// --------[ Original ShaderToy begins here ]---------- //
//#define COLOR vec3(0.1, 0.2, 1.)
#define COLOR (sin(time*vec3(.345, .456, .657))*.4+.6)
#define OFFSET vec2(0.5*cos(0.5*time-sin(time*0.5)), 0.5*sin(0.5*time+cos(time*0.75)))

float saturate(float x){
    return clamp(x,0.0,1.0);
}

vec3 CenterLight(vec2 p){
    p -= OFFSET;
    p *= 12.;
 	float l = 1. / dot(p, p);
    return l*l * COLOR;
}
vec3 Straws(vec2 p){
    p -= OFFSET;
	float a = atan(p.y, p.x);
    float d = dot(p,p);
    
    float l = saturate(1.-length(p));
    
    l *= 0.5 + 0.5*sin(a*50.+d*5.+sin(time*1.)*20.);
    
    l *= 0.5 + 0.3 * sin(d*10.+a*10.-time*5.);
    return l*l*COLOR;
}
vec3 Lights(vec2 p){
    p -= OFFSET;
    
    float res = 0.0;
    
    for(float i = 0.; i < 500.; ++i){
        float t = time + i*i;
        
        vec2 q = p + vec2(cos(t), sin(t)) * sin(i*11.+time*0.5);
        float l = 0.0003 / pow(length(q), 1.5);
        
        res += l;
    }
    
    res = res*res;
    
    return res * COLOR;
}

void mainImage(  )
{
    vec2 uvs = fragCoord.xy/iResolution.xy;
    vec2 uv = (fragCoord.xy*2.-iResolution.xy)/iResolution.y;

    vec3 col = vec3(0.0);
    
    vec2 p = uv;
    
    col += CenterLight(p);
 	col += Straws(p);
    col += Lights(p);
    
    col = max(min(vec3(1.0), col), vec3(0.0));
    vec3 newFrame = pow(col, vec3(1./0.8));
    vec3 oldFrame = vec3(.0);
    fragColor = vec4(newFrame + oldFrame,1.0)*0.85;
}
// --------[ Original ShaderToy ends here ]---------- //

void main()
{
    mainImage();
}
}%
