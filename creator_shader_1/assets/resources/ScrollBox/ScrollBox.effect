// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: {  value: white }
        texture2: {  value: white }
        u_time: {value: 1}
        u_Position: {value: [1, 1,0, 0]}
        u_Radius: {value: 1}
        u_Vague: {value: 1}
}%


CCProgram vs %{
precision highp float;

#include <cc-global>
#include <cc-local>

attribute vec3 a_position;
attribute lowp vec4 a_color;
attribute mediump vec2 a_uv0;

varying mediump vec2 v_uv0;
varying lowp vec4 v_color;
varying lowp vec4 v_wp;

 void main () {
   mat4 mvp;
  
   mvp = cc_matViewProj;
  
   v_color = a_color;

   gl_Position = mvp * vec4(a_position, 1);   
   v_wp = cc_matWorld * vec4(a_position, 1);

   // vec4 pos = vec4(a_position, 1);

   //   #if CC_USE_MODEL
   //   pos = cc_matViewProj * cc_matWorld * pos;
   //   #else
   //   pos = cc_matViewProj * pos;
   //   #endif

#if USE_TEXTURE
   v_uv0 = a_uv0;
#endif

   //   v_color = a_color;

   //   gl_Position = pos;
 }

}%


CCProgram fs %{
precision mediump float;

uniform sampler2D texture;
uniform sampler2D texture2;

uniform Constants1 {
  vec4 u_Position;
  float u_Radius;
  float u_time;
  float u_Vague;
};

varying mediump vec2 v_uv0;
varying lowp vec4 v_color;
varying lowp vec4 v_wp;

#define u_resolution vec2(960.,640.)

 float box(in vec2 _st, in vec2 _pos,in vec2 _size){
   vec2 ret = step(_pos,_st);
   ret *= step(_st,_pos + _size);
   return ret.x * ret.y;
 }

 float cross1(in vec2 _st, in vec2 _pos,in vec2 _size){
   return  box(
               _st,
               vec2(_pos.x + _size.x / 3.,_pos.y),
               vec2(_size.x / 3.,_size.y)
               )
     +
     box(
         _st,
         vec2(_pos.x,_pos.y + _size.x / 3.),
         vec2(_size.y,_size.x / 3.)
         )
     ;
 }
#define PI 3.14159265358979323846

 vec2 rotate2D(vec2 _st, float _angle){
   _st -= 0.5;
   _st =  mat2(cos(_angle),-sin(_angle),
               sin(_angle),cos(_angle)) * _st;
   _st += 0.5;
   return _st;
 }

 vec2 tile(vec2 _st, float _zoom){
   _st *= _zoom;
   return fract(_st);
 }

 float box(vec2 _st, vec2 _size, float _smoothEdges){
   _size = vec2(0.5)-_size*0.5;
   vec2 aa = vec2(_smoothEdges*0.5);
   vec2 uv = smoothstep(_size,_size+aa,_st);
   uv *= smoothstep(_size,_size+aa,vec2(1.0)-_st);
   return uv.x*uv.y;
 }

 float random (vec2 st) {    //亂數範圍 [0,1]
   return fract(sin(dot(st.xy,
                        vec2(12.9898,78.233)))*
                43758.5453123);
 }

 float circle(in vec2 _st, in float _radius){
   vec2 l = _st-vec2(0.5);
   return 1.-smoothstep(_radius-(_radius*0.01),
                        _radius+(_radius*0.01),
                        dot(l,l)*4.0);
 }


 vec2 brickTile(vec2 _st, float _zoom){
   _st *= _zoom;

   // Here is where the offset is happening
   _st.x += step(1., mod(_st.y,2.0)) * -u_time;
   _st.x += step(mod(_st.y,2.0),1. ) * u_time;
   vec2 temp = _st;
   _st = fract(_st);
   _st = rotate2D(_st,PI* -u_time * step(1., mod(temp.y,2.0)));
   return _st;
 }

 void main(void){
   vec2 st = gl_FragCoord.xy/u_resolution.xy;
   st.x *= u_resolution.x/u_resolution.y;

   vec3 color = vec3(0.0);
   vec2 temp = st;

   // Modern metric brick of 215mm x 102.5mm x 65mm
   // http://www.jaharrison.me.uk/Brickwork/Sizes.html
   // st /= vec2(2.15,0.65)/1.5;

   // Apply the brick tiling
   st = brickTile(st,5.0);

   color = vec3(box(st,vec2(0.9),0.01));

   // Uncomment to see the space coordinates
   // color = vec3(st,0.0);

   gl_FragColor = vec4(color,1.0);
 }

}%
