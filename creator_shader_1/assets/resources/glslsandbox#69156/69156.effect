// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: {  value: white }
        texture2: {  value: white }
        u_time: {value: 1}
        u_Position: {value: [1, 1,0, 0]}
        u_Radius: {value: 1}
        u_Vague: {value: 1}
}%


CCProgram vs %{
precision highp float;

#include <cc-global>
#include <cc-local>

attribute vec3 a_position;
attribute lowp vec4 a_color;
attribute mediump vec2 a_uv0;

varying mediump vec2 v_uv0;
varying lowp vec4 v_color;
varying lowp vec4 v_wp;

void main () {
  mat4 mvp;
  
  mvp = cc_matViewProj;
  
  v_color = a_color;

  gl_Position = mvp * vec4(a_position, 1);   
  v_wp = cc_matWorld * vec4(a_position, 1);

  // vec4 pos = vec4(a_position, 1);

  //   #if CC_USE_MODEL
  //   pos = cc_matViewProj * cc_matWorld * pos;
  //   #else
  //   pos = cc_matViewProj * pos;
  //   #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

  //   v_color = a_color;

  //   gl_Position = pos;
}

}%


CCProgram fs %{
precision mediump float;

uniform sampler2D texture;
uniform sampler2D texture2;

uniform Constants1 {
  vec4 u_Position;
  float u_Radius;
  float u_time;
  float u_Vague;
};

varying mediump vec2 v_uv0;
varying lowp vec4 v_color;
varying lowp vec4 v_wp;

#define resolution vec2(960.,640.)
#define time u_time


void main( void ) {
	float dist = .1;
	float radius = .2;
	
	vec3 col = vec3(0.01, -0.05, 0.05);
	vec2 centr = 2.0 * (gl_FragCoord.xy * 2.0 - resolution) /
		min(resolution.x, resolution.y);
	
	for(float i = 0.0; i < 50.0; i++)
	{
		float t1 = 1.0 + 0.01 * i;
		float t2 = 1.0 - 0.01 * i;
		float si = sin(time*t1 + i * dist) / 0.5;
		float co = cos(time*t2 + i * dist) * 0.5;
		float hue = i * 0.1 + time * 0.1;
		float third = 3.14159 / 1.5;

		vec3 Color = vec3(0.5 + 0.5 * sin(hue-third), 0.5 + 0.5 * sin(hue), 0.5 + 0.5 * sin(hue+third)) * 2.0 * (1.0+sin(time*t1*4.43534));
		
	  col += Color * 0.0032469 / abs(length(centr + vec2(si , co * si )) - radius);
	}

	
	gl_FragColor = vec4(col, 1.0);
}
}%
