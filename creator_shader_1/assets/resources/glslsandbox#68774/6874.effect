// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: {  value: white }
        texture2: {  value: white }
        u_time: {value: 1}
        u_Position: {value: [1, 1,0, 0]}
        u_Radius: {value: 1}
        u_Vague: {value: 1}
}%


CCProgram vs %{
precision highp float;

#include <cc-global>
#include <cc-local>

attribute vec3 a_position;
attribute lowp vec4 a_color;
attribute mediump vec2 a_uv0;

varying mediump vec2 v_uv0;
varying lowp vec4 v_color;
varying lowp vec4 v_wp;

void main () {
  mat4 mvp;
  
  mvp = cc_matViewProj;
  
  v_color = a_color;

  gl_Position = mvp * vec4(a_position, 1);   
  v_wp = cc_matWorld * vec4(a_position, 1);

  // vec4 pos = vec4(a_position, 1);

  //   #if CC_USE_MODEL
  //   pos = cc_matViewProj * cc_matWorld * pos;
  //   #else
  //   pos = cc_matViewProj * pos;
  //   #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

  //   v_color = a_color;

  //   gl_Position = pos;
}

}%


CCProgram fs %{
precision mediump float;

uniform sampler2D texture;
uniform sampler2D texture2;

uniform Constants1 {
  vec4 u_Position;
  float u_Radius;
  float u_time;
  float u_Vague;
};

varying mediump vec2 v_uv0;
varying lowp vec4 v_color;
varying lowp vec4 v_wp;

#define resolution vec2(960.,640.)
#define time u_time


// shadertoy emulation
#define iTime time
#define iResolution resolution

// --------[ Original ShaderToy begins here ]---------- //
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 col = vec2(0.);
    float t = iTime*.1;
    vec2 uv = (fragCoord-iResolution.xy)/iResolution.y+vec2(t,t*2.0);
    float factor = 1.5;
    vec2 v1;
    for(int i=0;i<12;i++)
    {
        uv *= -factor*factor;
        v1 = uv.yx/factor;
        uv += sin(v1+col+t*10.0)/factor;
        col += vec2(sin(uv.x-uv.y+v1.x-col.y),sin(uv.y-uv.x+v1.y-col.x));
    }
    fragColor = vec4(vec3(col.x+4.0,col.x-col.y/2.0,col.x/5.0)/2.0,1.0);
}
// --------[ Original ShaderToy ends here ]---------- //

void main(void)
{
    mainImage(gl_FragColor, gl_FragCoord.xy);
}
}%
