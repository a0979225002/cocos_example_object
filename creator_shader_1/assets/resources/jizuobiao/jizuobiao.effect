// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: {  value: white }
        texture2: {  value: white }
        u_time: {value: 1}
        u_Position: {value: [1, 1,0, 0]}
        u_Radius: {value: 1}
        u_mouse: {value: [1.0, 1.0]}
        u_Vague: {value: 1}
}%


CCProgram vs %{
precision highp float;

#include <cc-global>
#include <cc-local>

attribute vec3 a_position;
attribute lowp vec4 a_color;
attribute mediump vec2 a_uv0;

varying mediump vec2 v_uv0;
varying lowp vec4 v_color;
varying lowp vec4 v_wp;

 void main () {
   mat4 mvp;
  
   mvp = cc_matViewProj;
  
   v_color = a_color;

   gl_Position = mvp * vec4(a_position, 1);   
   v_wp = cc_matWorld * vec4(a_position, 1);

   // vec4 pos = vec4(a_position, 1);

   //   #if CC_USE_MODEL
   //   pos = cc_matViewProj * cc_matWorld * pos;
   //   #else
   //   pos = cc_matViewProj * pos;
   //   #endif

#if USE_TEXTURE
   v_uv0 = a_uv0;
#endif

   //   v_color = a_color;

   //   gl_Position = pos;
 }

}%


CCProgram fs %{
precision mediump float;

uniform sampler2D texture;
uniform sampler2D texture2;

uniform Constants1 {
  vec4 u_Position;
  vec2 u_mouse;
  float u_Radius;
  float u_time;
  float u_Vague;
};

varying mediump vec2 v_uv0;
varying lowp vec4 v_color;
varying lowp vec4 v_wp;


#define resolution vec2(960.,640.)
#define u_resolution resolution
#define time u_time
#define iResolution resolution
#define iTime time

#define fragColor gl_FragColor
#define fragCoord gl_FragCoord
#define iMouse u_mouse

#define PI 3.14159265358979323846

 void main() {
   // Normalized pixel coordinates (from 0 to 1)
   vec2 uv = fragCoord.xy/iResolution.xy;
   uv = (uv - 0.5) * 2.;
   float v = atan(uv.y, uv.x);
   float r = length(uv);

   // Output to screen
   // v = (v + PI) / 2. / PI;

   float f = cos(atan(uv.y, uv.x)*3.);

   // 逆时针旋转90度
   v -= 0.25;
   v = mod(v,1.);

   vec3 color = vec3( 1.-smoothstep(f,f+0.02,r) );

   gl_FragColor = vec4(color, 1.0);
 }
}%
