// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: {  value: white }
        u_resolution: {value: [0, 0]}
        u_time: {value: 1}
        u_Position: {value: [1, 1,0, 0]}
        u_Radius: {value: 1}
        u_Vague: {value: 1}
}%


CCProgram vs %{
precision highp float;

#include <cc-global>
#include <cc-local>

attribute vec3 a_position;
attribute lowp vec4 a_color;
attribute mediump vec2 a_uv0;

varying mediump vec2 v_uv0;
varying lowp vec4 v_color;
varying lowp vec4 v_wp;

void main () {
  mat4 mvp;
  
  mvp = cc_matViewProj;
  
  v_color = a_color;

  gl_Position = mvp * vec4(a_position, 1);   
  v_wp = cc_matWorld * vec4(a_position, 1);

  // vec4 pos = vec4(a_position, 1);

  //   #if CC_USE_MODEL
  //   pos = cc_matViewProj * cc_matWorld * pos;
  //   #else
  //   pos = cc_matViewProj * pos;
  //   #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

  //   v_color = a_color;

  //   gl_Position = pos;
}

}%


CCProgram fs %{
  
  //   precision highp float;
  
  // #include <alpha-test>
  // #include <texture>

  // in vec4 v_color;

  // #if USE_TEXTURE
  // in vec2 v_uv0;
  // uniform sampler2D texture;
  // #endif

  // void main () {
  //   vec4 o = vec4(1, 1, 1, 1);

  //   #if USE_TEXTURE
  //     CCTexture(texture, v_uv0, o);
  //   #endif

  //   o *= v_color;

  //   ALPHA_TEST(o);

  //   gl_FragColor = o;
  // }

precision mediump float;

uniform sampler2D texture;

uniform Constants1 {
  vec2 u_resolution;
  float u_Radius;
  float u_time;
  vec4 u_Position;
  float u_Vague;
};

varying mediump vec2 v_uv0;
varying lowp vec4 v_color;
varying lowp vec4 v_wp;

vec4 lerp(vec4 a, vec4 b, float w) {
  return a + w*(b-a);
}

float saturate(float x)
{
  return max(0.0, min(1.0, x));
}

void main () {
    // vec4 col = vec4(1.0, 1.0, 1.0, 1.);
    vec4 col = texture(texture, v_uv0);     
    float val = 0.299*col.r+0.578*col.g+0.114*col.b;    
    vec3 grayScale = vec3(val, val, val);  

    float d = saturate((u_Radius - distance(u_Position.xyz, v_wp.xyz)) / u_Vague);
    col = lerp(vec4(grayScale,1.0),col, d);
    gl_FragColor = col;
}

}%
