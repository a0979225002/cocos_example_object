
/**
* generate by lcc-framework
*/
var protocol = globalThis.lcc.protocol;
if(!protocol){
	protocol = {};
	globalThis.lcc.protocol = protocol;
}

protocol.PROTOTEST = 1000;

var enumMap = protocol.EnumTest;
if(!enumMap){
	enumMap = {};
	protocol.EnumTest = enumMap;
}
enumMap.ENUM1 = 0;
enumMap.ENUM2 = 1;
enumMap.ENUM3 = 2;



var pbMgr = globalThis.lcc.pbMgr;
// source: resources.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = globalThis.lcc.__jspb;
var goog = jspb;
var global = globalThis;

goog.exportSymbol('proto.resources.ExtendTest', null, global);
goog.exportSymbol('proto.resources.ProtoTest', null, global);
goog.exportSymbol('proto.resources.RefTest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.resources.RefTest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.resources.RefTest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.resources.RefTest.displayName = 'proto.resources.RefTest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.resources.ExtendTest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.resources.ExtendTest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.resources.ExtendTest.displayName = 'proto.resources.ExtendTest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.resources.ProtoTest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.resources.ProtoTest.repeatedFields_, null);
};
goog.inherits(proto.resources.ProtoTest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.resources.ProtoTest.displayName = 'proto.resources.ProtoTest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.resources.RefTest.prototype.toObject = function(opt_includeInstance) {
  return proto.resources.RefTest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.resources.RefTest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.resources.RefTest.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.resources.RefTest}
 */
proto.resources.RefTest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.resources.RefTest;
  return proto.resources.RefTest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.resources.RefTest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.resources.RefTest}
 */
proto.resources.RefTest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.resources.RefTest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.resources.RefTest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.resources.RefTest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.resources.RefTest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 value = 2;
 * @return {number}
 */
proto.resources.RefTest.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.resources.RefTest} returns this
 */
proto.resources.RefTest.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.resources.ExtendTest.prototype.toObject = function(opt_includeInstance) {
  return proto.resources.ExtendTest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.resources.ExtendTest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.resources.ExtendTest.toObject = function(includeInstance, msg) {
  var f, obj = {
    parent: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.resources.ExtendTest}
 */
proto.resources.ExtendTest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.resources.ExtendTest;
  return proto.resources.ExtendTest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.resources.ExtendTest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.resources.ExtendTest}
 */
proto.resources.ExtendTest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setParent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.resources.ExtendTest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.resources.ExtendTest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.resources.ExtendTest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.resources.ExtendTest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string parent = 2;
 * @return {string}
 */
proto.resources.ExtendTest.prototype.getParent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.resources.ExtendTest} returns this
 */
proto.resources.ExtendTest.prototype.setParent = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.resources.ProtoTest.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.resources.ProtoTest.prototype.toObject = function(opt_includeInstance) {
  return proto.resources.ProtoTest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.resources.ProtoTest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.resources.ProtoTest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_super: (f = msg.getSuper()) && proto.resources.ExtendTest.toObject(includeInstance, f),
    from: jspb.Message.getFieldWithDefault(msg, 2, ""),
    version: jspb.Message.getFieldWithDefault(msg, 3, 0),
    isclient: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    isserver: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    ref: (f = msg.getRef()) && proto.resources.RefTest.toObject(includeInstance, f),
    enumlistList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    enummapMap: (f = msg.getEnummapMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.resources.ProtoTest}
 */
proto.resources.ProtoTest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.resources.ProtoTest;
  return proto.resources.ProtoTest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.resources.ProtoTest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.resources.ProtoTest}
 */
proto.resources.ProtoTest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.resources.ExtendTest;
      reader.readMessage(value,proto.resources.ExtendTest.deserializeBinaryFromReader);
      msg.setSuper(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsclient(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsserver(value);
      break;
    case 6:
      var value = new proto.resources.RefTest;
      reader.readMessage(value,proto.resources.RefTest.deserializeBinaryFromReader);
      msg.setRef(value);
      break;
    case 7:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addEnumlist(values[i]);
      }
      break;
    case 8:
      var value = msg.getEnummapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32, null, "", 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.resources.ProtoTest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.resources.ProtoTest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.resources.ProtoTest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.resources.ProtoTest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuper();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.resources.ExtendTest.serializeBinaryToWriter
    );
  }
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getIsclient();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getIsserver();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getRef();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.resources.RefTest.serializeBinaryToWriter
    );
  }
  f = message.getEnumlistList();
  if (f.length > 0) {
    writer.writePackedInt32(
      7,
      f
    );
  }
  f = message.getEnummapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
};


/**
 * optional ExtendTest __super = 1;
 * @return {?proto.resources.ExtendTest}
 */
proto.resources.ProtoTest.prototype.getSuper = function() {
  return /** @type{?proto.resources.ExtendTest} */ (
    jspb.Message.getWrapperField(this, proto.resources.ExtendTest, 1));
};


/**
 * @param {?proto.resources.ExtendTest|undefined} value
 * @return {!proto.resources.ProtoTest} returns this
*/
proto.resources.ProtoTest.prototype.setSuper = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.resources.ProtoTest} returns this
 */
proto.resources.ProtoTest.prototype.clearSuper = function() {
  return this.setSuper(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.resources.ProtoTest.prototype.hasSuper = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string from = 2;
 * @return {string}
 */
proto.resources.ProtoTest.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.resources.ProtoTest} returns this
 */
proto.resources.ProtoTest.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 version = 3;
 * @return {number}
 */
proto.resources.ProtoTest.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.resources.ProtoTest} returns this
 */
proto.resources.ProtoTest.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool isClient = 4;
 * @return {boolean}
 */
proto.resources.ProtoTest.prototype.getIsclient = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.resources.ProtoTest} returns this
 */
proto.resources.ProtoTest.prototype.setIsclient = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool isServer = 5;
 * @return {boolean}
 */
proto.resources.ProtoTest.prototype.getIsserver = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.resources.ProtoTest} returns this
 */
proto.resources.ProtoTest.prototype.setIsserver = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional RefTest ref = 6;
 * @return {?proto.resources.RefTest}
 */
proto.resources.ProtoTest.prototype.getRef = function() {
  return /** @type{?proto.resources.RefTest} */ (
    jspb.Message.getWrapperField(this, proto.resources.RefTest, 6));
};


/**
 * @param {?proto.resources.RefTest|undefined} value
 * @return {!proto.resources.ProtoTest} returns this
*/
proto.resources.ProtoTest.prototype.setRef = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.resources.ProtoTest} returns this
 */
proto.resources.ProtoTest.prototype.clearRef = function() {
  return this.setRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.resources.ProtoTest.prototype.hasRef = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated int32 enumList = 7;
 * @return {!Array<number>}
 */
proto.resources.ProtoTest.prototype.getEnumlistList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.resources.ProtoTest} returns this
 */
proto.resources.ProtoTest.prototype.setEnumlistList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.resources.ProtoTest} returns this
 */
proto.resources.ProtoTest.prototype.addEnumlist = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.resources.ProtoTest} returns this
 */
proto.resources.ProtoTest.prototype.clearEnumlistList = function() {
  return this.setEnumlistList([]);
};


/**
 * map<string, int32> enumMap = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.resources.ProtoTest.prototype.getEnummapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.resources.ProtoTest} returns this
 */
proto.resources.ProtoTest.prototype.clearEnummapMap = function() {
  this.getEnummapMap().clear();
  return this;};


goog.object.extend(exports, proto.resources);

// message 'proto.resources.RefTest'
pbMgr.addMessagePacker('proto.resources.RefTest',{
	pack:function(data){
		var msg = new proto.resources.RefTest();
		if(data.value != null)msg.setValue(data.value);
		return msg;
	},
	unpack:function(msg){
		var data = {}
		data.value = msg.getValue();
		return data;
	}
},'resources');

// message 'proto.resources.ExtendTest'
pbMgr.addMessagePacker('proto.resources.ExtendTest',{
	pack:function(data){
		var msg = new proto.resources.ExtendTest();
		if(data.parent != null)msg.setParent(data.parent);
		return msg;
	},
	unpack:function(msg){
		var data = {}
		data.parent = msg.getParent();
		return data;
	}
},'resources');

// message 'proto.resources.ProtoTest'
pbMgr.addMessagePacker('proto.resources.ProtoTest',{
	pack:function(data){
		var msg = new proto.resources.ProtoTest();
		msg.setSuper(pbMgr.packMessage("proto.resources.ExtendTest", data));
		if(data.from != null)msg.setFrom(data.from);
		if(data.version != null)msg.setVersion(data.version);
		if(data.isClient != null)msg.setIsclient(data.isClient);
		if(data.isServer != null)msg.setIsserver(data.isServer);
		if(data.ref != null)msg.setRef(pbMgr.packMessage("proto.resources.RefTest", data.ref));
		if(data.enumList != null){
			for(var e of data.enumList){
				msg.addEnumlist(e)
			}
		}
		if(data.enumMap != null){
			var map = msg.getEnummapMap();
			for(var k in data.enumMap){
				var v = data.enumMap[k];
				map.set(k, v);
			}
		}
		return msg;
	},
	unpack:function(msg){
		var data = {}
		data = pbMgr.unpackMessage("proto.resources.ExtendTest", msg.getSuper());
		data.from = msg.getFrom();
		data.version = msg.getVersion();
		data.isClient = msg.getIsclient();
		data.isServer = msg.getIsserver();
		data.ref = pbMgr.unpackMessage('proto.resources.RefTest', msg.getRef());
		data.enumList = msg.getEnumlistList();
		var _map = {};
		var map = msg.getEnummapMap();
		for (var k of map.keys()){
			var v = map.get(k);
			_map[k] = v;
		}
		data.enumMap = _map;
		return data;
	}
},'resources');
// protocol '1000'
pbMgr.addProtocol(1000, 'proto.resources.ProtoTest', proto.resources.ProtoTest, 'resources');