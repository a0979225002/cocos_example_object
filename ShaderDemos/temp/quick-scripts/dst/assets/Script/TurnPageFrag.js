
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/TurnPageFrag.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '215f3EJr0ZPB7NfDgJ9xYCA', 'TurnPageFrag');
// Script/TurnPageFrag.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TurnPageFrag = /** @class */ (function () {
    function TurnPageFrag() {
    }
    TurnPageFrag.turnpage_vert = "\n    attribute vec4 a_position;\n    attribute vec2 a_texCoord;\n    attribute vec4 a_color;\n    varying vec2 v_texCoord;\n    varying vec4 v_fragmentColor;\n    void main()\n    {\n        gl_Position = CC_PMatrix * a_position;\n        v_fragmentColor = a_color;\n        v_texCoord = a_texCoord;\n    }\n    ";
    TurnPageFrag.turnpage_frag = "\n    uniform vec2 resolution;\n    uniform vec2 mouse;\n    varying vec2 v_texCoord;\n\n    const float pi = 3.14159;\n    const float twopi = 6.28319;\n\n    const float e0 = 0.018;\n    const float ppow = 2.0;\n\n    const float bcolorMix = 0.67;\n    const float maxBcolVal = 0.4;\n\n    const float diffint = 1.2;\n    const float ambientt = 0.1;\n    const float ambientb = 0.4;\n\n    const vec2 specpos = vec2(0.85, -0.2);\n    const float specpow = 5.;\n    const float specwidth = 0.4;\n    const float specint = 0.6;\n\n    const vec2 shadowoffset = vec2(0.07, -0.04);\n    const float shadowsmoothness = 0.012;\n    const float shadowint = 0.25;\n\n    const float aawidth = 0.7;\n    const int aasamples = 3;\n\n    const bool showpoints = false;\n    const bool colors = false;\n    const bool anim = true;\n\n    // #define swap_x\n    // Simple \"random\" function\n    float random(float co)\n    {\n        return fract(sin(co*12.989) * 43758.545);\n    }\n\n    vec4 getPagebackColor()\n    {\n        \n        float cn = 1.;\n        vec4 pagebackColor;\n        pagebackColor.r = maxBcolVal*random(cn + 263.714);\n        pagebackColor.g = maxBcolVal*random(cn*4. - 151.894);\n        pagebackColor.b = maxBcolVal*random(cn*7. + 87.548);\n        pagebackColor.a = 1.0;\n        return pagebackColor;\n    }\n\n    vec2 rotateVec(vec2 vect, float angle)\n    {\n        float xr = vect.x*cos(angle) + vect.y*sin(angle);\n        float yr = vect.x*sin(angle) - vect.y*cos(angle);\n        return vec2(xr, yr);\n    }\n\n    // Curl function on the axis bottom left corner - corner of the sheet\n    float pageFunction(float x, float e)\n    {\n        return pow(pow(x, ppow) - e, 1./ppow);\n    }\n\n    // Derivate of the curl function for light calculations\n    float pageFunctionDer(float x, float e)\n    {\n        return pow(x, ppow - 1.)/pow(pow(x, ppow) - e, (ppow - 1.)/ppow);\n    }\n\n    vec4 turnPage(vec2 fragCoord)\n    {\n        // General calculations\n        vec2 uv = v_texCoord.xy ;//fragCoord.xy / resolution.yy;\n        float ratio = resolution.x/resolution.y;\n        \n        // As long as one doesn't click on the canvas, the animation runs\n        vec2 mpoint;\n        bool firstcycle;\n        \n        vec2 Mouse2 = mouse;\n        #ifdef swap_x\n        Mouse2.x = resolution.x - Mouse2.x;\n        #endif\n        mpoint = Mouse2.xy;\n        firstcycle = true;\n        vec2 midmpoint = mpoint*0.5;\n        float mdist = distance(fragCoord, mpoint);\n        float e = e0*pow(mdist/resolution.y, 2.) + 0.02*e0*smoothstep(0., 0.12, mdist/resolution.y);\n        float angle = - atan(mpoint.x/mpoint.y) + pi*0.5;\n        \n        vec2 uv2 = uv;\n        #ifdef swap_x\n        uv2.x = ratio - uv2.x;\n        #endif\n        \n        vec2 uvr = rotateVec(uv2 - midmpoint/resolution.yy, angle);\n        \n        float pagefunc = pageFunction(uvr.x, e);\n        vec2 uvr2 = vec2(pagefunc, uvr.y); \n        vec2 uvr3 = rotateVec(uvr2, -angle) - vec2(1., -1.)*midmpoint/resolution.yy;\n        \n        vec2 uvr2b = vec2(-pagefunc, uvr.y); \n        vec2 uvr3b = rotateVec(uvr2b, -angle) - vec2(1., -1.)*midmpoint/resolution.yy;\n        \n        #ifdef swap_x\n        uvr3b.x = ratio - uvr3b.x;\n        #endif\n            \n        vec4 i; \n        // Turned page\n        if (uvr.x>0. && uvr3b.y>0.)\n        {\n            vec2 uvcorr = vec2(ratio, 1.);\n            vec2 uvrcorr = rotateVec(uvcorr - midmpoint/resolution.yy, angle);\n            float pagefunccorr = pageFunction(uvrcorr.x, e);\n            vec2 uvrcorr2 = vec2(-pagefunccorr, uvrcorr.y); \n            vec2 uvrcorr3 = rotateVec(uvrcorr2, -angle) - vec2(1., -1.)*midmpoint/resolution.yy;\n        \n            float pagefuncder = pageFunctionDer(uvr.x, e);\n            float intfac = 1. - diffint*(1. - 1./pagefuncder);\n\n            if(uvr3.x>=0. || uvr3.y<=0.)\n            {\n                // Top of the turned page           \n                float mdists = distance(fragCoord, mpoint)*0.7 - 55.;\n                float es = e0*pow(mdists/resolution.y, 2.) + 0.02*e0*smoothstep(0., 0.08, mdist/resolution.y);\n                vec2 uvrs = rotateVec(uv2 - midmpoint/resolution.yy - shadowoffset, angle);\n                float pagefuncs = pageFunction(uvrs.x + 0.015, es - 0.001);\n                vec2 uvr2s = vec2(pagefuncs, uvrs.y); \n                vec2 uvr3s = rotateVec(uvr2s, -angle) - vec2(1., -1.)*midmpoint/resolution.yy;\n                float shadow = 1. - (1. - smoothstep(-shadowsmoothness, shadowsmoothness, uvr3s.x))*(1. - smoothstep(shadowsmoothness, -shadowsmoothness, uvr3s.y));\n                \n                float difft = intfac*(1. - ambientt) + ambientt;\n                difft = difft*(shadow*shadowint + 1. - shadowint)/2. + mix(1. - shadowint, difft, shadow)/2.;\n                if (firstcycle)\n                    i = difft*(colors?vec4(1., 0.3, 0.3, 1.):texture2D(CC_Texture0, mod((uvr3b - uvrcorr3)/vec2(-ratio, 1.), 1.)));\n                else\n                    i = difft*(colors?vec4(1., 0.3, 0.3, 1.):texture2D(CC_Texture0, mod((uvr3b - uvrcorr3)/vec2(-ratio, 1.), 1.)));\n            }\n            else\n            {\n                // Bottom of the turned page\n                float diffb = intfac*(1. - ambientb) + ambientb;\n                float spec = pow(smoothstep(specpos.x - 0.35, specpos.x, intfac)*smoothstep(specpos.x + 0.35, specpos.x, intfac), specpow);\n                spec*= specint*pow(1. - pow(clamp(abs(uvr.y - specpos.y), 0., specwidth*2.), 2.)/specwidth, specpow);\n                if (firstcycle)\n                    i = diffb*(colors?vec4(0.3, 1.0, 0.3, 1.):mix(texture2D(CC_Texture0, mod((uvr3 - uvrcorr3)/vec2(-ratio, 1.), 1.)), getPagebackColor(), bcolorMix));\n                else\n                    i = diffb*(colors?vec4(0.3, 1.0, 0.3, 1.):mix(texture2D(CC_Texture0, mod((uvr3 - uvrcorr3)/vec2(-ratio, 1.), 1.)), getPagebackColor(), bcolorMix));\n                //i = diffb*(colors?vec4(0.3, 1.0, 0.3, 1.):texture2D(iChannel1, mod((uvr3 - uvrcorr3)/vec2(-ratio, 1.), 1.)), vec4(0.3, 0., 0., 1.));\n                i = mix(i, vec4(1.0), spec);\n            }\n        }\n        else\n        {\n            // \"Background\" with simple shadow\n            vec2 mpointbg = vec2(0.2, 0.01);\n            vec2 midmpointbg = mpointbg*0.5;\n            float mdistbg = distance(fragCoord, mpointbg);\n            float ebg = e0*pow(mdistbg/resolution.y, 2.) + 0.01*e0*smoothstep(0., 0.12, mdistbg/resolution.y);\n            float anglebg = 0.001; //- atan(mpointbg.x/mpointbg.y) + pi*0.5;\n            vec2 uvrbg = rotateVec(uv - midmpointbg/resolution.yy, anglebg);\n            //float pagefuncbg = mix(uvrbg.x, pageFunction(uvrbg.x, ebg), clamp(uvrbg.x*5., 0., 1.));\n            float pagefuncbg;\n            if (uvrbg.x<0.15)\n            pagefuncbg = uvrbg.x;\n            else\n            pagefuncbg = mix(uvrbg.x, pageFunction(uvrbg.x, ebg), smoothstep(mpoint.x/resolution.x + 0.1, mpoint.x/resolution.x, uvrbg.x));\n            \n            vec2 uvr2bbg = vec2(-pagefuncbg, uvrbg.y); \n            vec2 uvr3bbg = rotateVec(uvr2bbg, -anglebg) - vec2(1., -1.)*midmpointbg/resolution.yy;\n            vec2 uvcorrbg = vec2(ratio, 1.);\n            vec2 uvrcorrbg = rotateVec(uvcorrbg - midmpointbg/resolution.yy, anglebg);\n            float pagefunccorrbg = pageFunction(uvrcorrbg.x, ebg);\n            vec2 uvrcorr2bg = vec2(-pagefunccorrbg, uvrcorrbg.y); \n            vec2 uvrcorr3bg = rotateVec(uvrcorr2bg, -anglebg) - vec2(1., -1.)*midmpointbg/resolution.yy;       \n            float pagefuncderbg = pageFunctionDer(uvrbg.x, ebg);\n            float intfacbg = 1. - diffint*(1. - 1./pagefuncderbg);\n            float difftbg = intfacbg*(1. - ambientt) + ambientt;\n            \n            if (firstcycle) \n                i = colors?difftbg*vec4(0.3, 0.3, 1., 1.):texture2D(CC_Texture0, mod((uvr3bbg - uvrcorr3bg)/vec2(-ratio, 1.), 1.));\n            else\n                i = colors?difftbg*vec4(0.3, 0.3, 1., 1.):texture2D(CC_Texture0, mod((uvr3bbg - uvrcorr3bg)/vec2(-ratio, 1.), 1.));\n            float bgshadow = 1. + shadowint*smoothstep(-0.08+shadowsmoothness*4., -0.08, uvr3b.y) - shadowint;\n            \n            if (uvr3b.y<0.)\n            i*= bgshadow;\n        }\n        return i;\n    }\n    \n    void mainImage(out vec4 fragColor, in vec2 fragCoord)\n    {\n        // Antialiasing\n        vec4 vs = vec4(0.);\n        for (int j=0;j<aasamples ;j++)\n        {\n        float oy = float(j)*aawidth/max(float(aasamples-1), 1.);\n        for (int i=0;i<aasamples ;i++)\n        {\n            float ox = float(i)*aawidth/max(float(aasamples-1), 1.);\n            vs+= turnPage(fragCoord + vec2(ox, oy));\n        }\n        }\n        vec4 i = vs/vec4(aasamples*aasamples);    \n        \n        // Show the mouse points. Was only used for development\n        vec4 ocol; \n        if (showpoints)\n        {\n            float ratio = resolution.x/resolution.y;\n            vec2 mpoint = mouse.xy;\n            vec2 midmpoint = mouse.xy*0.5;\n            float mdist = distance(fragCoord, mpoint);\n            float midmdist = distance(fragCoord, midmpoint);\n            \n            ocol = mix(i, vec4(1., 0., 0., 1.), smoothstep(6., 4., mdist));\n            ocol = mix(ocol, vec4(1., 1., 0., 1.), smoothstep(6., 4., midmdist));\n        }\n        else\n            ocol = i;\n            \n        fragColor = ocol;\n    }\n\n    void main()\n    {\n        mainImage(gl_FragColor, gl_FragCoord.xy);\n    }\n    ";
    return TurnPageFrag;
}());
exports.default = TurnPageFrag;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,