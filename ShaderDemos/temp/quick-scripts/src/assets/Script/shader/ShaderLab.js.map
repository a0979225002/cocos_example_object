{"version":3,"sources":["assets\\Script\\shader\\ShaderLab.ts"],"names":[],"mappings":";;;;;;AACA,IAAM,GAAG,GAAG,2QAaX,CAAC;AAEF,IAAM,SAAS,GAAG;IACd,WAAW,EAAE;QACT,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,oQASC;KACI;IACD,KAAK,EAAE;QACH,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,sRAUC;KACI;IACD,GAAG,EAAE;QACD,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,sUAWC;KACI;IACD,MAAM,EAAE;QACJ,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,sNAUC;KACI;IACD,MAAM,EAAE;QACJ,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,0NAWC;KACI;IACD,MAAM,EAAE;QACJ,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,6PAaC;KACI;IACD,MAAM,EAAE;QACJ,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,ySAaC;KACI;IACD,MAAM,EAAE;QACJ,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,qRAUC;KACI;IACD,SAAS,EAAE;QACP,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,0DAIC;KACI;IACD,IAAI,EAAE;QACF,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,u6BA0BC;KACI;IACD,SAAS,EAAE;QACP,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,45BA8BC;KACI;IACD,QAAQ,EAAE;QACN,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,4ZAqBC;KACI;IACD,MAAM,EAAE;QACJ,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,ygCAwBC;KACI;IACD,WAAW,EAAE;QACT,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,6kCAuCC;KACI;IACD,IAAI,EAAE;QACF,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,oLAQC;KACI;IACD,SAAS,EAAE;QACP,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,+nBA4BC;KACI;CACJ,CAAC;AAEF,kBAAe,SAAS,CAAC","file":"","sourceRoot":"/","sourcesContent":["\r\nconst MVP = `\r\nuniform mat4 viewProj;\r\nuniform mat4 model;\r\nattribute vec3 a_position;\r\nattribute vec2 a_uv0;\r\nvarying vec2 uv0;\r\nvoid main () {\r\n    mat4 mvp;\r\n    mvp = viewProj * model;\r\n    vec4 pos = mvp * vec4(a_position, 1);\r\n    gl_Position = pos;\r\n    uv0 = a_uv0;\r\n}\r\n`;\r\n\r\nconst ShaderLab = {\r\n    GrayScaling: {\r\n        vert: MVP,\r\n        frag: \r\n`\r\nuniform sampler2D texture;\r\nuniform vec4 color;\r\nvarying vec2 uv0;\r\nvoid main () {\r\n    vec4 c = texture2D(texture, uv0);\r\n    float gray = dot(c.rgb, vec3(0.299 * 0.5, 0.587 * 0.5, 0.114 * 0.5));\r\n    gl_FragColor = vec4(gray, gray, gray, c.a * 0.5);\r\n}\r\n`\r\n    },\r\n    Stone: {\r\n        vert: MVP,\r\n        frag: \r\n`\r\nuniform sampler2D texture;\r\nuniform vec4 color;\r\nvarying vec2 uv0;\r\nvoid main () {\r\n    vec4 c = color * texture2D(texture, uv0);\r\n    float clrbright = (c.r + c.g + c.b) * (1. / 3.);\r\n    float gray = (0.6) * clrbright;\r\n    gl_FragColor = vec4(gray, gray, gray, c.a);\r\n}\r\n`\r\n    },\r\n    Ice: {\r\n        vert: MVP,\r\n        frag: \r\n`\r\nuniform sampler2D texture;\r\nuniform vec4 color;\r\nvarying vec2 uv0;\r\nvoid main () {\r\n    vec4 clrx = color * texture2D(texture, uv0);\r\n    float brightness = (clrx.r + clrx.g + clrx.b) * (1. / 3.);\r\n\tfloat gray = (1.5)*brightness;\r\n\tclrx = vec4(gray, gray, gray, clrx.a)*vec4(0.8,1.2,1.5,1);\r\n    gl_FragColor =clrx;\r\n}\r\n`\r\n    },\r\n    Frozen: {\r\n        vert: MVP,\r\n        frag: \r\n`\r\nuniform sampler2D texture;\r\nuniform vec4 color;\r\nvarying vec2 uv0;\r\nvoid main () {\r\n    vec4 c = color * texture2D(texture, uv0);\r\n    c *= vec4(0.8, 1, 0.8, 1);\r\n\tc.b += c.a * 0.2;\r\n    gl_FragColor = c;\r\n}\r\n`\r\n    },\r\n    Mirror: {\r\n        vert: MVP,\r\n        frag: \r\n`\r\nuniform sampler2D texture;\r\nuniform vec4 color;\r\nvarying vec2 uv0;\r\nvoid main () {\r\n    vec4 c = color * texture2D(texture, uv0);\r\n    c.r *= 0.5;\r\n    c.g *= 0.8;\r\n    c.b += c.a * 0.2;\r\n    gl_FragColor = c;\r\n}\r\n`\r\n    },\r\n    Poison: {\r\n        vert: MVP,\r\n        frag: \r\n`\r\nuniform sampler2D texture;\r\nuniform vec4 color;\r\nvarying vec2 uv0;\r\nvoid main () {\r\n    vec4 c = color * texture2D(texture, uv0);\r\n    c.r *= 0.8;\r\n\tc.r += 0.08 * c.a;\r\n\tc.g *= 0.8;\r\n    c.g += 0.2 * c.a;\r\n\tc.b *= 0.8;\r\n    gl_FragColor = c;\r\n}\r\n`\r\n    },\r\n    Banish: {\r\n        vert: MVP,\r\n        frag: \r\n`\r\nuniform sampler2D texture;\r\nuniform vec4 color;\r\nvarying vec2 uv0;\r\nvoid main () {\r\n    vec4 c = color * texture2D(texture, uv0);\r\n    float gg = (c.r + c.g + c.b) * (1.0 / 3.0);\r\n    c.r = gg * 0.9;\r\n    c.g = gg * 1.2;\r\n    c.b = gg * 0.8;\r\n    c.a *= (gg + 0.1);\r\n    gl_FragColor = c;\r\n}\r\n`\r\n    },\r\n    Vanish: {\r\n        vert: MVP,\r\n        frag: \r\n`\r\nuniform sampler2D texture;\r\nuniform vec4 color;\r\nvarying vec2 uv0;\r\nvoid main () {\r\n    vec4 c = color * texture2D(texture, uv0);\r\n    float gray = (c.r + c.g + c.b) * (1. / 3.);\r\n    float rgb = gray * 0.8;\r\n    gl_FragColor = vec4(rgb, rgb, rgb, c.a * (gray + 0.1));\r\n}\r\n`\r\n    },\r\n    Invisible: {\r\n        vert: MVP,\r\n        frag: \r\n`\r\nvoid main () {\r\n    gl_FragColor = vec4(0,0,0,0);\r\n}\r\n`\r\n    },\r\n    Blur: {\r\n        vert: MVP,\r\n        frag: \r\n`\r\nuniform sampler2D texture;\r\nuniform vec4 color;\r\nuniform float num;\r\nvarying vec2 uv0;\r\nvoid main () {\r\n    vec4 sum = vec4(0.0);\r\n    vec2 size = vec2(num,num);\r\n    sum += texture2D(texture, uv0 - 0.4 * size) * 0.05;\r\n\tsum += texture2D(texture, uv0 - 0.3 * size) * 0.09;\r\n\tsum += texture2D(texture, uv0 - 0.2 * size) * 0.12;\r\n\tsum += texture2D(texture, uv0 - 0.1 * size) * 0.15;\r\n\tsum += texture2D(texture, uv0             ) * 0.16;\r\n\tsum += texture2D(texture, uv0 + 0.1 * size) * 0.15;\r\n\tsum += texture2D(texture, uv0 + 0.2 * size) * 0.12;\r\n\tsum += texture2D(texture, uv0 + 0.3 * size) * 0.09;\r\n    sum += texture2D(texture, uv0 + 0.4 * size) * 0.05;\r\n    \r\n    vec4 vectemp = vec4(0,0,0,0);\r\n    vec4 substract = vec4(0,0,0,0);\r\n    vectemp = (sum - substract) * color;\r\n\r\n    float alpha = texture2D(texture, uv0).a;\r\n    if(alpha < 0.05) { gl_FragColor = vec4(0 , 0 , 0 , 0); }\r\n\telse { gl_FragColor = vectemp; }\r\n}\r\n`\r\n    },\r\n    GaussBlur: {\r\n        vert: MVP,\r\n        frag: \r\n`\r\n#define repeats 5.\r\nuniform sampler2D texture;\r\nuniform vec4 color;\r\nuniform float num;\r\nvarying vec2 uv0;\r\n\r\nvec4 draw(vec2 uv) {\r\n    return color * texture2D(texture,uv).rgba; \r\n}\r\nfloat grid(float var, float size) {\r\n    return floor(var*size)/size;\r\n}\r\nfloat rand(vec2 co){\r\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\r\n}\r\nvoid main()\r\n{\r\n    vec4 blurred_image = vec4(0.);\r\n    for (float i = 0.; i < repeats; i++) { \r\n        vec2 q = vec2(cos(degrees((i/repeats)*360.)),sin(degrees((i/repeats)*360.))) * (rand(vec2(i,uv0.x+uv0.y))+num); \r\n        vec2 uv2 = uv0+(q*num);\r\n        blurred_image += draw(uv2)/2.;\r\n        q = vec2(cos(degrees((i/repeats)*360.)),sin(degrees((i/repeats)*360.))) * (rand(vec2(i+2.,uv0.x+uv0.y+24.))+num); \r\n        uv2 = uv0+(q*num);\r\n        blurred_image += draw(uv2)/2.;\r\n    }\r\n    blurred_image /= repeats;\r\n    gl_FragColor = vec4(blurred_image);\r\n}\r\n`\r\n    },\r\n    Dissolve: {\r\n        vert: MVP,\r\n        frag: \r\n`\r\nuniform sampler2D texture;\r\nuniform vec4 color;\r\nuniform float time;\r\nvarying vec2 uv0;\r\n\r\nvoid main()\r\n{\r\n    vec4 c = color * texture2D(texture,uv0);\r\n    float height = c.r;\r\n    if(height < time)\r\n    {\r\n        discard;\r\n    }\r\n    if(height < time+0.04)\r\n    {\r\n        // 溶解颜色，可以自定义\r\n        c = vec4(.9,.6,0.3,c.a);\r\n    }\r\n    gl_FragColor = c;\r\n}\r\n`\r\n    },\r\n    Fluxay: {\r\n        vert: MVP,\r\n        frag: \r\n`\r\nuniform sampler2D texture;\r\nuniform vec4 color;\r\nuniform float time;\r\nvarying vec2 uv0;\r\n\r\nvoid main()\r\n{\r\n    vec4 src_color = color * texture2D(texture, uv0).rgba;\r\n\r\n    float width = 0.08;       //流光的宽度范围 (调整该值改变流光的宽度)\r\n    float start = tan(time/1.414);  //流光的起始x坐标\r\n    float strength = 0.008;   //流光增亮强度   (调整该值改变流光的增亮强度)\r\n    float offset = 0.5;      //偏移值         (调整该值改变流光的倾斜程度)\r\n    if(uv0.x < (start - offset * uv0.y) &&  uv0.x > (start - offset * uv0.y - width))\r\n    {\r\n        vec3 improve = strength * vec3(255, 255, 255);\r\n        vec3 result = improve * vec3( src_color.r, src_color.g, src_color.b);\r\n        gl_FragColor = vec4(result, src_color.a);\r\n\r\n    }else{\r\n        gl_FragColor = src_color;\r\n    }\r\n}\r\n`\r\n    },\r\n    FluxaySuper: {\r\n        vert: MVP,\r\n        frag: \r\n`\r\n#define TAU 6.12\r\n#define MAX_ITER 5\r\nuniform sampler2D texture;\r\nuniform vec4 color;\r\nuniform float time;\r\nvarying vec2 uv0;\r\n\r\nvoid main()\r\n{\r\n    float time = time * .5+5.;\r\n    // uv should be the 0-1 uv of texture...\r\n    vec2 uv = uv0.xy;//fragCoord.xy / iResolution.xy;\r\n    \r\n    vec2 p = mod(uv*TAU, TAU)-250.0;\r\n\r\n    vec2 i = vec2(p);\r\n    float c = 1.0;\r\n    float inten = .0045;\r\n\r\n    for (int n = 0; n < MAX_ITER; n++) \r\n    {\r\n        float t =  time * (1.0 - (3.5 / float(n+1)));\r\n        i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(1.5*t + i.x));\r\n        c += 1.0/length(vec2(p.x / (cos(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));\r\n    }\r\n    c /= float(MAX_ITER);\r\n    c = 1.17-pow(c, 1.4);\r\n    vec4 tex = texture2D(texture,uv);\r\n    vec3 colour = vec3(pow(abs(c), 20.0));\r\n    colour = clamp(colour + vec3(0.0, 0.0, .0), 0.0, tex.a);\r\n\r\n    // 混合波光\r\n    float alpha = c*tex[3];  \r\n    tex[0] = tex[0] + colour[0]*alpha; \r\n    tex[1] = tex[1] + colour[1]*alpha; \r\n    tex[2] = tex[2] + colour[2]*alpha; \r\n    gl_FragColor = color * tex;\r\n}\r\n`\r\n    },\r\n    Pure: {\r\n        vert: MVP,\r\n        frag: \r\n`\r\nuniform sampler2D texture;\r\nuniform vec4 color;\r\nvarying vec2 uv0;\r\nvoid main () {\r\n    vec4 c = color * texture2D(texture, uv0);\r\n    gl_FragColor = vec4(color.rgb, c.a);\r\n}\r\n`\r\n    },\r\n    WaterWave: {\r\n        vert: MVP,\r\n        frag:\r\n`\r\n#define F cos(x-y)*cos(y),sin(x+y)*sin(y)\r\n\r\nuniform sampler2D texture;\r\nuniform float time;\r\nuniform vec3 resolution;\r\nvarying vec2 uv0;\r\n\r\nvec2 s(vec2 p)\r\n{\r\n    float d=time*0.2,x=8.*(p.x+d),y=8.*(p.y+d);\r\n    return vec2(F);\r\n}\r\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\r\n{\r\n    // 换成resolution\r\n    vec2 rs = resolution.xy;\r\n    // 换成纹理坐标v_texCoord.xy\r\n    vec2 uv = uv0.xy;\r\n    vec2 q = uv+2./resolution.x*(s(uv)-s(uv+rs));\r\n    //反转y\r\n    // q.y=1.-q.y;\r\n    fragColor = texture2D(texture,q);\r\n}\r\nvoid main()\r\n{\r\n    mainImage(gl_FragColor, gl_FragCoord.xy);\r\n}\r\n`\r\n    }\r\n};\r\n\r\nexport default ShaderLab;\r\n"]}