{"version":3,"sources":["assets\\Script\\shader\\MaterialManager.ts"],"names":[],"mappings":";;;;;AAAA,oBAAoB;AACpB,kBAAkB;AAClB,sCAAsC;AACtC,mBAAmB;AACnB,eAAe;;;AAEf,uCAAuC;AACvC,yCAAoC;AACpC,yDAAoD;AACpD;;GAEG;AACH,IAAY,UAUX;AAVD,WAAY,UAAU;IAClB,OAAO;IACP,gDAAW,CAAA;IACX,OAAO;IACP,4CAAI,CAAA;IACJ,QAAQ;IACR,yDAAW,CAAA;IACX,qDAAS,CAAA;IACT,6DAAa,CAAA;IACb,qDAAS,CAAA;AACb,CAAC,EAVW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAUrB;AAED;;;GAGG;AACQ,QAAA,aAAa,GAAG,EAAE,CAAC,IAAI,CAAC;IAC/B,EAAE,EAAC,CAAC,CAAC;IACL,EAAE,EAAE,CAAC,CAAC;IACN,GAAG,EAAE,CAAC;IACN,EAAE,EAAE,CAAC;IACL,EAAE,EAAE,CAAC;IACL,IAAI,EAAC,CAAC;CACT,CAAC,CAAA;AAEF;IAAA;IAqCA,CAAC;IApCG;;;;OAIG;IACI,2BAAW,GAAlB,UAAmB,MAAiB,EAAE,MAAkB;QACpD,IAAI,EAAE,CAAC,IAAI,CAAC,UAAU,KAAK,EAAE,CAAC,IAAI,CAAC,kBAAkB,EAAE;YACnD,EAAE,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;YAC1C,OAAO;SACV;QACD,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE;YAChC,OAAO;SACV;QACD,IAAI,MAAM,GAAG,UAAU,CAAC,IAAI,EAAE;YAC1B,IAAI,IAAI,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;YAC9B,IAAI,GAAG,GAAG,mBAAS,CAAC,MAAgB,CAAC,CAAC;YACtC,IAAI,CAAC,GAAG,EAAE;gBACN,OAAO,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;gBACzC,OAAO;aACV;YACD,EAAE,CAAC,mBAAmB,CAAC,OAAO,GAAG,KAAK,CAAC;YACvC,IAAI,QAAQ,GAAG,2BAAiB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACnD,IAAI,OAAO,GAAG,MAAM,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC;YAC9C,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YAC7B,QAAQ,CAAC,UAAU,EAAE,CAAC;YACtB,IAAI,EAAE,GAAG,MAAa,CAAC;YACvB,EAAE,CAAC,SAAS,GAAG,QAAQ,CAAC;YACxB,EAAE,CAAC,WAAW,CAAC,SAAS,GAAG,QAAQ,CAAC;YACpC,EAAE,CAAC,MAAM,GAAG,MAAM,CAAC;YACnB,OAAO,QAAQ,CAAC;SACnB;aACI;YACD,kBAAkB;YAClB,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC;SAC7B;IACL,CAAC;IACL,sBAAC;AAAD,CArCA,AAqCC,IAAA","file":"","sourceRoot":"/","sourcesContent":["// Author：lerry（大掌教）\r\n// 详细教程请关注博客和微信公众号\r\n// csdn：https://darkpalm.blog.csdn.net\r\n// 微信公众号ID：darkpalm\r\n// Q群：704391772\r\n\r\n// import ShaderLab from \"./ShaderLab\";\r\nimport ShaderFSH from \"./ShaderFSH\";\r\nimport MaterialSingleton from \"./MaterialSingleton\";\r\n/**\r\n * 定义材质类型\r\n */\r\nexport enum ShaderType {\r\n    // 系统自带\r\n    Normal = -2,\r\n    // 系统自带\r\n    Gray,\r\n    // 自定义开始\r\n    GrayScaling,\r\n    WaterWave,\r\n    StartLighting,\r\n    Blackhole\r\n}\r\n\r\n/**\r\n * 定义个中文的，看起来舒爽一点\r\n * 两个枚举要配套使用\r\n */\r\nexport let ShaderEffects = cc.Enum({\r\n    正常:-2,\r\n    灰色: -1,\r\n    灰度图: 0,\r\n    水波: 1,\r\n    闪电: 2,\r\n    黑洞照片:3\r\n})\r\n\r\nexport default class MaterialManager {\r\n    /**\r\n     * 获取一个材质\r\n     * @param sprite 精灵 \r\n     * @param shader shader类型\r\n     */\r\n    static getMaterial(sprite: cc.Sprite, shader: ShaderType): MaterialSingleton {\r\n        if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {\r\n            cc.warn(\"Shader not surpport for canvas\");\r\n            return;\r\n        }\r\n        if (!sprite || !sprite.spriteFrame) {\r\n            return;\r\n        }\r\n        if (shader > ShaderType.Gray) {\r\n            let name = ShaderType[shader];\r\n            let lab = ShaderFSH[shader as number];\r\n            if (!lab) {\r\n                console.warn('Shader not defined', name);\r\n                return;\r\n            }\r\n            cc.dynamicAtlasManager.enabled = false;\r\n            let material = MaterialSingleton.getInstance(name);\r\n            let texture = sprite.spriteFrame.getTexture();\r\n            material.setTexture(texture);\r\n            material.updateHash();\r\n            let sp = sprite as any;\r\n            sp._material = material;\r\n            sp._renderData._material = material;\r\n            sp._state = shader;\r\n            return material;\r\n        }\r\n        else {\r\n            // 系统自带normal和gray\r\n            sprite.setState(shader+2);\r\n        }\r\n    }\r\n}"]}