{"version":3,"sources":["assets\\Script\\shader\\MaterialComponent.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// Author：lerry（大掌教）\r\n// 详细教程请关注博客和微信公众号\r\n// csdn：https://darkpalm.blog.csdn.net\r\n// 微信公众号ID：darkpalm\r\n// Q群：704391772\r\n\r\nimport MaterialSingleton from \"./MaterialSingleton\";\r\nimport MaterialManager, { ShaderType, ShaderEffects } from \"./MaterialManager\";\r\n\r\nconst { ccclass, property, requireComponent, executeInEditMode } = cc._decorator;\r\n\r\nconst NeedUpdate = [ShaderType.WaterWave,ShaderType.StartLighting];\r\n\r\n@ccclass\r\n@executeInEditMode\r\n@requireComponent(cc.Sprite)\r\nexport default class ShaderComponent extends cc.Component {\r\n\r\n    @property({ type: cc.Enum(ShaderType), visible: false })\r\n    private _shader: ShaderType = ShaderType.Normal;\r\n\r\n    @property({\r\n        type: cc.Enum(ShaderEffects),\r\n        displayName:\"着色器\"\r\n    })\r\n    get shader() { return this._shader; }\r\n    set shader(type) {\r\n        this._shader = type;\r\n        this._setMaterial();\r\n    }\r\n\r\n    private _time = 0;\r\n    private _startIndex:number = Date.now();\r\n    private  _material: MaterialSingleton;\r\n    get material() { return this._material; }\r\n\r\n    protected start() {\r\n        this.getComponent(cc.Sprite).setState(cc.Sprite.State.NORMAL);\r\n        this._setMaterial();\r\n        \r\n    }\r\n\r\n    protected update(dt) {\r\n        if (!this._material) return;\r\n        this._updateShaderTime(dt);\r\n    }\r\n\r\n    private _setMaterial() {\r\n        let shader = this.shader;\r\n        let sprite = this.getComponent(cc.Sprite);\r\n        let material = MaterialManager.getMaterial(sprite, shader);\r\n        this._material = material;\r\n        if (!material) return;\r\n        switch (shader) {\r\n            case ShaderType.WaterWave:\r\n            case ShaderType.StartLighting:\r\n            case ShaderType.Blackhole:\r\n                material.setResolution(this.node.width, this.node.height);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 随时间更新shader\r\n     * @param dt 每帧时间\r\n     */\r\n    private _updateShaderTime(dt) {\r\n        if (NeedUpdate.indexOf(this._shader) >= 0) {\r\n            this._time = (Date.now() - this._startIndex) / 1000;\r\n            this._material.setTime(this._time);\r\n        }\r\n    }\r\n}\r\n"]}