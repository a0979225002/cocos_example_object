{"version":3,"sources":["assets\\Script\\EffectManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class EffectManager extends cc.Component {\r\n\r\n    @property\r\n    fragShader: string = 'lightcircle';\r\n    \r\n    default_vert = `\r\n    attribute vec4 a_position;\r\n    attribute vec2 a_texCoord;\r\n    attribute vec4 a_color;\r\n    varying vec2 v_texCoord;\r\n    varying vec4 v_fragmentColor;\r\n    void main()\r\n    {\r\n        gl_Position = CC_PMatrix * a_position;\r\n        v_fragmentColor = a_color;\r\n        v_texCoord = a_texCoord;\r\n    }\r\n    `;\r\n\r\n    program: cc.GLProgram;\r\n    frag_glsl: string = '';\r\n    startTime:number = Date.now();\r\n    time: number = 0;\r\n    resolution={ x:0.0, y:0.0};\r\n    // 初始化\r\n    onLoad() {\r\n        cc.director.setDisplayStats(true);\r\n        this.resolution.x = (this.node.getContentSize().width );\r\n        this.resolution.y = (this.node.getContentSize().height);\r\n        let self = this;\r\n        cc.loader.loadRes(this.fragShader, function (err, data) {\r\n            if (err)\r\n                cc.log(err);\r\n            else {\r\n                self.frag_glsl = data;\r\n                self.useShader();\r\n            }\r\n        });\r\n    }\r\n\r\n    useShader() {\r\n        this.program = new cc.GLProgram(); \r\n        if (cc.sys.isNative) {\r\n            this.program.initWithString(this.default_vert, this.frag_glsl);\r\n        } else {\r\n            this.program.initWithVertexShaderByteArray(this.default_vert, this.frag_glsl);\r\n            this.program.addAttribute(cc.macro.ATTRIBUTE_NAME_POSITION, cc.macro.VERTEX_ATTRIB_POSITION);\r\n            this.program.addAttribute(cc.macro.ATTRIBUTE_NAME_COLOR, cc.macro.VERTEX_ATTRIB_COLOR);\r\n            this.program.addAttribute(cc.macro.ATTRIBUTE_NAME_TEX_COORD, cc.macro.VERTEX_ATTRIB_TEX_COORDS);\r\n        }\r\n        this.program.link();\r\n        this.program.updateUniforms();\r\n        this.program.use();\r\n\r\n        if (cc.sys.isNative) {\r\n            var glProgram_state = cc.GLProgramState.getOrCreateWithGLProgram(this.program);\r\n            glProgram_state.setUniformFloat(\"time\", this.time);\r\n            glProgram_state.setUniformVec2( \"resolution\", this.resolution );\r\n        } else {\r\n            let ba = this.program.getUniformLocationForName(\"time\");\r\n            let res = this.program.getUniformLocationForName( \"resolution\" );\r\n            this.program.setUniformLocationWith1f(ba, this.time);\r\n            this.program.setUniformLocationWith2f( res, this.resolution.x,this.resolution.y );\r\n        }\r\n        this.setProgram(this.node.getComponent(cc.Sprite)._sgNode, this.program);\r\n    }\r\n\r\n    setProgram(node: any, program: any) {\r\n        if (cc.sys.isNative) {\r\n            var glProgram_state = cc.GLProgramState.getOrCreateWithGLProgram(program);\r\n            node.setGLProgramState(glProgram_state);\r\n        } else {\r\n            node.setShaderProgram(program);\r\n        }\r\n    }\r\n\r\n    updateParameters() {\r\n        this.time = (Date.now() - this.startTime) / 1000;\r\n    }\r\n    // 每帧更新函数\r\n    update(dt) {\r\n        this.updateParameters();\r\n        if (this.program) {\r\n            this.program.use();\r\n            if (cc.sys.isNative) {\r\n                var glProgram_state = cc.GLProgramState.getOrCreateWithGLProgram(this.program);\r\n                glProgram_state.setUniformFloat(\"time\", this.time);\r\n            } else {\r\n                let ct = this.program.getUniformLocationForName(\"time\");\r\n                this.program.setUniformLocationWith1f(ct, this.time);\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}