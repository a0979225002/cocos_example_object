{"version":3,"sources":["assets\\Script\\FluxayFrag.ts"],"names":[],"mappings":";;;;;;AAAA,cAAc;AACd,eAAe;AACf,0CAA0C;AAC1C;IAAA;IA4HA,CAAC;IA3HU,sBAAW,GAAG,2TAYpB,CAAC;IAEF,OAAO;IACA,sBAAW,GAAG,qoCAwBpB,CAAC;IAEF,WAAW;IACJ,wBAAa,GAAG,o3CAoCrB,CAAC;IACH,OAAO;IACA,4BAAiB,GAAG,y2CA0C1B,CAAC;IACN,iBAAC;CA5HD,AA4HC,IAAA;kBA5HoB,UAAU","file":"","sourceRoot":"/","sourcesContent":["// Feofox Game\r\n// Author:Lerry\r\n// https://github.com/fylz1125/ShaderDemos\r\nexport default class FluxayFrag{\r\n    static fluxay_vert = `\r\n    attribute vec4 a_position;\r\n    attribute vec2 a_texCoord;\r\n    attribute vec4 a_color;\r\n    varying vec2 v_texCoord;\r\n    varying vec4 v_fragmentColor;\r\n    void main()\r\n    {\r\n        gl_Position = CC_PMatrix * a_position;\r\n        v_fragmentColor = a_color;\r\n        v_texCoord = a_texCoord;\r\n    }\r\n    `;\r\n\r\n    // 流光特效\r\n    static fluxay_frag = `\r\n    #ifdef GL_ES\r\n    precision mediump float;\r\n    #endif\r\n    varying vec2 v_texCoord;\r\n    uniform float time;\r\n    void main()\r\n    {\r\n        vec4 src_color = texture2D(CC_Texture0, v_texCoord).rgba;\r\n\r\n        float width = 0.02;       //流光的宽度范围 (调整该值改变流光的宽度)\r\n        float start = tan(time/1.414);  //流光的起始x坐标\r\n        float strength = 0.006;   //流光增亮强度   (调整该值改变流光的增亮强度)\r\n        float offset = 0.5;      //偏移值         (调整该值改变流光的倾斜程度)\r\n        if( v_texCoord.x < (start - offset * v_texCoord.y) &&  v_texCoord.x > (start - offset * v_texCoord.y - width))\r\n        {\r\n            vec3 improve = strength * vec3(255, 255, 255);\r\n            vec3 result = improve * vec3( src_color.r, src_color.g, src_color.b);\r\n            gl_FragColor = vec4(result, src_color.a);\r\n\r\n        }else{\r\n            gl_FragColor = src_color;\r\n        }\r\n    }\r\n    `;\r\n\r\n    // 流光的另一种写法\r\n    static fluxay_frag_s = `\r\n    #ifdef GL_ES                                 \r\n    precision mediump float;                          \r\n    #endif                                          \r\n    \r\n    varying vec4 v_fragmentColor;                  \r\n    varying vec2 v_texCoord;                      \r\n    \r\n    // uniform float factor;  \r\n    // uniform float width;  \r\n    uniform float time;  \r\n    // uniform vec3 color; \r\n    void main()                                      \r\n    {   \r\n        float factor = .06;\r\n        float width = .02;\r\n        // float offset = .5;\r\n        vec3 color = vec3(10.,10.,10.);                                           \r\n        vec4 texColor = texture2D(CC_Texture0, v_texCoord);  \r\n    \r\n        float distance = abs(v_texCoord[0]+v_texCoord[1]-tan(time))/1.414;   \r\n\r\n        distance = 1.0-(1.0/width)*distance;  \r\n        distance = max(distance, 0.0);  \r\n        vec4 sample = vec4(0.0,0.0,0.0,0.0);  \r\n        sample[0] = color[0] * distance;  \r\n        sample[1] = color[1] * distance;  \r\n        sample[2] = color[2] * distance;  \r\n        sample[3] = distance;  \r\n\r\n        float alpha = sample[3]*texColor[3];  \r\n        texColor[0] = texColor[0] + sample[0]*alpha*factor;  \r\n        texColor[1] = texColor[1] + sample[1]*alpha*factor;  \r\n        texColor[2] = texColor[2] + sample[2]*alpha*factor;  \r\n        gl_FragColor = v_fragmentColor * texColor;  \r\n    }\r\n     `;\r\n    // 波光特效\r\n    static fluxay_frag_super = `\r\n    #define TAU 6.120470874064187\r\n    #define MAX_ITER 5\r\n    uniform float time; \r\n    varying vec2 v_texCoord;\r\n    varying vec4 v_fragmentColor;\r\n    void mainImage( out vec4 fragColor, in vec2 fragCoord ) \r\n    {\r\n        float time = time * .5+5.;\r\n        // uv should be the 0-1 uv of texture...\r\n        vec2 uv = v_texCoord.xy;//fragCoord.xy / iResolution.xy;\r\n        \r\n\r\n        vec2 p = mod(uv*TAU, TAU)-250.0;\r\n\r\n        vec2 i = vec2(p);\r\n        float c = 1.0;\r\n        float inten = .0045;\r\n\r\n        for (int n = 0; n < MAX_ITER; n++) \r\n        {\r\n            float t =  time * (1.0 - (3.5 / float(n+1)));\r\n            i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(1.5*t + i.x));\r\n            c += 1.0/length(vec2(p.x / (cos(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));\r\n        }\r\n        c /= float(MAX_ITER);\r\n        c = 1.17-pow(c, 1.4);\r\n        vec4 tex = texture2D(CC_Texture0,uv);\r\n        vec3 colour = vec3(pow(abs(c), 20.0));\r\n        colour = clamp(colour + vec3(0.0, 0.0, .0), 0.0, tex.a);\r\n\r\n        // 混合波光\r\n        float alpha = c*tex[3];  \r\n        tex[0] = tex[0] + colour[0]*alpha; \r\n        tex[1] = tex[1] + colour[1]*alpha; \r\n        tex[2] = tex[2] + colour[2]*alpha; \r\n        fragColor = v_fragmentColor * tex;\r\n    }\r\n    void main()\r\n    {\r\n        mainImage(gl_FragColor, gl_FragCoord.xy);\r\n    }\r\n    `;\r\n}\r\n"]}