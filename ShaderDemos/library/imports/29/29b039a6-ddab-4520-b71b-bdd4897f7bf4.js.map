{"version":3,"sources":["assets\\Script\\shader\\ShaderFSH.ts"],"names":[],"mappings":";;;;;;AAAA,IAAM,GAAG,GAAG,2QAaX,CAAC;AACF,IAAM,SAAS,GAAG;IACd;QACI,IAAI,EAAE,aAAa;QACnB,IAAI,EAAE,GAAG;QACT,OAAO,EAAE,EAAE;QACX,IAAI,EAAE,4QASb;KACI;IAED;QACI,IAAI,EAAE,WAAW;QACjB,IAAI,EAAE,GAAG;QACT,OAAO,EAAE,EAAE;QACX,IAAI,EAAE,wnBA4Bb;KACI;IACD;QACI,IAAI,EAAE,eAAe;QACrB,IAAI,EAAE,GAAG;QACT,OAAO,EAAE,EAAE;QACX,IAAI,EAAE,6xEAsHL;KACN;IACD;QACE,IAAI,EAAE,WAAW;QACjB,IAAI,EAAE,GAAG;QACT,OAAO,EAAE,EAAE;QACX,IAAI,EAAE,shBAoBL;KACF;CACF,CAAC;AAGF,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,mBAAmB,EAAE;IACtC,SAAS,CAAC,OAAO,CAAC,UAAC,GAAG;QAClB,6CAA6C;QAC7C,aAAa;QACb,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;IAC7F,CAAC,CAAC,CAAA;AACN,CAAC,CAAC,CAAC;AAEH,kBAAe,SAAS,CAAC","file":"","sourceRoot":"/","sourcesContent":["const MVP = `\r\nuniform mat4 viewProj;\r\nuniform mat4 model;\r\nattribute vec3 a_position;\r\nattribute vec2 a_uv0;\r\nvarying vec2 uv0;\r\nvoid main () {\r\n    mat4 mvp;\r\n    mvp = viewProj * model;\r\n    vec4 pos = mvp * vec4(a_position, 1);\r\n    gl_Position = pos;\r\n    uv0 = a_uv0;\r\n}\r\n`;\r\nconst ShaderFSH = [\r\n    {\r\n        name: \"GrayScaling\",//灰度图\r\n        vert: MVP,\r\n        defines: [],\r\n        frag: `\r\nuniform sampler2D texture;\r\nuniform vec4 color;\r\nvarying vec2 uv0;\r\nvoid main () {\r\n    vec4 c = color * texture2D(texture, uv0);\r\n    float gray = dot(c.rgb, vec3(0.299 * 0.5, 0.587 * 0.5, 0.114 * 0.5));\r\n    gl_FragColor = vec4(gray, gray, gray, c.a * 0.5);\r\n}\r\n`\r\n    },\r\n\r\n    {\r\n        name: \"WaterWave\",//水波\r\n        vert: MVP,\r\n        defines: [],\r\n        frag: `\r\n#define F cos(x-y)*cos(y),sin(x+y)*sin(y)\r\n\r\nuniform sampler2D texture;\r\nuniform float iTime;\r\nuniform vec3 resolution;\r\nvarying vec2 uv0;\r\n\r\nvec2 s(vec2 p)\r\n{\r\n    float d=iTime*0.2,x=8.*(p.x+d),y=8.*(p.y+d);\r\n    return vec2(F);\r\n}\r\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\r\n{\r\n    // 换成resolution\r\n    vec2 rs = resolution.xy;\r\n    // 换成纹理坐标 uv0\r\n    vec2 uv = uv0.xy;\r\n    vec2 q = uv+2./resolution.x*(s(uv)-s(uv+rs));\r\n    //反转y\r\n    // q.y=1.-q.y;\r\n    fragColor = texture2D(texture,q);\r\n}\r\nvoid main()\r\n{\r\n    mainImage(gl_FragColor, gl_FragCoord.xy);\r\n}\r\n`\r\n    },\r\n    {\r\n        name: \"StartLighting\",//封面的闪电\r\n        vert: MVP,\r\n        defines: [],\r\n        frag: `\r\nuniform float iTime;\r\nuniform vec3 resolution;\r\nvarying vec2 uv0;\r\n\r\nvec2 hash(in vec2 p)\r\n{\r\n  p=vec2(dot(p,vec2(127.1,311.7)),\r\n  dot(p,vec2(269.5,183.3)));\r\n  \r\n  return-1.+2.*fract(sin(p)*43758.5453123);\r\n}\r\n\r\nfloat noise(in vec2 p)\r\n{\r\n  const float K1=.366025404;\r\n  const float K2=.211324865;\r\n  \r\n  vec2 i=floor(p+(p.x+p.y)*K1);\r\n  \r\n  vec2 a=p-i+(i.x+i.y)*K2;\r\n  vec2 o=step(a.yx,a.xy);\r\n  vec2 b=a-o+K2;\r\n  vec2 c=a-1.+2.*K2;\r\n  \r\n  vec3 h=max(.5-vec3(dot(a,a),dot(b,b),dot(c,c)),.0);\r\n  \r\n  vec3 n=h*h*h*h*vec3(dot(a,hash(i+.0)),\r\n  dot(b,hash(i+o)),\r\n  dot(c,hash(i+1.)));\r\n  \r\n  return dot(n,vec3(70.));\r\n}\r\n\r\nfloat fbm(in vec2 p,float time)\r\n{\r\n  float c=cos(time/sqrt(3.));\r\n  float d=noise(p);\r\n  d+=.5*noise(p+vec2(+c,+0.));\r\n  d+=.25*noise(p+vec2(+0.,+c));\r\n  d+=.125*noise(p+vec2(-c,+0.));\r\n  d+=.0625*noise(p+vec2(+0.,-c));\r\n  d/=(1.+.5+.25+.125+.0625);\r\n  return.5+.5*d;\r\n}\r\n\r\nvec2 toPolar(in vec2 p)\r\n{\r\n  float r=length(p);\r\n  float a=atan(p.y,p.x);\r\n  return vec2(r,a);\r\n}\r\n\r\nvec2 toRect(in vec2 p)\r\n{\r\n  float x=p.x*cos(p.y);\r\n  float y=p.x*sin(p.y);\r\n  return vec2(x,y);\r\n}\r\n\r\n\r\n\r\nvec3 electric(in vec2 uv)\r\n{\r\n  const float thickness=.25;\r\n  const float haze=2.5;\r\n  const float size=.075;\r\n  const int count=3;\r\n  \r\n  vec2 p=uv;\r\n  \r\n  vec2 pp=toPolar(p);\r\n  pp.y+=.2*p.x;\r\n  p=toRect(pp);\r\n  \r\n  vec3 col=vec3(0.);\r\n  \r\n  float a1=smoothstep(.05,1.,length(p-vec2(-.6,0.)));\r\n  float a2=smoothstep(.05,1.,length(p-vec2(.6,0.)));\r\n  float s1=1./(a1+.1)*1.1;\r\n  float s2=1./(a2+.1)*1.1;\r\n  \r\n  float e1=1.6+.4*sin(iTime*sqrt(2.));\r\n  float e2=e1;\r\n  \r\n  for(int i=0;i<count;++i)\r\n  {\r\n    float fi=float(i);\r\n    float time=iTime+fi;\r\n    float fe1=(pow(fi+1.,.2))*e1;\r\n    float fe2=fe1;\r\n    vec2 o1=1.5*time*vec2(0,-1);\r\n    vec2 o2=o1;\r\n    float d1=abs((p.y*haze)*thickness/(p.y-fe1*fbm(p+o1,time*.11)*a1))*s1;\r\n    float d2=abs((p.y*haze)*thickness/(p.y-fe2*fbm(p+o2,time*.09)*a2))*s2;\r\n    col+=d1*size*vec3(.1,.8,2.);\r\n    col+=d2*size*vec3(2.,.1,.8);\r\n  }\r\n  \r\n  col/=float(count-1);\r\n  return col;\r\n}\r\n\r\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\r\n{\r\n  vec2 uv=uv0.xy;\r\n  uv.x=2.*uv.x-1.;\r\n  uv.y=1.-2.*uv.y;\r\n  uv.x*=resolution.x/resolution.y;\r\n\r\n  vec3 col=electric(uv*2.);\r\n\r\n  fragColor=vec4(col,1.);\r\n}\r\nvoid main()\r\n{\r\n    mainImage(gl_FragColor, gl_FragCoord.xy);\r\n}\r\n        `\r\n  },\r\n  {\r\n    name: \"Blackhole\",//黑洞\r\n    vert: MVP,\r\n    defines: [],\r\n    frag: `\r\nuniform vec3 resolution;\r\nvarying vec2 uv0;\r\n#define f(a) exp(-10.*pow(length(U-.52*cos(a+vec2(0.0,33.0))), 2.))\r\n\r\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\r\n{\r\n    vec2 rs = resolution.xy;\r\n    vec2 U = (2.*uv0*rs-rs)/rs.y;\r\n    // 翻转Y\r\n    U.y=-U.y;\r\n    \r\n    fragColor = (.5-.5*cos(min(6.*length(U),6.3)))*(.7*vec4(1.,.25,0.0,.0)\r\n    +(f(.65)+f(1.6)+f(2.8))*vec4(.8,.8,.5,0.))\r\n    +vec4(vec3(.0),1.);//黑色背景\r\n}\r\nvoid main()\r\n{\r\n    mainImage(gl_FragColor, gl_FragCoord.xy);\r\n}\r\n    `\r\n  }\r\n];\r\n\r\n\r\ncc.game.once(cc.game.EVENT_ENGINE_INITED, function () {\r\n    ShaderFSH.forEach((val) => {\r\n        // shader模板定义 名字，顶点着色器，片段着色器，宏定义列表，引擎初始化完成即定义\r\n        // @ts-ignore\r\n        cc.renderer._forward._programLib.define(val.name, val.vert, val.frag, val.defines || []);\r\n    })\r\n});\r\n\r\nexport default ShaderFSH;"]}