{"version":3,"sources":["assets\\scripts\\nav_agent.js"],"names":["fish_map","require","cc","Class","Component","properties","map","type","speed","start","run_road","road_set","get_road_set","index","Math","random","length","floor","road_data","is_walking","node","setPosition","next_step","x","scaleX","walk_to_next","get_next_point","src","getPosition","dst","dir","sub","len","mag","total_time","now_time","vx","vy","y","r","atan2","degree","PI","angle","update","dt","sx","sy"],"mappings":"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","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n\r\nvar fish_map = require(\"fish_map\");\r\n// 组件类,\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n        map: {\r\n            type: fish_map,\r\n            default: null,\r\n        },\r\n\r\n        speed: 100,\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n    // start函数 组件开始运行之前，调用, 初始入口的好地方;\r\n    start () {\r\n        this.run_road();\r\n    },\r\n\r\n    run_road() {\r\n        var road_set = this.map.get_road_set();\r\n        var index = Math.random() * road_set.length;\r\n        index = Math.floor(index);\r\n        this.road_data = road_set[index]; // 假设从第0条;\r\n\r\n        if (this.road_data.length < 2) {\r\n            return;\r\n        }\r\n        this.is_walking = false;\r\n        this.node.setPosition(this.road_data[0]);\r\n        this.next_step = 1; // 下一个要走的路径点;\r\n        if (this.road_data[0].x < this.road_data[this.road_data.length - 1].x) {\r\n            this.node.scaleX = 1;\r\n        }\r\n        else {\r\n            this.node.scaleX = -1;\r\n        }\r\n        this.walk_to_next();\r\n    }, \r\n\r\n    get_next_point() {\r\n        if (this.next_step + 3 >= this.road_data.length) {\r\n            return this.road_data[this.road_data.length - 1];\r\n        }\r\n\r\n        return this.road_data[this.next_step + 3];\r\n    },\r\n\r\n    walk_to_next() {\r\n        if (this.next_step >= this.road_data.length) {\r\n            this.is_walking = false;\r\n            this.run_road();\r\n            return;\r\n        }\r\n\r\n        this.is_walking = true;\r\n        var src = this.node.getPosition();\r\n        var dst = this.road_data[this.next_step];\r\n        var dir = dst.sub(src);\r\n        var len = dir.mag();\r\n\r\n        this.total_time = len / this.speed;\r\n        this.now_time = 0;\r\n        this.vx = this.speed * dir.x / len;\r\n        this.vy = this.speed * dir.y / len;\r\n\r\n        // 旋转鱼头\r\n        var r = Math.atan2(dir.y, dir.x); // 弧度\r\n        var degree = r * 180 / Math.PI;\r\n        degree = degree - 90; // 逆时针--> 顺时针\r\n        this.node.angle = degree;\r\n        // this.node.runAction(cc.rotateTo(0.5, degree));\r\n        // end\r\n    },\r\n\r\n    // update 组件再游戏画面每次刷新的时候调用, update\r\n    // dt: 是距离上一次过去刷新的时间;\r\n    update (dt) {\r\n        if(this.is_walking === false) {\r\n            return;\r\n        }\r\n\r\n        this.now_time += dt;\r\n        if (this.now_time > this.total_time) {\r\n            dt -= (this.now_time - this.total_time);\r\n        }\r\n\r\n        var sx = this.vx * dt;\r\n        var sy = this.vy * dt;\r\n\r\n        this.node.x += sx;\r\n        this.node.y += sy;\r\n\r\n        if (this.now_time >= this.total_time) {\r\n            this.next_step ++;\r\n            this.walk_to_next(); // 继续走下一个点;\r\n        }\r\n    },\r\n});\r\n"]}