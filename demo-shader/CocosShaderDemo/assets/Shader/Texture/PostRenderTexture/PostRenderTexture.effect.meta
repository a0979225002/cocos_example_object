{
  "ver": "1.0.22",
  "uuid": "420843a1-f68c-4980-827e-ec2fcc7664a4",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color;\n\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n\nuniform float num;\nvec4 draw(vec2 uv) {\n  return v_color * texture2D(texture,uv).rgba; \n}\nfloat grid(float var, float size) {\n  return floor(var*size)/size;\n}\nfloat rand(vec2 co){\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid main () {\n  vec4 blurred = vec4(0.);\n  for (float i = 0.; i < 5.; i++) { \n      vec2 q = vec2(cos(degrees((i/5.)*360.)),sin(degrees((i/5.)*360.))) * (rand(vec2(i,v_uv0.x+v_uv0.y))+num); \n      vec2 uv2 = v_uv0+(q*num);\n      blurred += draw(uv2)/2.;\n      q = vec2(cos(degrees((i/5.)*360.)),sin(degrees((i/5.)*360.))) * (rand(vec2(i+2.,v_uv0.x+v_uv0.y+24.))+num); \n      uv2 = v_uv0+(q*num);\n      blurred += draw(uv2)/2.;\n  }\n  blurred /= 5.;\n\n  vec4 col = vec4(blurred);\n\n  ALPHA_TEST(col);\n\n  gl_FragColor = col;\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\nin vec2 a_uv0;\nout vec2 v_uv0;\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin vec4 v_color;\n\nin vec2 v_uv0;\nuniform sampler2D texture;\n\nuniform POST {\n  float num;\n}\n\nvec4 draw(vec2 uv) {\n  return v_color * texture2D(texture,uv).rgba; \n}\nfloat grid(float var, float size) {\n  return floor(var*size)/size;\n}\nfloat rand(vec2 co){\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid main () {\n  vec4 blurred = vec4(0.);\n  for (float i = 0.; i < 5.; i++) { \n      vec2 q = vec2(cos(degrees((i/5.)*360.)),sin(degrees((i/5.)*360.))) * (rand(vec2(i,v_uv0.x+v_uv0.y))+num); \n      vec2 uv2 = v_uv0+(q*num);\n      blurred += draw(uv2)/2.;\n      q = vec2(cos(degrees((i/5.)*360.)),sin(degrees((i/5.)*360.))) * (rand(vec2(i+2.,v_uv0.x+v_uv0.y+24.))+num); \n      uv2 = v_uv0+(q*num);\n      blurred += draw(uv2)/2.;\n  }\n  blurred /= 5.;\n\n  vec4 col = vec4(blurred);\n\n  ALPHA_TEST(col);\n\n  gl_FragColor = col;\n}\n"
      }
    }
  ],
  "subMetas": {}
}