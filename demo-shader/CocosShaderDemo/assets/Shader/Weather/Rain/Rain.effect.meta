{
  "ver": "1.0.22",
  "uuid": "3fda05d6-60db-4200-9a6e-67adbd9d8ed3",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\nvarying vec4 v_color;\nvarying vec2 v_uv0;\n\nuniform sampler2D texture;\nuniform sampler2D drop;\n\nuniform vec2 resolution;\nuniform float time;\nfloat Hash (float x)\n{\n  return fract (sin (x * 21.34) * 456.78);    \n}\n\nvec2 GetDrops(vec2 uv, float t, float speedMultiplier) \n{                    \n    vec2 gridSize = vec2 (10.0, 4.0);\n    float sizeOffset = texture2D(drop, uv * 0.1).x;\n    float speed = ((Hash (floor (uv * gridSize).x) + 1.0) * 0.5)  * .2;     \n    uv.y -= speed * t * speedMultiplier;\n    \n    vec2 st = fract (uv * gridSize + vec2 (sizeOffset * 0.5, sizeOffset * 0.1));\n    st -= 0.5; \n    st *= 2.0;\n\n    vec2 p = (st)/gridSize;       \n    float mainDropDist = smoothstep (0.03, 0.02, length (p));\n        \n    return ((p * mainDropDist * 3.5));\n}\n\nvoid main()\n{\n    vec2 uv = v_uv0.xy/resolution;\n    uv *= 2.0 - 1.0;\n    uv.x *= resolution.x/resolution.y;\n    \n    vec2 drops = GetDrops (uv, time + 21.5, .75);    \n    drops += GetDrops (uv * 2.0, time + 251.5, 1.75) * .5;\n    drops += GetDrops (uv * 4.0, time + 32.5, 2.0) * .25;\n    \n    gl_FragColor = texture2D(texture, v_uv0/resolution + drops);\n    \n    vec2 uv2 = (v_uv0/resolution) - .5;            \n    \n    float dist = length (uv2) * 1.85;\n    float vignette = 1.0/(dist*dist + 1.0);\n    \n    gl_FragColor *= vignette;\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\nin vec2 a_uv0;\nout vec2 v_uv0;\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\nin vec4 v_color;\nin vec2 v_uv0;\n\nuniform sampler2D texture;\nuniform sampler2D drop;\n\nuniform RESOLUTION {\n  vec2 resolution;\n  float time; \n}\n\nfloat Hash (float x)\n{\n  return fract (sin (x * 21.34) * 456.78);    \n}\n\nvec2 GetDrops(vec2 uv, float t, float speedMultiplier) \n{                    \n    vec2 gridSize = vec2 (10.0, 4.0);\n    float sizeOffset = texture (drop, uv * 0.1).x;\n    float speed = ((Hash (floor (uv * gridSize).x) + 1.0) * 0.5)  * .2;     \n    uv.y -= speed * t * speedMultiplier;\n    \n    vec2 st = fract (uv * gridSize + vec2 (sizeOffset * 0.5, sizeOffset * 0.1));\n    st -= 0.5; \n    st *= 2.0;\n\n    vec2 p = (st)/gridSize;       \n    float mainDropDist = smoothstep (0.03, 0.02, length (p));\n        \n    return ((p * mainDropDist * 3.5));\n}\n\nvoid main()\n{\n    vec2 uv = v_uv0.xy/resolution;\n    uv *= 2.0 - 1.0;\n    uv.x *= resolution.x/resolution.y;\n    \n    vec2 drops = GetDrops (uv, time + 21.5, .75);    \n    drops += GetDrops (uv * 2.0, time + 251.5, 1.75) * .5;\n    drops += GetDrops (uv * 4.0, time + 32.5, 2.0) * .25;\n    \n    gl_FragColor = texture (texture, v_uv0/resolution + drops);\n    \n    vec2 uv2 = (v_uv0/resolution) - .5;            \n    \n    float dist = length (uv2) * 1.85;\n    float vignette = 1.0/(dist*dist + 1.0);\n    \n    gl_FragColor *= vignette;\n}\n"
      }
    }
  ],
  "subMetas": {}
}