CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        drop: { value: white }
        resolution: { value: [1, 1] }
        time: { value: 0.0 }
}%

CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  in vec2 a_uv0;
  out vec2 v_uv0;

  void main () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    v_uv0 = a_uv0;
    v_color = a_color;
    gl_Position = pos;
  }
}%

// by lgabriel13
CCProgram fs %{
  precision highp float;

  in vec4 v_color;
  in vec2 v_uv0;

  uniform sampler2D texture;
  uniform sampler2D drop;

  uniform RESOLUTION {
    vec2 resolution;
    float time; 
  }

  float Hash (float x)
  {
    return fract (sin (x * 21.34) * 456.78);    
  }

  vec2 GetDrops(vec2 uv, float t, float speedMultiplier) 
  {                    
      vec2 gridSize = vec2 (10.0, 4.0);
      float sizeOffset = texture (drop, uv * 0.1).x;
      float speed = ((Hash (floor (uv * gridSize).x) + 1.0) * 0.5)  * .2;     
      uv.y -= speed * t * speedMultiplier;
      
      vec2 st = fract (uv * gridSize + vec2 (sizeOffset * 0.5, sizeOffset * 0.1));
      st -= 0.5; 
      st *= 2.0;  
      
      //Draw a circle
      vec2 p = (st)/gridSize;       
      float mainDropDist = smoothstep (0.03, 0.02, length (p));
          
      return ((p * mainDropDist * 3.5));
  }

  void main()
  {
      vec2 uv = v_uv0.xy/resolution;
      uv *= 2.0 - 1.0;
      uv.x *= resolution.x/resolution.y;
      
      vec2 drops = GetDrops (uv, time + 21.5, .75);    
      drops += GetDrops (uv * 2.0, time + 251.5, 1.75) * .5;
      drops += GetDrops (uv * 4.0, time + 32.5, 2.0) * .25;
      
      gl_FragColor = texture (texture, v_uv0/resolution + drops);
      
      vec2 uv2 = (v_uv0/resolution) - .5;            
      
      float dist = length (uv2) * 1.85;
      float vignette = 1.0/(dist*dist + 1.0);
      
      gl_FragColor *= vignette;
  }
}%
