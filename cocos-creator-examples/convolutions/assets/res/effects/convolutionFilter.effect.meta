{
  "ver": "1.0.23",
  "uuid": "79e097c2-a2c2-470c-b1c6-01e00c4e2c78",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\nuniform vec4 kernel_0;\nuniform vec4 kernel_1;\nuniform vec4 kernel_2;\nuniform float scaleFactor;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  mat3 kernel = mat3(kernel_0.xyz, kernel_1.xyz, kernel_2.xyz);\n  float offset = 0.005;\n  vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);\n\n  #if USE_TEXTURE\n  sum += texture2D(texture, v_uv0 + vec2(-offset, -offset)) * kernel[0][0];\n  sum += texture2D(texture, v_uv0 + vec2(0.0, -offset)) * kernel[0][1];\n  sum += texture2D(texture, v_uv0 + vec2(offset, -offset)) * kernel[0][2];\n  sum += texture2D(texture, v_uv0 + vec2(-offset, 0.0)) * kernel[1][0];\n  sum += texture2D(texture, v_uv0 + vec2(0.0, 0.0)) * kernel[1][1];\n  sum += texture2D(texture, v_uv0 + vec2(offset, 0.0)) * kernel[1][2];\n  sum += texture2D(texture, v_uv0 + vec2(-offset, offset)) * kernel[2][0];\n  sum += texture2D(texture, v_uv0 + vec2(0.0, offset)) * kernel[2][1];\n  sum += texture2D(texture, v_uv0 + vec2(offset, offset)) * kernel[2][2];\n  sum *= scaleFactor;\n  o *= sum;\n  #endif\n\n  #if USE_GRAY\n    float gray = (o.r + o.g + o.b)/3.0;\n    o = vec4(gray, gray, gray, o.a);\n  #endif\n\n  gl_FragColor = o;\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\nuniform LAMYOUNG_COM {\n  vec4 kernel_0;\n  vec4 kernel_1;\n  vec4 kernel_2;\n  float scaleFactor;\n}\nin vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  mat3 kernel = mat3(kernel_0.xyz, kernel_1.xyz, kernel_2.xyz);\n  float offset = 0.005;\n  vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);\n\n  #if USE_TEXTURE\n  sum += texture(texture, v_uv0 + vec2(-offset, -offset)) * kernel[0][0];\n  sum += texture(texture, v_uv0 + vec2(0.0, -offset)) * kernel[0][1];\n  sum += texture(texture, v_uv0 + vec2(offset, -offset)) * kernel[0][2];\n  sum += texture(texture, v_uv0 + vec2(-offset, 0.0)) * kernel[1][0];\n  sum += texture(texture, v_uv0 + vec2(0.0, 0.0)) * kernel[1][1];\n  sum += texture(texture, v_uv0 + vec2(offset, 0.0)) * kernel[1][2];\n  sum += texture(texture, v_uv0 + vec2(-offset, offset)) * kernel[2][0];\n  sum += texture(texture, v_uv0 + vec2(0.0, offset)) * kernel[2][1];\n  sum += texture(texture, v_uv0 + vec2(offset, offset)) * kernel[2][2];\n  sum *= scaleFactor;\n  o *= sum;\n  #endif\n\n  #if USE_GRAY\n    float gray = (o.r + o.g + o.b)/3.0;\n    o = vec4(gray, gray, gray, o.a);\n  #endif\n\n  gl_FragColor = o;\n}\n"
      }
    }
  ],
  "subMetas": {}
}