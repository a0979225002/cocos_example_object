// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes: 
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        scaleFactor: { value: 1.0 }
        kernel_0: { value: [0.0, 0.0, 0.0, 0.0] }
        kernel_1: { value: [0.0, 1.0, 0.0, 0.0] }
        kernel_2: { value: [0.0, 0.0, 0.0, 0.0] }
}%

// 微信公众号 【白玉无冰】
// author: lamyoung.com
CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif
    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  uniform LAMYOUNG_COM {
    vec4 kernel_0;
    vec4 kernel_1;
    vec4 kernel_2;
    float scaleFactor;
  }
  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);
    mat3 kernel = mat3(kernel_0.xyz, kernel_1.xyz, kernel_2.xyz);
    float offset = 0.005;
    vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);

    #if USE_TEXTURE
    //卷积计算
    sum += texture(texture, v_uv0 + vec2(-offset, -offset)) * kernel[0][0];
    sum += texture(texture, v_uv0 + vec2(0.0, -offset)) * kernel[0][1];
    sum += texture(texture, v_uv0 + vec2(offset, -offset)) * kernel[0][2];
    sum += texture(texture, v_uv0 + vec2(-offset, 0.0)) * kernel[1][0];
    sum += texture(texture, v_uv0 + vec2(0.0, 0.0)) * kernel[1][1];
    sum += texture(texture, v_uv0 + vec2(offset, 0.0)) * kernel[1][2];
    sum += texture(texture, v_uv0 + vec2(-offset, offset)) * kernel[2][0];
    sum += texture(texture, v_uv0 + vec2(0.0, offset)) * kernel[2][1];
    sum += texture(texture, v_uv0 + vec2(offset, offset)) * kernel[2][2];
    //加权因子
    sum *= scaleFactor;
    o *= sum;
    #endif

    #if USE_GRAY
      float gray = (o.r + o.g + o.b)/3.0;
      o = vec4(gray, gray, gray, o.a);
    #endif

    gl_FragColor = o;
  }
}%
