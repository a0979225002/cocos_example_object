{
  "ver": "1.0.25",
  "uuid": "867bab48-9813-4783-8883-4d5c063720ef",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nvarying vec3 v_pos;\nvarying vec3 v_normal;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  v_pos = (cc_matWorld * pos).xyz;\n  #else\n  pos = cc_matViewProj * pos;\n  v_pos = pos.xyz;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_normal = vec3(0, 0, 1);\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_cameraPos;\nvarying vec4 v_color;\nvarying vec3 v_pos;\nvarying vec3 v_normal;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 lightColor;\nuniform vec4 lightPos;\nuniform vec4 ambientLight;\nuniform float shininess;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  vec3 viewPos = cc_cameraPos.xyz;\n  vec3 ambient = ambientLight.rgb;\n  vec3 norm = normalize(v_normal);\n  vec3 lightDir = normalize(lightPos.xyz - v_pos);\n  float diff = max(dot(norm, lightDir), 0.0);\n  vec3 diffuse = diff * lightColor.rgb;\n  vec3 viewDir    = normalize(viewPos - v_pos);\n  vec3 halfwayDir = normalize(lightDir + viewDir);\n  float spec = pow(max(dot(norm, halfwayDir), 0.0), shininess);\n  vec3 specular = lightColor.rgb * spec;\n  o.rgb = (ambient + diffuse + specular) * o.rgb;\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nout vec3 v_pos;\nout vec3 v_normal;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  v_pos = (cc_matWorld * pos).xyz;\n  #else\n  pos = cc_matViewProj * pos;\n  v_pos = pos.xyz;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_normal = vec3(0, 0, 1);\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\nin vec3 v_pos;\nin vec3 v_normal;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform LAMYOUMG_COM{\n  vec4 lightColor;\n  vec4 lightPos;\n  vec4 ambientLight;\n  float shininess;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  vec3 viewPos = cc_cameraPos.xyz;\n  vec3 ambient = ambientLight.rgb;\n  vec3 norm = normalize(v_normal);\n  vec3 lightDir = normalize(lightPos.xyz - v_pos);\n  float diff = max(dot(norm, lightDir), 0.0);\n  vec3 diffuse = diff * lightColor.rgb;\n  vec3 viewDir    = normalize(viewPos - v_pos);\n  vec3 halfwayDir = normalize(lightDir + viewDir);\n  float spec = pow(max(dot(norm, halfwayDir), 0.0), shininess);\n  vec3 specular = lightColor.rgb * spec;\n  o.rgb = (ambient + diffuse + specular) * o.rgb;\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}