// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        brightness: { value: 1.0, min: 0.0, max: 3.0}
        saturation: { value: 1.0, min: 0.0, max: 3.0}
        constrast: { value: 1.0, min: 0.0, max: 3.0}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%

// http://lamyoung.com/


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform lamyoung_com{
    float brightness;
    float saturation;
    float constrast;
  };

  vec3 lerp(vec3 a, vec3 b, float w){
    return a + w*(b-a);
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);
    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
      // apply brightness
      vec3 finnalColor = o.rgb * brightness;
      // apply saturation
      float luminance = 0.2125 * o.r + 0.7154 * o.g + 0.0721 * o.b;
      vec3 luminanceColor = vec3(luminance, luminance, luminance);
      finnalColor = lerp(luminanceColor, finnalColor, saturation);
      // apply constrast
      vec3 avgColor = vec3(0.5, 0.5, 0.5);
      finnalColor = lerp(avgColor, finnalColor, constrast);

      o.rgb = finnalColor.rgb;
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
