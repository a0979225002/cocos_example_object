{"version":3,"sources":["assets\\script\\manager\\AssetsMng.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import Assets from \"../data/Assets\";\r\nimport EventMng from \"../manager/EventMng\";\r\nimport { LoadEvent } from \"../data/const/EventConst\";\r\n\r\nclass AssetsMng {\r\n\r\n    init(): void {\r\n\r\n    }\r\n\r\n    onPreLoad(): void {\r\n        this.onGamePrefabLoad();\r\n    }\r\n\r\n    onPreLoadDone(): void {\r\n        EventMng.emit(LoadEvent.LOAD_PRELOAD_DONE);\r\n    }\r\n\r\n\r\n\r\n\r\n    onGameSpineLoad(): void {\r\n        const arr = Assets.getGameSpineUrls();\r\n        cc.loader.loadResArray(arr, sp.SkeletonData, (error, data) => {\r\n            this.onGameSpineDone(error, data);\r\n        });\r\n    }\r\n\r\n    onGameSpineDone(error, data): void {\r\n        if (!error) {\r\n            this.setAssets(data, '.spine');\r\n            this.onPreLoadDone();\r\n        } else {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n    onGameAssetsLoad(): void {\r\n        const arr = Assets.getGameAssetsUrls();\r\n        cc.loader.loadResArray(arr, cc.SpriteAtlas, (error, data) => {\r\n            this.onGameAssetsDone(error, data);\r\n        });\r\n    }\r\n\r\n\r\n    onGameAssetsDone(error, data): void {\r\n        if (!error) {\r\n            this.setAssets(data);\r\n            this.onGameSpineLoad();\r\n        } else {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n    onGamePrefabLoad(): void {\r\n        const arr = Assets.getGameAssetsPrefabUrls();\r\n        cc.loader.loadResArray(arr, (error, data) => {\r\n            this.onGamePrefabLoadDone(error, data);\r\n        });\r\n    }\r\n\r\n    onGamePrefabLoadDone(error, data) {\r\n        if (!error) {\r\n            this.setAssets(data);\r\n            this.onGameAssetsLoad();\r\n        } else {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    setAssets(data, name?: string): void {\r\n\r\n        for (let i = 0; i < data.length; i++) {\r\n\r\n            let valName = data[i]._name;\r\n\r\n            if (name) {\r\n                valName += name;\r\n            }\r\n\r\n            Assets[valName] = data[i];\r\n\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    getAssets(name: string): any{\r\n        if (Assets[name]) {\r\n            return Assets[name];\r\n        }\r\n    }\r\n\r\n\r\n    getHeadPhotoImg(id: number): cc.SpriteFrame {\r\n\r\n        let plist = this.getAssets(\"head_photo.plist\");\r\n\r\n        if (!plist) {\r\n            return;\r\n        }\r\n\r\n        let num = id < 10 ? `0${id}` : id;\r\n        return plist.getSpriteFrame(`head_${num}`);\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default new AssetsMng();"]}