{"version":3,"sources":["file:///D:/My_Game/%E5%88%A5%E4%BA%BA%E5%AF%AB%E7%9A%84%E5%8F%83%E8%80%83%E7%94%A8/cocos-framework/assets/scripts/components/component_camera.ts"],"names":["Camera","clamp","find","Node","Vec3","view","Input","CameraInset","component_camera","es","Matrix2D","identity","Rectangle","Vector2","zero","one","setZoom","camera","getComponent","cameraNode","addComponent","addChild","visibleSize","getVisibleSize","origin","width","height","canvasSize","getCanvasSize","ratio","updateMatrixes","_areBoundsDirty","tempMat","createTranslation","entity","transform","position","x","y","_transformMatrix","_zoom","createScale","multiply","rotation","createRotation","Math","trunc","_origin","_inverseTransformMatrix","invert","_areMatrixesDirty","zoom","newZoom","MathHelper","map","_minimumZoom","_maxmumZoom","setMinimumZoom","minZoom","Insist","isTrue","minimumZoom","setMaximumZoom","maxZoom","setRatio","value","_ratio","equals","setInset","left","right","top","bottom","_inset","zoomIn","deltaZoom","zoomOut","screenToWorldPoint","screenPosition","Vector2Ext","transformR","worldToScreenPoint","worldPosition","forceMatrixUpdate","onEntityTransformChanged","comp","touchToWorldPoint","scaledPosition","touchPosition","mouseToWorldPoint","mousePosition","update","node","setPosition","viewport","getViewportRect","topLeft","bottomRight","topRight","bottomLeft","minX","min","maxX","max","minY","maxY","_bounds","location","Component"],"mappings":"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","sourcesContent":["import { Camera, clamp, find, Label, Node, Vec3, view } from \"cc\";\r\nimport { Input } from \"../Input/Input\";\r\n\r\nclass CameraInset {\r\n    left: number = 0;\r\n    right: number = 0;\r\n    top: number = 0;\r\n    bottom: number = 0;\r\n}\r\n\r\nexport class component_camera extends es.Component implements es.IUpdatable, es.ICamera {\r\n    public get position() {\r\n        return this.entity.transform.position;\r\n    }\r\n\r\n    public get rotation() {\r\n        return this.entity.transform.rotation;\r\n    }\r\n\r\n    public get bounds() {\r\n        if (this._areMatrixesDirty)\r\n            this.updateMatrixes();\r\n        \r\n        if (this._areBoundsDirty) {\r\n            let viewport = view.getViewportRect();\r\n            let topLeft = this.screenToWorldPoint(new es.Vector2(this._inset.left, this._inset.top));\r\n            let bottomRight = this.screenToWorldPoint(new es.Vector2(viewport.width - this._inset.right,\r\n                viewport.height - this._inset.bottom));\r\n\r\n            if (this.entity.transform.rotation != 0) {\r\n                let topRight = this.screenToWorldPoint(new es.Vector2(viewport.width - this._inset.right,\r\n                    this._inset.top));\r\n                let bottomLeft = this.screenToWorldPoint(new es.Vector2(this._inset.left,\r\n                    viewport.height - this._inset.bottom));\r\n\r\n                let minX = Math.min(topLeft.x, bottomRight.x, topRight.x, bottomLeft.x);\r\n                let maxX = Math.max(topLeft.x, bottomRight.x, topRight.x, bottomLeft.x);\r\n                let minY = Math.min(topLeft.y, bottomRight.y, topRight.y, bottomLeft.y);\r\n                let maxY = Math.max(topLeft.x, bottomRight.y, topRight.y, bottomLeft.y);\r\n\r\n                this._bounds.location = new es.Vector2(minX, minY);\r\n                this._bounds.width = maxX - minX;\r\n                this._bounds.height = maxY - minY;\r\n            } else {\r\n                this._bounds.location = topLeft;\r\n                this._bounds.width = bottomRight.x - topLeft.x;\r\n                this._bounds.height = bottomRight.y - topLeft.y;\r\n            }\r\n\r\n            this._areBoundsDirty = false;\r\n        }\r\n\r\n        return this._bounds;\r\n    }\r\n\r\n    public get transformMatrix() {\r\n        if (this._areBoundsDirty)\r\n            this.updateMatrixes();\r\n\r\n        return this._transformMatrix;\r\n    }\r\n\r\n    public get inverseTransformMatrix() {\r\n        if (this._areBoundsDirty)\r\n            this.updateMatrixes();\r\n\r\n        return this._inverseTransformMatrix;\r\n    }\r\n\r\n    public get origin() {\r\n        return this._origin;\r\n    }\r\n\r\n    public set origin(value: es.Vector2) {\r\n        if (!this._origin.equals(value)) {\r\n            this._origin = value;\r\n            this._areMatrixesDirty = true;\r\n        }\r\n    }\r\n\r\n    public get zoom() {\r\n        if (this._zoom == 0)\r\n            return 1;\r\n\r\n        if (this._zoom < 1)\r\n            return es.MathHelper.map(this._zoom, this._minimumZoom, 1, -1, 0);\r\n\r\n        return es.MathHelper.map(this._zoom, 1, this._maxmumZoom, 0, 1);\r\n    }\r\n\r\n    public set zoom(value: number) {\r\n        this.setZoom(value);\r\n    }\r\n\r\n    public get rawZoom() {\r\n        return this._zoom;\r\n    }\r\n\r\n    public set rawZoom(value: number) {\r\n        if (value != this._zoom) {\r\n            this._zoom = value;\r\n            this._areMatrixesDirty = true;\r\n        }\r\n    }\r\n\r\n    public get minimumZoom() {\r\n        return this._minimumZoom;\r\n    }\r\n\r\n    public set minimumZoom(value: number) {\r\n        this.setMinimumZoom(value);\r\n    }\r\n\r\n    public get maximumZoom() {\r\n        return this._maxmumZoom;\r\n    }\r\n\r\n    public set maximumZoom(value: number) {\r\n        this.setMaximumZoom(value);\r\n    }\r\n\r\n    public get ratio() {\r\n        return this._ratio;\r\n    }\r\n\r\n    public set ratio(value: es.Vector2) {\r\n        this.setRatio(value);\r\n    }\r\n\r\n    private _transformMatrix: es.Matrix2D = es.Matrix2D.identity;\r\n    private _inverseTransformMatrix = es.Matrix2D.identity;\r\n\r\n    private _bounds: es.Rectangle = new es.Rectangle();\r\n    private _inset: CameraInset = new CameraInset();\r\n    private _zoom: number = 0;\r\n    private _minimumZoom = 0.3;\r\n    private _maxmumZoom = 3;\r\n    private _origin: es.Vector2 = es.Vector2.zero;\r\n    private _ratio: es.Vector2 = es.Vector2.one;\r\n\r\n    private _areMatrixesDirty: boolean = true;\r\n    private _areBoundsDirty: boolean = true;\r\n\r\n    private camera: Camera;\r\n\r\n    constructor() {\r\n        super();\r\n        this.setZoom(0);\r\n        let camera = find('Canvas/Camera')?.getComponent(Camera);\r\n        if (camera) {\r\n            this.camera = camera;\r\n        } else {\r\n            let cameraNode = new Node('Camera');\r\n            this.camera = cameraNode.addComponent(Camera);\r\n            find('Canvas')?.addChild(cameraNode);\r\n        }\r\n\r\n        const visibleSize = view.getVisibleSize();\r\n        this.origin = new es.Vector2(visibleSize.width / 2, visibleSize.height / 2);\r\n        \r\n        const canvasSize = view.getCanvasSize();\r\n        this.ratio = new es.Vector2(visibleSize.width / canvasSize.width, visibleSize.height / canvasSize.height);\r\n    }\r\n\r\n    protected updateMatrixes() {\r\n        if (!this._areBoundsDirty)\r\n            return;\r\n\r\n        let tempMat: es.Matrix2D = new es.Matrix2D();\r\n        es.Matrix2D.createTranslation(-this.entity.transform.position.x, -this.entity.transform.position.y, this._transformMatrix);\r\n\r\n        if (this._zoom != 1) {\r\n            es.Matrix2D.createScale(this._zoom, this._zoom, tempMat);\r\n            this._transformMatrix = this._transformMatrix.multiply(tempMat);\r\n        }\r\n\r\n        if (this.entity.transform.rotation != 0) {\r\n            es.Matrix2D.createRotation(this.entity.transform.rotation, tempMat);\r\n            this._transformMatrix = this._transformMatrix.multiply(tempMat);\r\n        }\r\n\r\n        es.Matrix2D.createTranslation(Math.trunc(this._origin.x), Math.trunc(this._origin.y), tempMat);\r\n        this._transformMatrix = this._transformMatrix.multiply(tempMat);\r\n\r\n        this._inverseTransformMatrix = es.Matrix2D.invert(this._transformMatrix);\r\n\r\n        this._areBoundsDirty = true;\r\n        this._areMatrixesDirty = false;\r\n    }\r\n\r\n    public setZoom(zoom: number) {\r\n        let newZoom = clamp(zoom, -1, 1);\r\n        if (newZoom == 0)\r\n            this._zoom = 1;\r\n        else if(newZoom < 0)\r\n            this._zoom = es.MathHelper.map(newZoom, -1, 0, this._minimumZoom, 1);\r\n        else\r\n            this._zoom = es.MathHelper.map(newZoom, 0, 1, 1, this._maxmumZoom);\r\n\r\n        this._areMatrixesDirty = true;\r\n\r\n        return this;\r\n    }\r\n\r\n    public setMinimumZoom(minZoom: number) {\r\n        es.Insist.isTrue(minZoom > 0, \"minimumZoom必须大于零\");\r\n\r\n        if (this._zoom < minZoom)\r\n            this._zoom = this.minimumZoom;\r\n\r\n        this._minimumZoom = minZoom;\r\n        return this;\r\n    }\r\n\r\n    public setMaximumZoom(maxZoom: number) {\r\n        es.Insist.isTrue(maxZoom > 0, \"MaximumZoom必须大于零\");\r\n\r\n        if (this._zoom > maxZoom)\r\n            this._zoom = maxZoom;\r\n\r\n        this._maxmumZoom = maxZoom;\r\n        return this;\r\n    }\r\n\r\n    public setRatio(value: es.Vector2) {\r\n        if (!this._ratio.equals(value)) {\r\n            this._ratio = value;\r\n            this._areBoundsDirty = true;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public setInset(left: number, right: number, top: number, bottom: number) {\r\n        this._inset = new CameraInset();\r\n        this._inset.left = left;\r\n        this._inset.right = right;\r\n        this._inset.top = top;\r\n        this._inset.bottom = bottom;\r\n        this._areBoundsDirty = true;\r\n        return this;\r\n    }\r\n\r\n    public zoomIn(deltaZoom: number) {\r\n        this.zoom += deltaZoom;\r\n    }\r\n\r\n    public zoomOut(deltaZoom: number) {\r\n        this.zoom -= deltaZoom;\r\n    }\r\n\r\n    public screenToWorldPoint(screenPosition: es.Vector2): es.Vector2 {\r\n        this.updateMatrixes();\r\n        es.Vector2Ext.transformR(screenPosition.multiply(this.ratio), this._inverseTransformMatrix, screenPosition);\r\n        return screenPosition;\r\n    }\r\n\r\n    public worldToScreenPoint(worldPosition: es.Vector2): es.Vector2 {\r\n        this.updateMatrixes();\r\n        es.Vector2Ext.transformR(worldPosition.multiply(this.ratio), this._transformMatrix, worldPosition);\r\n        return worldPosition;\r\n    }\r\n\r\n    public forceMatrixUpdate() {\r\n        this._areMatrixesDirty = true;\r\n    }\r\n\r\n    public onEntityTransformChanged(comp: transform.Component) {\r\n        this._areMatrixesDirty = true;\r\n    }\r\n\r\n    public touchToWorldPoint() {\r\n        return this.screenToWorldPoint(Input.scaledPosition(Input.touchPosition));\r\n    }\r\n\r\n    public mouseToWorldPoint() {\r\n        return this.screenToWorldPoint(Input.scaledPosition(Input.mousePosition));\r\n    }\r\n\r\n    public update() {\r\n        this.camera.node.setPosition(new Vec3(this.position.x, this.position.y, 1000));\r\n        // let camera = this.camera.getComponent(Camera);\r\n        // if (camera) camera.orthoHeight = 320 + 320 * this.zoom;\r\n    }\r\n}"]}