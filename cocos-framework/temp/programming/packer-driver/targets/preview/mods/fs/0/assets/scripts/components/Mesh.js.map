{"version":3,"sources":["file:///D:/My_Game/%E5%88%A5%E4%BA%BA%E5%AF%AB%E7%9A%84%E5%8F%83%E8%80%83%E7%94%A8/cocos-framework/assets/scripts/components/Mesh.ts"],"names":["find","Material","resources","UITransform","Mesh","getbounds","_areBoundsDirty","_bounds","calculateBounds","entity","transform","position","es","Vector2","zero","scale","rotation","_width","_height","recalculateBounds","recalculateUVs","max","Number","MIN_VALUE","i","_verts","length","x","Math","y","uiTransform","_texture","getComponent","_x","_y","_nu","width","_nv","height","setTexture","texture","setVertexColorEnabled","shouldEnableVertexColors","_material","recompileShaders","_vertexColorEnabled","setVertPositions","positions","createVerts","color","setTriangles","triangles","Insist","isTrue","_primitiveCount","_triangles","setColor","setColorForAllVerts","onAddedToEntity","load","err","data","addChild","node","onRemovedFromEntity","removeFromParent","render","batcher","camera","parent","vertices","nu","nv","u","v","RenderableComponent"],"mappings":"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","sourcesContent":["import { find, gfx, instantiate, Material, MeshRenderer, PrimitiveType, resources, SpriteFrame, UITransform } from \"cc\";\r\nimport { PolygonSprite } from \"./PolygonSprite\";\r\n\r\nexport class Mesh extends es.RenderableComponent {\r\n    public getbounds() {\r\n        if (this._areBoundsDirty) {\r\n            this._bounds.calculateBounds(this.entity.transform.position, es.Vector2.zero,\r\n                es.Vector2.zero, this.entity.transform.scale, this.entity.transform.rotation, this._width, this._height);\r\n            this._areBoundsDirty = false;\r\n        }\r\n\r\n        return this._bounds;\r\n    }\r\n\r\n    _vertexColorEnabled: boolean = true;\r\n    _texture: PolygonSprite | null = null;\r\n\r\n    _primitiveCount: number = 0;\r\n    _width: number = 0;\r\n    _height: number = 0;\r\n    _triangles: number[] = [];\r\n    _verts: { position: es.Vector2, color: es.Color }[] = [];\r\n    _nu: number[] = [];\r\n    _nv: number[] = [];\r\n    _x: number[] = [];\r\n    _y: number[] = [];\r\n    _material: Material | null = null;\r\n\r\n    public recalculateBounds(recalculateUVs: boolean): Mesh {\r\n        const max = new es.Vector2(Number.MIN_VALUE, Number.MIN_VALUE);\r\n\r\n        for (let i = 0; i < this._verts.length; i++) {\r\n            max.x = Math.max(max.x, this._verts[i].position.x);\r\n            max.y = Math.max(max.y, this._verts[i].position.y);\r\n        }\r\n\r\n        this._width = max.x;\r\n        this._height = max.y;\r\n        this._areBoundsDirty = true;\r\n\r\n        if (recalculateUVs) {\r\n            const uiTransform = this._texture?.getComponent(UITransform);\r\n            if (uiTransform)\r\n                for (let i = 0; i < this._verts.length; i++) {\r\n                    this._x[i] = this._verts[i].position.x;\r\n                    this._y[i] = this._verts[i].position.y;\r\n                    this._nu[i] = this._verts[i].position.x / uiTransform.width;\r\n                    this._nv[i] = this._verts[i].position.y / uiTransform.height;\r\n                }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public setTexture(texture: PolygonSprite) {\r\n        this._texture = texture;\r\n        this.recalculateBounds(true);\r\n        return this;\r\n    }\r\n\r\n    public setVertexColorEnabled(shouldEnableVertexColors: boolean) {\r\n        if (this._material != null) {\r\n            this._material.recompileShaders({ \"USE_VERTEX_COLOR\": this._vertexColorEnabled });\r\n        } else {\r\n            this._vertexColorEnabled = shouldEnableVertexColors;\r\n        }\r\n    }\r\n\r\n    public setVertPositions(positions: es.Vector2[]) {\r\n        const createVerts = this._verts == null || this._verts.length != positions.length;\r\n        if (createVerts) {\r\n            for (let i = 0; i < positions.length; i++) {\r\n                this._verts[i] = {\r\n                    position: positions[i],\r\n                    color: this.color\r\n                };\r\n            }\r\n        }\r\n\r\n        this.recalculateBounds(true);\r\n        return this;\r\n    }\r\n\r\n    public setTriangles(triangles: number[]) {\r\n        es.Insist.isTrue(triangles.length % 3 == 0, \"triangles must be a multiple of 3\");\r\n        this._primitiveCount = triangles.length / 3;\r\n        this._triangles = triangles;\r\n        return this;\r\n    }\r\n\r\n    public setColor(color: es.Color) {\r\n        this.color = color;\r\n        this.setColorForAllVerts(color);\r\n        return this;\r\n    }\r\n\r\n    public setColorForAllVerts(color: es.Color) {\r\n        for (let i = 0; i < this._verts.length; i++)\r\n            this._verts[i].color = color;\r\n        return this;\r\n    }\r\n\r\n    onAddedToEntity() {\r\n        resources.load(\"materials/Basic\", Material, (err, data) => {\r\n            if (this._texture != null) {\r\n                // this._texture.material = data;\r\n                // this._material = this._texture?.node.getComponent(MeshRenderer)?.getMaterialInstance(0)!;\r\n                find('Canvas')?.addChild(this._texture.node);\r\n\r\n                // this._material?.recompileShaders({ \"USE_VERTEX_COLOR\": this._vertexColorEnabled });\r\n            }\r\n        });\r\n    }\r\n\r\n    onRemovedFromEntity() {\r\n        this._texture?.node.removeFromParent();\r\n        this._texture = null;\r\n    }\r\n\r\n    render(batcher: es.IBatcher, camera: es.ICamera): void {\r\n        if (this._texture && this._texture.node.parent) {\r\n            this._texture.vertices = {\r\n                x: this._x,\r\n                y: this._y,\r\n                triangles: this._triangles,\r\n                nu: this._nu,\r\n                nv: this._nv,\r\n                u: [],\r\n                v: []\r\n            }\r\n        }\r\n    }\r\n}"]}