{"version":3,"sources":["file:///D:/My_Game/%E5%88%A5%E4%BA%BA%E5%AF%AB%E7%9A%84%E5%8F%83%E8%80%83%E7%94%A8/cocos-framework/assets/scripts/components/component_camera.ts"],"names":["CameraInset","component_camera","Camera","clamp","find","Node","Vec3","view","Input","es","Component","position","entity","transform","rotation","bounds","_areMatrixesDirty","updateMatrixes","_areBoundsDirty","viewport","getViewportRect","topLeft","screenToWorldPoint","Vector2","_inset","left","top","bottomRight","width","right","height","bottom","topRight","bottomLeft","minX","Math","min","x","maxX","max","minY","y","maxY","_bounds","location","transformMatrix","_transformMatrix","inverseTransformMatrix","_inverseTransformMatrix","origin","_origin","value","equals","zoom","_zoom","MathHelper","map","_minimumZoom","_maxmumZoom","setZoom","rawZoom","minimumZoom","setMinimumZoom","maximumZoom","setMaximumZoom","ratio","_ratio","setRatio","constructor","Matrix2D","identity","Rectangle","zero","one","camera","getComponent","cameraNode","addComponent","addChild","visibleSize","getVisibleSize","canvasSize","getCanvasSize","tempMat","createTranslation","createScale","multiply","createRotation","trunc","invert","newZoom","minZoom","Insist","isTrue","maxZoom","setInset","zoomIn","deltaZoom","zoomOut","screenPosition","Vector2Ext","transformR","worldToScreenPoint","worldPosition","forceMatrixUpdate","onEntityTransformChanged","comp","touchToWorldPoint","scaledPosition","touchPosition","mouseToWorldPoint","mousePosition","update","node","setPosition"],"mappings":"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","sourcesContent":["import { Camera, clamp, find, Label, Node, Vec3, view } from \"cc\";\r\nimport { Input } from \"../Input/Input\";\r\n\r\nclass CameraInset {\r\n    left: number = 0;\r\n    right: number = 0;\r\n    top: number = 0;\r\n    bottom: number = 0;\r\n}\r\n\r\nexport class component_camera extends es.Component implements es.IUpdatable, es.ICamera {\r\n    public get position() {\r\n        return this.entity.transform.position;\r\n    }\r\n\r\n    public get rotation() {\r\n        return this.entity.transform.rotation;\r\n    }\r\n\r\n    public get bounds() {\r\n        if (this._areMatrixesDirty)\r\n            this.updateMatrixes();\r\n        \r\n        if (this._areBoundsDirty) {\r\n            let viewport = view.getViewportRect();\r\n            let topLeft = this.screenToWorldPoint(new es.Vector2(this._inset.left, this._inset.top));\r\n            let bottomRight = this.screenToWorldPoint(new es.Vector2(viewport.width - this._inset.right,\r\n                viewport.height - this._inset.bottom));\r\n\r\n            if (this.entity.transform.rotation != 0) {\r\n                let topRight = this.screenToWorldPoint(new es.Vector2(viewport.width - this._inset.right,\r\n                    this._inset.top));\r\n                let bottomLeft = this.screenToWorldPoint(new es.Vector2(this._inset.left,\r\n                    viewport.height - this._inset.bottom));\r\n\r\n                let minX = Math.min(topLeft.x, bottomRight.x, topRight.x, bottomLeft.x);\r\n                let maxX = Math.max(topLeft.x, bottomRight.x, topRight.x, bottomLeft.x);\r\n                let minY = Math.min(topLeft.y, bottomRight.y, topRight.y, bottomLeft.y);\r\n                let maxY = Math.max(topLeft.x, bottomRight.y, topRight.y, bottomLeft.y);\r\n\r\n                this._bounds.location = new es.Vector2(minX, minY);\r\n                this._bounds.width = maxX - minX;\r\n                this._bounds.height = maxY - minY;\r\n            } else {\r\n                this._bounds.location = topLeft;\r\n                this._bounds.width = bottomRight.x - topLeft.x;\r\n                this._bounds.height = bottomRight.y - topLeft.y;\r\n            }\r\n\r\n            this._areBoundsDirty = false;\r\n        }\r\n\r\n        return this._bounds;\r\n    }\r\n\r\n    public get transformMatrix() {\r\n        if (this._areBoundsDirty)\r\n            this.updateMatrixes();\r\n\r\n        return this._transformMatrix;\r\n    }\r\n\r\n    public get inverseTransformMatrix() {\r\n        if (this._areBoundsDirty)\r\n            this.updateMatrixes();\r\n\r\n        return this._inverseTransformMatrix;\r\n    }\r\n\r\n    public get origin() {\r\n        return this._origin;\r\n    }\r\n\r\n    public set origin(value: es.Vector2) {\r\n        if (!this._origin.equals(value)) {\r\n            this._origin = value;\r\n            this._areMatrixesDirty = true;\r\n        }\r\n    }\r\n\r\n    public get zoom() {\r\n        if (this._zoom == 0)\r\n            return 1;\r\n\r\n        if (this._zoom < 1)\r\n            return es.MathHelper.map(this._zoom, this._minimumZoom, 1, -1, 0);\r\n\r\n        return es.MathHelper.map(this._zoom, 1, this._maxmumZoom, 0, 1);\r\n    }\r\n\r\n    public set zoom(value: number) {\r\n        this.setZoom(value);\r\n    }\r\n\r\n    public get rawZoom() {\r\n        return this._zoom;\r\n    }\r\n\r\n    public set rawZoom(value: number) {\r\n        if (value != this._zoom) {\r\n            this._zoom = value;\r\n            this._areMatrixesDirty = true;\r\n        }\r\n    }\r\n\r\n    public get minimumZoom() {\r\n        return this._minimumZoom;\r\n    }\r\n\r\n    public set minimumZoom(value: number) {\r\n        this.setMinimumZoom(value);\r\n    }\r\n\r\n    public get maximumZoom() {\r\n        return this._maxmumZoom;\r\n    }\r\n\r\n    public set maximumZoom(value: number) {\r\n        this.setMaximumZoom(value);\r\n    }\r\n\r\n    public get ratio() {\r\n        return this._ratio;\r\n    }\r\n\r\n    public set ratio(value: es.Vector2) {\r\n        this.setRatio(value);\r\n    }\r\n\r\n    private _transformMatrix: es.Matrix2D = es.Matrix2D.identity;\r\n    private _inverseTransformMatrix = es.Matrix2D.identity;\r\n\r\n    private _bounds: es.Rectangle = new es.Rectangle();\r\n    private _inset: CameraInset = new CameraInset();\r\n    private _zoom: number = 0;\r\n    private _minimumZoom = 0.3;\r\n    private _maxmumZoom = 3;\r\n    private _origin: es.Vector2 = es.Vector2.zero;\r\n    private _ratio: es.Vector2 = es.Vector2.one;\r\n\r\n    private _areMatrixesDirty: boolean = true;\r\n    private _areBoundsDirty: boolean = true;\r\n\r\n    private camera: Camera;\r\n\r\n    constructor() {\r\n        super();\r\n        this.setZoom(0);\r\n        let camera = find('Canvas/Camera')?.getComponent(Camera);\r\n        if (camera) {\r\n            this.camera = camera;\r\n        } else {\r\n            let cameraNode = new Node('Camera');\r\n            this.camera = cameraNode.addComponent(Camera);\r\n            find('Canvas')?.addChild(cameraNode);\r\n        }\r\n\r\n        const visibleSize = view.getVisibleSize();\r\n        this.origin = new es.Vector2(visibleSize.width / 2, visibleSize.height / 2);\r\n        \r\n        const canvasSize = view.getCanvasSize();\r\n        this.ratio = new es.Vector2(visibleSize.width / canvasSize.width, visibleSize.height / canvasSize.height);\r\n    }\r\n\r\n    protected updateMatrixes() {\r\n        if (!this._areBoundsDirty)\r\n            return;\r\n\r\n        let tempMat: es.Matrix2D = new es.Matrix2D();\r\n        es.Matrix2D.createTranslation(-this.entity.transform.position.x, -this.entity.transform.position.y, this._transformMatrix);\r\n\r\n        if (this._zoom != 1) {\r\n            es.Matrix2D.createScale(this._zoom, this._zoom, tempMat);\r\n            this._transformMatrix = this._transformMatrix.multiply(tempMat);\r\n        }\r\n\r\n        if (this.entity.transform.rotation != 0) {\r\n            es.Matrix2D.createRotation(this.entity.transform.rotation, tempMat);\r\n            this._transformMatrix = this._transformMatrix.multiply(tempMat);\r\n        }\r\n\r\n        es.Matrix2D.createTranslation(Math.trunc(this._origin.x), Math.trunc(this._origin.y), tempMat);\r\n        this._transformMatrix = this._transformMatrix.multiply(tempMat);\r\n\r\n        this._inverseTransformMatrix = es.Matrix2D.invert(this._transformMatrix);\r\n\r\n        this._areBoundsDirty = true;\r\n        this._areMatrixesDirty = false;\r\n    }\r\n\r\n    public setZoom(zoom: number) {\r\n        let newZoom = clamp(zoom, -1, 1);\r\n        if (newZoom == 0)\r\n            this._zoom = 1;\r\n        else if(newZoom < 0)\r\n            this._zoom = es.MathHelper.map(newZoom, -1, 0, this._minimumZoom, 1);\r\n        else\r\n            this._zoom = es.MathHelper.map(newZoom, 0, 1, 1, this._maxmumZoom);\r\n\r\n        this._areMatrixesDirty = true;\r\n\r\n        return this;\r\n    }\r\n\r\n    public setMinimumZoom(minZoom: number) {\r\n        es.Insist.isTrue(minZoom > 0, \"minimumZoom必须大于零\");\r\n\r\n        if (this._zoom < minZoom)\r\n            this._zoom = this.minimumZoom;\r\n\r\n        this._minimumZoom = minZoom;\r\n        return this;\r\n    }\r\n\r\n    public setMaximumZoom(maxZoom: number) {\r\n        es.Insist.isTrue(maxZoom > 0, \"MaximumZoom必须大于零\");\r\n\r\n        if (this._zoom > maxZoom)\r\n            this._zoom = maxZoom;\r\n\r\n        this._maxmumZoom = maxZoom;\r\n        return this;\r\n    }\r\n\r\n    public setRatio(value: es.Vector2) {\r\n        if (!this._ratio.equals(value)) {\r\n            this._ratio = value;\r\n            this._areBoundsDirty = true;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public setInset(left: number, right: number, top: number, bottom: number) {\r\n        this._inset = new CameraInset();\r\n        this._inset.left = left;\r\n        this._inset.right = right;\r\n        this._inset.top = top;\r\n        this._inset.bottom = bottom;\r\n        this._areBoundsDirty = true;\r\n        return this;\r\n    }\r\n\r\n    public zoomIn(deltaZoom: number) {\r\n        this.zoom += deltaZoom;\r\n    }\r\n\r\n    public zoomOut(deltaZoom: number) {\r\n        this.zoom -= deltaZoom;\r\n    }\r\n\r\n    public screenToWorldPoint(screenPosition: es.Vector2): es.Vector2 {\r\n        this.updateMatrixes();\r\n        es.Vector2Ext.transformR(screenPosition.multiply(this.ratio), this._inverseTransformMatrix, screenPosition);\r\n        return screenPosition;\r\n    }\r\n\r\n    public worldToScreenPoint(worldPosition: es.Vector2): es.Vector2 {\r\n        this.updateMatrixes();\r\n        es.Vector2Ext.transformR(worldPosition.multiply(this.ratio), this._transformMatrix, worldPosition);\r\n        return worldPosition;\r\n    }\r\n\r\n    public forceMatrixUpdate() {\r\n        this._areMatrixesDirty = true;\r\n    }\r\n\r\n    public onEntityTransformChanged(comp: transform.Component) {\r\n        this._areMatrixesDirty = true;\r\n    }\r\n\r\n    public touchToWorldPoint() {\r\n        return this.screenToWorldPoint(Input.scaledPosition(Input.touchPosition));\r\n    }\r\n\r\n    public mouseToWorldPoint() {\r\n        return this.screenToWorldPoint(Input.scaledPosition(Input.mousePosition));\r\n    }\r\n\r\n    public update() {\r\n        this.camera.node.setPosition(new Vec3(this.position.x, this.position.y, 1000));\r\n        // let camera = this.camera.getComponent(Camera);\r\n        // if (camera) camera.orthoHeight = 320 + 320 * this.zoom;\r\n    }\r\n}"]}