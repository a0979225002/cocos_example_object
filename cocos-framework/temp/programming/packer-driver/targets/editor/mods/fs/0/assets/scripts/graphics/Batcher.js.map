{"version":3,"sources":["file:///D:/My_Game/%E5%88%A5%E4%BA%BA%E5%AF%AB%E7%9A%84%E5%8F%83%E8%80%83%E7%94%A8/cocos-framework/assets/scripts/graphics/Batcher.ts"],"names":["Batcher","Color","find","Graphics","Node","constructor","graphics","getComponent","addComponent","addChild","begin","cam","clear","camera","strokeNum","end","stroke","drawPoints","points","color","thickness","length","i","drawLine","drawPolygon","position","closePoly","es","Vector2","add","drawHollowRect","x","y","width","height","strokeColor","r","g","b","lineWidth","tl","Vector2Ext","round","tr","br","bl","drawCircle","radius","bounds","Rectangle","intersects","circle","flushBatch","drawCircleLow","resolution","last","unitX","multiplyScaler","lastP","perpendicularFlip","at","MathHelper","angleToVector","PiOver2","atP","sub","drawRect","rect","Math","trunc","start","RectangleExt","boundsFromPolygonVector","moveTo","lineTo","drawPixel","size","destRect","MAX_STROKE"],"mappings":"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","sourcesContent":["import { Camera, Color, find, Graphics, Node } from \"cc\";\r\nimport { component_camera } from \"../components/component_camera\";\r\n\r\nexport class Batcher implements es.IBatcher {\r\n    public graphics: Graphics;\r\n    public camera: component_camera | null = null;\r\n    public strokeNum: number = 0;\r\n\r\n    public readonly MAX_STROKE = 4096;\r\n\r\n    constructor() {\r\n        let graphics = find('Canvas/Graphics')?.getComponent(Graphics);\r\n        if (graphics) {\r\n            this.graphics = graphics;\r\n        } else {\r\n            let graphics = new Node('Graphics');\r\n            this.graphics = graphics.addComponent(Graphics);\r\n            find('Canvas')?.addChild(graphics);\r\n        }\r\n    }\r\n\r\n    public begin(cam: component_camera) {\r\n        this.graphics.clear();\r\n        this.camera = cam;\r\n        this.strokeNum = 0;\r\n    }\r\n\r\n    public end() {\r\n        if (this.strokeNum > 0) {\r\n            this.strokeNum = 0;\r\n            this.graphics.stroke();\r\n        }\r\n    }\r\n\r\n    public drawPoints(points: es.Vector2[], color: es.Color, thickness: number = 2) {\r\n        if (points.length < 2)\r\n            return;\r\n\r\n        for (let i = 1; i < points.length; i++)\r\n            this.drawLine(points[i - 1], points[i], color, thickness);\r\n    }\r\n\r\n    public drawPolygon(position: es.Vector2, points: es.Vector2[], color: es.Color,\r\n        closePoly: boolean = true, thickness: number = 1) {\r\n        if (points.length < 2)\r\n            return;\r\n\r\n        for (let i = 1; i < points.length; i ++)\r\n            this.drawLine(es.Vector2.add(position, points[i - 1]), es.Vector2.add(position, points[i]), color, thickness);\r\n\r\n        if (closePoly)\r\n            this.drawLine(es.Vector2.add(position, points[points.length - 1]), es.Vector2.add(position, points[0]), color, thickness);\r\n    }\r\n\r\n    public drawHollowRect(x: number, y: number, width: number, height: number, color: es.Color, thickness: number = 2) {\r\n        this.graphics.strokeColor = new Color(color.r, color.g, color.b);\r\n        this.graphics.lineWidth = thickness;\r\n\r\n        const tl = es.Vector2Ext.round(new es.Vector2(x, y));\r\n        const tr = es.Vector2Ext.round(new es.Vector2(x + width, y));\r\n        const br = es.Vector2Ext.round(new es.Vector2(x + width, y + height));\r\n        const bl = es.Vector2Ext.round(new es.Vector2(x, y + height));\r\n\r\n        this.drawLine(tl, tr, color, thickness);\r\n        this.drawLine(tr, br, color, thickness);\r\n        this.drawLine(br, bl, color, thickness);\r\n        this.drawLine(bl, tl, color, thickness);\r\n    }\r\n\r\n    public drawCircle(position: es.Vector2, radius: number, color: es.Color, thickness: number = 2) {\r\n        const bounds = new es.Rectangle(position.x - radius, position.y - radius, radius * 2, radius * 2);\r\n        if (this.camera && !this.camera.bounds.intersects(bounds))\r\n            return;\r\n\r\n        this.graphics.strokeColor = new Color(color.r, color.g, color.b);\r\n        this.graphics.lineWidth = thickness;\r\n        this.graphics.circle(position.x, position.y, radius);\r\n        this.strokeNum ++;\r\n        this.flushBatch();\r\n    }\r\n\r\n    public drawCircleLow(position: es.Vector2, radius: number, color: es.Color, thickness: number = 2, resolution: number = 12) {\r\n        let last = es.Vector2.unitX.multiplyScaler(radius);\r\n        let lastP = es.Vector2Ext.perpendicularFlip(last);\r\n\r\n        for (let i = 1; i <= resolution; i ++) {\r\n            const at = es.MathHelper.angleToVector(i * es.MathHelper.PiOver2 / resolution, radius);\r\n            const atP = es.Vector2Ext.perpendicularFlip(at);\r\n\r\n            this.drawLine(es.Vector2.add(position, last), es.Vector2.add(position, at), color, thickness);\r\n            this.drawLine(position.sub(last), position.sub(at), color, thickness);\r\n            this.drawLine(es.Vector2.add(position, lastP), es.Vector2.add(position, atP), color, thickness);\r\n            this.drawLine(position.sub(lastP), position.sub(atP), color, thickness);\r\n\r\n            last = at;\r\n            lastP = atP;\r\n        }\r\n    }\r\n\r\n    public drawRect(x: number, y: number, width: number, height: number, color: es.Color) {\r\n        const rect = new es.Rectangle(x, y, width, height);\r\n        if (this.camera && !this.camera.bounds.intersects(rect))\r\n            return;\r\n            \r\n        this.graphics.strokeColor = new Color(color.r, color.g, color.b);\r\n        this.graphics.lineWidth = 1;\r\n        this.graphics.rect(Math.trunc(x), Math.trunc(y), Math.trunc(width), Math.trunc(height));\r\n        this.strokeNum ++;\r\n        this.flushBatch();\r\n    }\r\n\r\n    public drawLine(start: es.Vector2, end: es.Vector2, color: es.Color, thickness: number = 2) {\r\n        const bounds = es.RectangleExt.boundsFromPolygonVector([start, end]);\r\n        if (this.camera && !this.camera.bounds.intersects(bounds))\r\n            return;\r\n\r\n        this.graphics.lineWidth = thickness;\r\n        this.graphics.strokeColor = new Color(color.r, color.g, color.b);\r\n        this.graphics.moveTo(start.x, start.y);\r\n        this.graphics.lineTo(end.x, end.y);\r\n        this.strokeNum ++;\r\n        this.flushBatch();\r\n    }\r\n\r\n    public drawPixel(position: es.Vector2, color: es.Color, size: number = 1) {\r\n        const destRect = new es.Rectangle(Math.trunc(position.x), Math.trunc(position.y), size, size);\r\n        if (size != 1) {\r\n            destRect.x -= Math.trunc(size * 0.5);\r\n            destRect.y -= Math.trunc(size * 0.5);\r\n        }\r\n\r\n        if (this.camera && !this.camera.bounds.intersects(destRect))\r\n            return;\r\n\r\n        this.graphics.strokeColor = new Color(color.r, color.g, color.b);\r\n        this.graphics.lineWidth = size;\r\n        this.graphics.rect(destRect.x, destRect.y, destRect.width, destRect.height);\r\n        this.strokeNum ++;\r\n        this.flushBatch();\r\n    }\r\n\r\n    public flushBatch() {\r\n        if (this.strokeNum >= this.MAX_STROKE) {\r\n            this.strokeNum = 0;\r\n            this.graphics.stroke();\r\n        }\r\n    }\r\n}"]}