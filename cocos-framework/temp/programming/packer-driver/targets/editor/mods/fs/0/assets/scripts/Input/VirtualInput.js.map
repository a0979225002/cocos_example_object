{"version":3,"sources":["file:///D:/My_Game/%E5%88%A5%E4%BA%BA%E5%AF%AB%E7%9A%84%E5%8F%83%E8%80%83%E7%94%A8/cocos-framework/assets/scripts/Input/VirtualInput.ts"],"names":["VirtualInput","VirtualInputNode","Input","OverlapBehavior","constructor","_virtualInputs","push","deregister","es","List","remove","update"],"mappings":";;;qCAqBsBA,Y,EAmBAC,gB;;;;;;;;;;;;;;;;;;AAxCbC,MAAAA,K,iBAAAA,K;;;;;;;iBAEGC,e;AAAAA,QAAAA,e,CAAAA,e;AAAAA,QAAAA,e,CAAAA,e;AAAAA,QAAAA,e,CAAAA,e;SAAAA,e,+BAAAA,e;;AAgBZ;AACA;AACA;8BACsBH,Y,GAAf,MAAeA,YAAf,CAA4B;AACrBI,QAAAA,WAAW,GAAG;AACpB;AAAA;AAAA,8BAAMC,cAAN,CAAqBC,IAArB,CAA0B,IAA1B;AACH;AAED;AACJ;AACA;;;AACWC,QAAAA,UAAU,GAAE;AACf,cAAIC,EAAE,CAACC,IAAP,CAAY;AAAA;AAAA,8BAAMJ,cAAlB,EAAkCK,MAAlC,CAAyC,IAAzC;AACH;;AAV8B,O;AAenC;AACA;AACA;AACA;;;kCACsBT,gB,GAAf,MAAeA,gBAAf,CAAgC;AAC5BU,QAAAA,MAAM,GAAG,CAAE;;AADiB,O","sourcesContent":["import { Input } from \"./Input\";\r\n\r\nexport enum OverlapBehavior {\r\n    /**\r\n     * 重复的输入将导致相互抵消，并且不会记录任何输入。\r\n     * 例如:按左箭头键，按住时按右箭头键。这将导致相互抵消。\r\n     */\r\n    cancelOut,\r\n    /**\r\n     * 将使用找到的第一个输入\r\n     */\r\n    takeOlder,\r\n    /**\r\n     * 将使用找到的最后一个输入\r\n     */\r\n    takeNewer,\r\n}\r\n\r\n/**\r\n * 虚拟按钮，其状态由其VirtualInputNodes的状态决定\r\n */\r\nexport abstract class VirtualInput {\r\n    protected constructor() {\r\n        Input._virtualInputs.push(this);\r\n    }\r\n\r\n    /**\r\n     * 从输入系统取消虚拟输入的注册。在轮询VirtualInput之后调用这个函数\r\n     */\r\n    public deregister(){\r\n        new es.List(Input._virtualInputs).remove(this);\r\n    }\r\n\r\n    public abstract update(): void;\r\n}\r\n\r\n/**\r\n * 将它们添加到您的VirtualInput中，以定义它如何确定当前输入状态。\r\n * 例如，如果你想检查一个键盘键是否被按下，创建一个VirtualButton并添加一个VirtualButton.keyboardkey\r\n */\r\nexport abstract class VirtualInputNode {\r\n    public update() {}\r\n}"]}