{"version":3,"sources":["file:///D:/My_Game/%E5%88%A5%E4%BA%BA%E5%AF%AB%E7%9A%84%E5%8F%83%E8%80%83%E7%94%A8/cocos-framework/assets/scripts/components/PolygonSprite.ts"],"names":["Color","Sprite","UITransform","Vec3","_decorator","ccclass","property","vec3_temp","polygonAssembler","createData","sprite","renderData","requestRenderData","updateRenderData","vertices","vertexCount","x","length","dataLength","uvDirty","vertDirty","indicesCount","triangles","updateUvs","updateVertices","updateWorldVertices","fillBuffers","renderer","buffer","acquireBufferBatch","indicesOffset","vertexId","vertexOffset","node","fillVerticesWithoutCalc3D","color","iBuf","iData","i","l","dataList","data","byteOffset","isRecreate","request","currBufferBatch","vBuf","vData","vert","y","z","u","v","toArray","uiTransform","getComponent","contentWidth","Math","abs","width","contentHeight","height","appX","anchorX","appY","anchorY","frame","spriteFrame","originalWidth","originalSize","originalHeight","rectWidth","rect","rectHeight","offsetX","offset","offsetY","trimX","trimY","scaleX","trim","scaleY","vertex","updateWorldTransform","matrix","worldMatrix","local","world","set","transformMat4","nu","nv","PolygonSprite","_vertices","value","markForUpdateRenderData","_flushAssembler","assembler","_assembler","destroyRenderData","_renderData","material","getRenderMaterial","_updateColor"],"mappings":"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","sourcesContent":["import { Color, dynamicAtlasManager, IAssembler, IVertices, Mat4, Node, PolygonCollider2D, renderer, Sprite, UI, UITransform, Vec2, Vec3, _decorator } from \"cc\";\r\nconst { ccclass, property } = _decorator;\r\n\r\nconst vec3_temp = new Vec3();\r\n\r\nconst polygonAssembler: IAssembler = {\r\n\r\n    createData(sprite: Sprite) {\r\n        const renderData = sprite.requestRenderData();\r\n        return renderData;\r\n    },\r\n\r\n    updateRenderData(sprite: PolygonSprite) {\r\n        const renderData = sprite.renderData;\r\n        if (renderData) {\r\n            const vertices = sprite.vertices;\r\n            if (vertices) {\r\n                if (renderData.vertexCount !== vertices.x.length) {\r\n                    renderData.vertexCount = vertices.x.length;\r\n\r\n                    // 1 for world vertices, 2 for local vertices\r\n                    renderData.dataLength = renderData.vertexCount * 2;\r\n\r\n                    renderData.uvDirty = renderData.vertDirty = true;\r\n                }\r\n                renderData.indicesCount = vertices.triangles.length;\r\n\r\n                if (renderData.uvDirty) {\r\n                    this.updateUvs(sprite);\r\n                }\r\n\r\n                if (renderData.vertDirty) {\r\n                    this.updateVertices(sprite);\r\n                    this.updateWorldVertices(sprite);\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    fillBuffers(sprite: PolygonSprite, renderer: any) {\r\n        if (sprite === null) {\r\n            return;\r\n        }\r\n\r\n        const vertices = sprite!.vertices;\r\n        if (!vertices) {\r\n            return;\r\n        }\r\n\r\n        // update world vertices\r\n        this.updateWorldVertices(sprite);\r\n\r\n        // buffer\r\n        const buffer = renderer.acquireBufferBatch()!;\r\n        let indicesOffset = buffer.indicesOffset;\r\n        const vertexId: number = buffer.vertexOffset;\r\n\r\n        const node = sprite.node;\r\n        this.fillVerticesWithoutCalc3D(node, renderer, sprite.renderData!, sprite.color);\r\n\r\n        // buffer data may be realloc, need get reference after request.\r\n        const iBuf = buffer.iData!;\r\n        const triangles = vertices.triangles;\r\n        for (let i = 0, l = triangles.length; i < l; i++) {\r\n            iBuf[indicesOffset++] = vertexId + (triangles[i] as number);\r\n        }\r\n    },\r\n\r\n    fillVerticesWithoutCalc3D(node: Node, renderer: any, renderData: any, color: Color) {\r\n        const dataList = renderData.data;\r\n        let buffer = renderer.acquireBufferBatch()!;\r\n        let vertexOffset = buffer.byteOffset >> 2;\r\n\r\n        // buffer\r\n        let vertexCount = renderData.vertexCount;\r\n        let indicesOffset: number = buffer.indicesOffset;\r\n        let vertexId: number = buffer.vertexOffset;\r\n        const isRecreate = buffer.request(vertexCount, renderData.indicesCount);\r\n        if (!isRecreate) {\r\n            buffer = renderer.currBufferBatch!;\r\n            vertexCount = 0;\r\n            indicesOffset = 0;\r\n            vertexId = 0;\r\n        }\r\n\r\n        // buffer data may be realloc, need get reference after request.\r\n        const vBuf = buffer.vData!;\r\n\r\n        for (let i = 0; i < vertexCount; i++) {\r\n            const vert = dataList[i];\r\n            vBuf[vertexOffset++] = vert.x;\r\n            vBuf[vertexOffset++] = vert.y;\r\n            vBuf[vertexOffset++] = vert.z;\r\n            vBuf[vertexOffset++] = vert.u;\r\n            vBuf[vertexOffset++] = vert.v;\r\n            Color.toArray(vBuf, color, vertexOffset);\r\n            vertexOffset += 4;\r\n        }\r\n\r\n        // buffer data may be realloc, need get reference after request.\r\n        const iBuf = buffer.iData;\r\n        iBuf![indicesOffset++] = vertexId;\r\n        iBuf![indicesOffset++] = vertexId + 1;\r\n        iBuf![indicesOffset++] = vertexId + 2;\r\n        iBuf![indicesOffset++] = vertexId + 1;\r\n        iBuf![indicesOffset++] = vertexId + 3;\r\n        iBuf![indicesOffset++] = vertexId + 2;\r\n    },\r\n\r\n    updateVertices(sprite: PolygonSprite) {\r\n        const node = sprite.node!;\r\n        const uiTransform = node.getComponent(UITransform)!;\r\n        const contentWidth = Math.abs(uiTransform.width);\r\n        const contentHeight = Math.abs(uiTransform.height);\r\n        const appX = uiTransform.anchorX * contentWidth;\r\n        const appY = uiTransform.anchorY * contentHeight;\r\n\r\n        const frame = sprite.spriteFrame!;\r\n        const vertices = sprite!.vertices!;\r\n        const x = vertices.x;\r\n        const y = vertices.y;\r\n        const originalWidth = frame.originalSize.width;\r\n        const originalHeight = frame.originalSize.height;\r\n        const rectWidth = frame.rect.width;\r\n        const rectHeight = frame.rect.height;\r\n        const offsetX: number = frame.offset.x;\r\n        const offsetY: number = frame.offset.y;\r\n        const trimX = offsetX + (originalWidth - rectWidth) / 2;\r\n        const trimY = offsetY + (originalHeight - rectHeight) / 2;\r\n\r\n        const scaleX = contentWidth / (sprite.trim ? rectWidth : originalWidth);\r\n        const scaleY = contentHeight / (sprite.trim ? rectHeight : originalHeight);\r\n\r\n        const renderData = sprite.renderData!;\r\n        const data = renderData.data;\r\n\r\n        if (!sprite.trim) {\r\n            for (let i = 0, l: number = x.length; i < l; i++) {\r\n                const vertex = data[i + l];\r\n                vertex.x = (x[i]) * scaleX - appX;\r\n                vertex.y = (originalHeight - y[i]) * scaleY - appY;\r\n            }\r\n        } else {\r\n            for (let i = 0, l: number = x.length; i < l; i++) {\r\n                const vertex = data[i + l];\r\n                vertex.x = (x[i] - trimX) * scaleX - appX;\r\n                vertex.y = (originalHeight - y[i] - trimY) * scaleY - appY;\r\n            }\r\n        }\r\n\r\n        renderData.vertDirty = false;\r\n    },\r\n\r\n    updateWorldVertices(sprite: PolygonSprite) {\r\n        const node = sprite.node;\r\n        const renderData = sprite.renderData!;\r\n        const data = renderData.data;\r\n\r\n        node.updateWorldTransform();\r\n        const matrix = node.worldMatrix;\r\n        for (let i = 0, l: number = renderData.vertexCount; i < l; i++) {\r\n            const local = data[i + l];\r\n            const world = data[i];\r\n            Vec3.set(vec3_temp, local.x, local.y, 0);\r\n            Vec3.transformMat4(world, vec3_temp, matrix);\r\n        }\r\n    },\r\n\r\n    updateUvs(sprite: PolygonSprite) {\r\n        const vertices = sprite.vertices!;\r\n        const u = vertices.nu;\r\n        const v = vertices.nv;\r\n\r\n        const renderData = sprite.renderData!;\r\n        const data = renderData.data;\r\n        for (let i = 0, l = u.length; i < l; i++) {\r\n            const vertex = data[i];\r\n            vertex.u = u[i];\r\n            vertex.v = v[i];\r\n        }\r\n\r\n        renderData.uvDirty = false;\r\n    },\r\n\r\n};\r\n\r\n@ccclass('PolygonSprite')\r\nexport class PolygonSprite extends Sprite {\r\n    protected _vertices: IVertices | null = null;\r\n    get vertices() {\r\n        return this._vertices;\r\n    }\r\n    set vertices(value) {\r\n        this._vertices = value;\r\n        this.markForUpdateRenderData();\r\n    }\r\n\r\n    protected _flushAssembler() {\r\n        let assembler = polygonAssembler;\r\n        if (this._assembler !== assembler) {\r\n            this.destroyRenderData();\r\n            this._assembler = assembler;\r\n        }\r\n\r\n        if (!this._renderData) {\r\n            if (this._assembler && this._assembler.createData) {\r\n                this._renderData = this._assembler.createData(this);\r\n                this._renderData!.material = this.getRenderMaterial(0);\r\n                this.markForUpdateRenderData();\r\n                this._updateColor();\r\n            }\r\n        }\r\n    }\r\n}"]}