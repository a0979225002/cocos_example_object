(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
(function (lcc) {
    var TAG = "lcc/base/base.ts";
    /**
     * @zh
     * 版本号
     */
    lcc.VERSION = '1.0.0';
    /**
     * @zh
     * 调试用宏定义
     */
    var DEBUG;
    (function (DEBUG) {
        /**
         * @zh
         * 基础模块
         */
        DEBUG.BASE = false;
        /**
         * @zh
         * 存档模块
         */
        DEBUG.ARCHIVE = false;
        /**
         * @zh
         * 音频模块
         */
        DEBUG.AUDIO = false;
        /**
         * @zh
         * 配置模块
         */
        DEBUG.CONFIG = false;
        /**
         * @zh
         * 数据表模块
         */
        DEBUG.TABLE = false;
        /**
         * @zh
         * 语言模块
         */
        DEBUG.LANG = false;
        /**
         * @zh
         * 网络模块
         */
        DEBUG.NETWORK = false;
        /**
         * @zh
         * 定时器模块
         */
        DEBUG.TIMER = false;
        /**
         * @zh
         * 工作者模块
         */
        DEBUG.WORKER = false;
    })(DEBUG = lcc.DEBUG || (lcc.DEBUG = {}));
    ;
})(lcc || (lcc = {}));
// 挂载到全局
globalThis.lcc = lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
(function (lcc) {
    var js;
    (function (js) {
        var TAG = "lcc/utils/js.ts";
        /**
         * @zh
         * 格式化字符串, Map参数
         *
         * @param str - 格式化的字符串
         * @param map - 外部映射表，优先解析
         */
        function formatString(str, map) {
            if (!isEmptyMap(map)) {
                return str.replace(/\$\{([\w\d_:\.]+)\}/g, function (k, m) {
                    var value = map[m];
                    if (value != null) {
                        return value;
                    }
                    return "${" + m + "}";
                });
            }
            else {
                return str;
            }
        }
        js.formatString = formatString;
        /**
         * @zh
         * 日期格式化
         *
         * @param fmt - 格式字符串
         * @param date - 日期对象
         */
        function formatDate(fmt, date) {
            var ret;
            var opt = {
                "Y+": date.getFullYear().toString(),
                "m+": (date.getMonth() + 1).toString(),
                "d+": date.getDate().toString(),
                "H+": date.getHours().toString(),
                "M+": date.getMinutes().toString(),
                "S+": date.getSeconds().toString() // 秒
                // 有其他格式化字符需求可以继续添加，必须转化成字符串
            };
            for (var k in opt) {
                ret = new RegExp("(" + k + ")").exec(fmt);
                if (ret) {
                    fmt = fmt.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (opt[k].padStart(ret[1].length, "0")));
                }
                ;
            }
            ;
            return fmt;
        }
        js.formatDate = formatDate;
        /**
         * @zh
         * 创建map表
         *
         * @param forceDictMode
         */
        function createMap(forceDictMode) {
            var map = Object.create(null);
            if (forceDictMode) {
                var INVALID_IDENTIFIER_1 = '.';
                var INVALID_IDENTIFIER_2 = '/';
                // assign dummy values on the object
                map[INVALID_IDENTIFIER_1] = 1;
                map[INVALID_IDENTIFIER_2] = 1;
                delete map[INVALID_IDENTIFIER_1];
                delete map[INVALID_IDENTIFIER_2];
            }
            return map;
        }
        js.createMap = createMap;
        /**
         * @zh
         * 判断是否为空map表
         *
         * @param map
         */
        function isEmptyMap(map) {
            for (var k in map) {
                return false;
            }
            return true;
        }
        js.isEmptyMap = isEmptyMap;
        /**
         * @zh
         * 通过Map的值
         *
         * @param map - Map对象
         * @param path - 路径
         * @param split - 分隔符
         */
        function getMapValue(map, path, split) {
            if (split === void 0) { split = "/"; }
            if (path[0] == split) {
                path = path.substr(1, path.length - 1);
            }
            if (path[path.length - 1] == split) {
                path = path.substr(0, path.length - 1);
            }
            var value = map;
            for (var _i = 0, _a = path.split(split); _i < _a.length; _i++) {
                var n = _a[_i];
                if (!value) {
                    return null;
                }
                value = value[n];
            }
            return value;
        }
        js.getMapValue = getMapValue;
        /**
         * @zh
         * 通过路径设置Map的值
         *
         * @param map - Map对象
         * @param path - 路径
         * @param value - 值
         * @param split - 分隔符
         */
        function setMapValue(map, path, value, split) {
            if (split === void 0) { split = "/"; }
            if (path[path.length - 1] == split) {
                path = path.substr(0, path.length - 1);
            }
            var spaths = path.split(split);
            var dest = map;
            for (var i = 0; i < spaths.length - 1; i++) {
                var p = spaths[i];
                var nDest = dest[p];
                if (!nDest) {
                    nDest = createMap();
                    dest[p] = nDest;
                }
                dest = nDest;
            }
            dest[spaths[spaths.length - 1]] = value;
        }
        js.setMapValue = setMapValue;
        /**
         * @zh
         * 合并Map表<br/>
         * Map表合并规则：<br/>
         * 遍历源Map表字段，对比目的Map表对应字段，存在几种情况：<br/>
         * 1、目的Map表中不存在该字段，直接设置为源Map表字段<br/>
         * 2、目的Map表字段和源Map表字段同为数组(Array)，把字段的源Map表数组复制到目的Map表数组中<br/>
         * 3、目的Map表字段和源Map表字段同为对象(Object)，以字段的目的Map表和源Map表为参数再次调用次函数<br/>
         * 4、其他情况，说明存在冲突。警告后，源Map表字段直接覆盖目的Map表字段
         *
         * @param dmap - 目的Map表
         * @param smap - 源Map表
         * @param options - 选项，主要可以指定异常输出标签和源文件
         */
        function mergeMap(dmap, smap, options) {
            if (options === void 0) { options = {}; }
            for (var key in smap) {
                var svalue = smap[key];
                var dvalue = dmap[key];
                if (dvalue == null) {
                    dmap[key] = svalue;
                }
                else {
                    var stype = typeof svalue;
                    var dtype = typeof dvalue;
                    if (dtype == 'object' && stype == dtype) {
                        var sarray = svalue instanceof Array;
                        var darray = dvalue instanceof Array;
                        if (sarray != darray) {
                            cc.warn(options.tag || TAG, "invalid merge type array '" + sarray + "-" + darray + "' in key '" + key + "' < " + (options.source || '[unknown]'));
                            dmap[key] = svalue;
                        }
                        else {
                            if (darray) {
                                dvalue.push.apply(dvalue, svalue);
                            }
                            else {
                                mergeMap(dvalue, svalue, options);
                            }
                        }
                    }
                    else {
                        cc.warn(options.tag || TAG, "invalid merge type '" + stype + "-" + dtype + "' in key '" + key + "' < " + (options.source || '[unknown]'));
                        dmap[key] = svalue;
                    }
                }
            }
        }
        js.mergeMap = mergeMap;
        /**
         * @zh
         * 更新Map表<br/>
         * Map表更新规则：<br/>
         * 遍历源Map表字段，对比目的Map表对应字段，存在几种情况：<br/>
         * 1、目的Map表中不存在该字段，直接设置为源Map表字段<br/>
         * 2、目的Map表字段和源Map表字段同为数组(Array)，直接设置为源Map表字段<br/>
         * 3、目的Map表字段和源Map表字段同为对象(Object)，以字段的目的Map表和源Map表为参数再次调用次函数<br/>
         *
         * @param dmap - 目的Map表
         * @param smap - 源Map表
         */
        function updateMap(dmap, smap) {
            for (var key in smap) {
                var svalue = smap[key];
                var dvalue = dmap[key];
                if (dvalue == null) {
                    dmap[key] = svalue;
                }
                else {
                    var stype = typeof svalue;
                    var dtype = typeof dvalue;
                    if (dtype == 'object' && stype == dtype) {
                        var sarray = svalue instanceof Array;
                        var darray = dvalue instanceof Array;
                        if (sarray != darray) {
                            dmap[key] = svalue;
                        }
                        else {
                            if (darray) {
                                dmap[key] = svalue;
                            }
                            else {
                                this.updateMap(dvalue, svalue);
                            }
                        }
                    }
                    else {
                        dmap[key] = svalue;
                    }
                }
            }
        }
        js.updateMap = updateMap;
        /**
         * @zh
         * 提取Map表<br/>
         * Map表提取规则：<br/>
         * 遍历目的Map表字段，对比源Map表对应字段，存在几种情况：<br/>
         * 1、源Map表中不存在该字段，跳过<br/>
         * 1、源Map表字段和目的Map表字段类型不同，跳过<br/>
         * 2、源Map表字段和目的Map表字段类型相同，不为(Object)，目的Map表字段设置为源Map表字段<br/>
         * 3、源Map表字段和目的Map表字段类型相同，同为(Object)，以字段的目的Map表和源Map表为参数再次调用次函数<br/>
         *
         * @param dmap - 目的Map表
         * @param smap - 源Map表
         */
        function extractMap(dmap, smap) {
            for (var key in dmap) {
                var dvalue = dmap[key];
                var svalue = smap[key];
                if (svalue != null) {
                    var stype = typeof svalue;
                    var dtype = typeof dvalue;
                    if (stype == dtype) {
                        if (dtype == 'object') {
                            var sarray = svalue instanceof Array;
                            var darray = dvalue instanceof Array;
                            if (sarray == darray) {
                                if (darray) {
                                    dmap[key] = svalue;
                                }
                                else {
                                    this.extractMap(dvalue, svalue);
                                }
                            }
                        }
                        else {
                            dmap[key] = svalue;
                        }
                    }
                }
            }
        }
        js.extractMap = extractMap;
        /**
         * @zh
         * 缓冲转换为UTF16字符串
         *
         * @param buff - 缓冲
         */
        function ab2str(buff) {
            return String.fromCharCode.apply(null, new Uint16Array(buff));
        }
        js.ab2str = ab2str;
        /**
         * @zh
         * UTF16字符串转为缓冲
         *
         * @param str - 字符串
         */
        function str2ab(str) {
            var buff = new ArrayBuffer(str.length * 2);
            var bufView = new Uint16Array(buff);
            for (var i = 0, l = str.length; i < l; i++) {
                bufView[i] = str.charCodeAt(i);
            }
            return buff;
        }
        js.str2ab = str2ab;
        /**
         * @zh
         * 重复指定的字符串
         *
         * @param src -重复的字符串
         * @param n - 重复次数
         */
        function repeat(src, n) {
            return (new Array(n + 1)).join(src);
        }
        js.repeat = repeat;
        /**
         * @zh
         * base64字符串转为Uint8Array
         *
         * @param b64str - base64字符串
         */
        function b642u8a(b64str) {
            repeat('123', 3);
            var padding = repeat('=', (4 - b64str.length % 4) % 4);
            var base64 = (b64str + padding)
                .replace(/\-/g, '+')
                .replace(/_/g, '/');
            var rawData = atob(base64);
            var outputArray = new Uint8Array(rawData.length);
            for (var i = 0; i < rawData.length; ++i) {
                outputArray[i] = rawData.charCodeAt(i);
            }
            return outputArray;
        }
        js.b642u8a = b642u8a;
        /**
         * @zh
         * ArrayBuffer转为Base64字符串
         *
         * @param buff - 缓冲对象
         */
        function ab2b64(buff) {
            var binary = '';
            var bytes = new Uint8Array(buff);
            var len = bytes.byteLength;
            for (var i = 0; i < len; i++) {
                binary += String.fromCharCode(bytes[i]);
            }
            return btoa(binary);
        }
        js.ab2b64 = ab2b64;
        /**
         * @zh
         * 合并ArrayBuffer
         *
         * @param arrays - 数组
         */
        function mergeABs() {
            var arrays = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                arrays[_i] = arguments[_i];
            }
            var totalLen = 0;
            var ui8arrays = [];
            for (var _a = 0, arrays_1 = arrays; _a < arrays_1.length; _a++) {
                var array = arrays_1[_a];
                ui8arrays.push(new Uint8Array(array));
                totalLen += array.byteLength;
            }
            var res = new Uint8Array(totalLen);
            var offset = 0;
            for (var _b = 0, ui8arrays_1 = ui8arrays; _b < ui8arrays_1.length; _b++) {
                var ui8array = ui8arrays_1[_b];
                res.set(ui8array, offset);
                offset += ui8array.length;
            }
            return res.buffer;
        }
        js.mergeABs = mergeABs;
        /**
         * @zh
         * 复制ArrayBuffer
         *
         * @param src - 源ArrayBuffer
         * @param dest - 目的ArrayBuffer
         * @param start - 目的开始位置
         */
        function copyAB(src, dest, start) {
            (new Uint8Array(dest)).set(new Uint8Array(src), start);
        }
        js.copyAB = copyAB;
    })(js = lcc.js || (lcc.js = {}));
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../utils/js.ts" />
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../utils/js.ts" />
(function (lcc) {
    var TAG = "lcc/base/doing.ts";
    /**
     * @zh
     * 计数器
     */
    var Counter = /** @class */ (function () {
        function Counter() {
            /**
             * @zh
             * 计数值
             */
            this._count = 0;
            /**
             * @zh
             * 归零回调
             */
            this._onZero = null;
        }
        /**
         * @zh
         * 检查归零
         */
        Counter.prototype.checkZero = function () {
            if (this._count <= 0) {
                if (this._onZero) {
                    var callback = this._onZero;
                    this._onZero = null;
                    try {
                        callback();
                    }
                    catch (e) {
                        cc.error(TAG, "checkZero Exception " + e);
                    }
                }
            }
        };
        /**
         * 重置计数
         */
        Counter.prototype.reset = function () {
            this._count = 0;
            this.checkZero();
        };
        /**
         * @zh
         * 增加计数
         */
        Counter.prototype.addCount = function () {
            this._count++;
        };
        /**
         * @zh
         * 减少计数
         */
        Counter.prototype.decCount = function () {
            this._count--;
            this.checkZero();
        };
        /**
         * @zh
         * 在回调函数内计数
         *
         * @param callback - 回调函数
         */
        Counter.prototype.in = function (callback) {
            return __awaiter(this, void 0, void 0, function () {
                var e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.addCount();
                            if (!callback) return [3 /*break*/, 4];
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, callback()];
                        case 2:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            e_1 = _a.sent();
                            cc.error(TAG, "in Exception " + e_1);
                            return [3 /*break*/, 4];
                        case 4:
                            this.decCount();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 直到归零
         */
        Counter.prototype.untilZero = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    if (this._count > 0) {
                        return [2 /*return*/, new Promise(function (resolve) {
                                _this._onZero = resolve;
                            })];
                    }
                    return [2 /*return*/];
                });
            });
        };
        return Counter;
    }());
    /**
     * @zh
     * 工作中类
     */
    var Doing = /** @class */ (function () {
        function Doing() {
            /**
             * 索引加载
             */
            this.indexLoad = new Counter();
            /**
             * 语言更新
             */
            this.langUpdate = new Counter();
            /**
             * 状态初始化
             */
            this.stateInitialize = new Counter();
            /**
             * 状态释放
             */
            this.stateRelease = new Counter();
        }
        /**
         * 重置工作中
         */
        Doing.prototype.reset = function () {
            this.indexLoad.reset();
            this.langUpdate.reset();
            this.stateInitialize.reset();
            this.stateRelease.reset();
        };
        return Doing;
    }());
    /**
     * @zh
     * 工作中对象
     */
    lcc.doing = new Doing();
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../utils/js.ts" />
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../utils/js.ts" />
(function (lcc) {
    var TAG = "lcc/base/variable.ts";
    /**
     * @zh
     * 变量类
     */
    var Variable = /** @class */ (function () {
        function Variable() {
            /**
             * @zh
             * 映射表
             */
            this._map = lcc.js.createMap();
        }
        /**
         * @zh
         * 设置变量
         *
         * @param vname - 变量名称
         * @param value - 变量值
         */
        Variable.prototype.set = function (vname, value) {
            lcc.DEBUG.BASE && cc.log(TAG, "set " + vname + " => " + value);
            this._map[vname] = value;
        };
        /**
         * @zh
         * 获得变量
         *
         * @param vname - 变量名称
         */
        Variable.prototype.get = function (vname) {
            return this._map[vname];
        };
        /**
         * @zh
         * 移除所有变量
         */
        Variable.prototype.removeAll = function () {
            for (var vname in Object.keys(this._map)) {
                delete this._map[vname];
            }
            lcc.DEBUG.BASE && cc.log(TAG, "removeAll");
        };
        /**
         * @zh
         * 解析字符串中的变量
         *
         * @param str - 字符串
         * @param extMap - 外部映射表，优先解析
         */
        Variable.prototype.parseString = function (str, extMap) {
            var _this = this;
            if (extMap === void 0) { extMap = {}; }
            return str.replace(/\$\{([\w\d_:\.]+)\}/g, function (k, m) {
                if (m.indexOf(":") == -1) {
                    var value = extMap[m];
                    if (value != null) {
                        return value;
                    }
                    value = _this._map[m];
                    if (value != null) {
                        return value;
                    }
                }
                else {
                    var parts = m.split(":");
                    var value = extMap[parts[0]];
                    if (typeof value == "function") {
                        return value.apply(void 0, parts[1].split(","));
                    }
                    value = _this._map[parts[0]];
                    if (typeof value == "function") {
                        return value.apply(void 0, parts[1].split(","));
                    }
                }
                return "${" + m + "}";
            });
        };
        return Variable;
    }());
    /**
     * @zh
     * 变量对象
     */
    lcc.variable = new Variable();
    /**
     * @zh
     * 翻译JSON对象中的变量
     *
     * @param json json对象
     * @param localpath 文件当前路径
     */
    function translateJSON(json, localpath) {
        return JSON.parse(lcc.variable.parseString(JSON.stringify(json), { localpath: localpath || "" }));
    }
    lcc.translateJSON = translateJSON;
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="./variable.ts" />
/// <reference path="../utils/js.ts" />
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="./variable.ts" />
/// <reference path="../utils/js.ts" />
(function (lcc) {
    var TAG = "lcc/base/reference.ts";
    /**
     * @zh
     * 引用冲突
     */
    lcc.ERROR_REFERENCE_CONFLICT = true;
    /**
     * @zh
     * 获得引用key字符串
     *
     * @param key 引用key对象
     */
    function getRefKeyString(key) {
        if (key.pack == null) {
            key.pack = lcc.variable.get('__LoadPack__') || 'resources';
        }
        return key.pack + "://" + key.path;
    }
    lcc.getRefKeyString = getRefKeyString;
    /**
     * @zh
     * 引用类
     */
    var Reference = /** @class */ (function () {
        function Reference() {
            /**
             * @zh
             * 映射表
             */
            this._map = lcc.js.createMap();
        }
        /**
         * @zh
         * 获得指定引用
         *
         * @param key 键
         */
        Reference.prototype.get = function (key) {
            if (typeof key != 'string') {
                key = getRefKeyString(key);
            }
            return this._map[key];
        };
        /**
         * @zh
         * 添加指定引用
         *
         * @param key 键
         * @param value 值
         */
        Reference.prototype.add = function (key, value) {
            if (typeof key != 'string') {
                key = getRefKeyString(key);
            }
            if (this._map[key]) {
                var msg = "key " + key + " conflict";
                if (lcc.ERROR_REFERENCE_CONFLICT) {
                    cc.error(TAG, msg);
                }
                else {
                    cc.warn(TAG, msg);
                }
            }
            lcc.DEBUG.BASE && cc.log(TAG, "add " + key + " => " + value);
            this._map[key] = value;
        };
        /**
         * @zh
         * 遍历引用
         *
         * @param callback - 回调函数
         */
        Reference.prototype.foreach = function (callback) {
            for (var k in this._map) {
                if (callback(k, this._map[k])) {
                    break;
                }
            }
        };
        /**
         * @zh
         * 移除指定引用
         *
         * @param key 键
         */
        Reference.prototype.remove = function (key) {
            if (typeof key != 'string') {
                key = getRefKeyString(key);
            }
            lcc.DEBUG.BASE && cc.log(TAG, "remove " + key);
            delete this._map[key];
        };
        /**
         * @zh
         * 通过包名称移除
         *
         * @param pack 包名称
         */
        Reference.prototype.removeByPack = function (pack) {
            var prefix = pack + "://";
            for (var _i = 0, _a = Object.keys(this._map); _i < _a.length; _i++) {
                var key = _a[_i];
                if (key.indexOf(prefix) == 0) {
                    this.remove(key);
                }
            }
        };
        /**
         * @zh
         * 移除所有引用
         */
        Reference.prototype.removeAll = function () {
            for (var _i = 0, _a = Object.keys(this._map); _i < _a.length; _i++) {
                var key = _a[_i];
                this.remove(key);
            }
        };
        return Reference;
    }());
    /**
     * @zh
     * 引用对象
     */
    lcc.reference = new Reference();
    /**
     * @zh
     * 装饰器
     */
    var _decorator;
    (function (_decorator) {
        /**
         * @zh
         * lcc引用类装饰器
         */
        function refclass(key) {
            return function (target) {
                key = key || target.prototype.constructor.name;
                if (typeof key != 'string') {
                    key = getRefKeyString(key);
                }
                lcc.reference.add(key, target);
            };
        }
        _decorator.refclass = refclass;
        ;
    })(_decorator = lcc._decorator || (lcc._decorator = {}));
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="./doing.ts" />
/// <reference path="./reference.ts" />
/// <reference path="./variable.ts" />
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="./doing.ts" />
/// <reference path="./reference.ts" />
/// <reference path="./variable.ts" />
(function (lcc) {
    var TAG = "lcc/base/state.ts";
    /**
     * @zh
     * 框架状态
     */
    var State = /** @class */ (function (_super) {
        __extends(State, _super);
        function State() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * @zh
             * 是否已经初始化
             */
            _this._initialized = false;
            return _this;
        }
        Object.defineProperty(State.prototype, "initialized", {
            /**
             * @zh
             * 判断是否已经初始化
             */
            get: function () {
                return this._initialized;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * @zh
         * 初始化
         */
        State.prototype.initialize = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!this._initialized) return [3 /*break*/, 2];
                            lcc.reference.removeAll();
                            lcc.variable.removeAll();
                            lcc.doing.reset();
                            try {
                                this.emit('initialize');
                            }
                            catch (e) {
                                cc.error(TAG, "initialize Exception " + e);
                            }
                            return [4 /*yield*/, lcc.doing.stateInitialize.untilZero()];
                        case 1:
                            _a.sent();
                            this._initialized = true;
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 释放
         */
        State.prototype.release = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this._initialized) return [3 /*break*/, 2];
                            this._initialized = false;
                            lcc.doing.reset();
                            try {
                                this.emit('release');
                            }
                            catch (e) {
                                cc.error(TAG, "release Exception " + e);
                            }
                            return [4 /*yield*/, lcc.doing.stateRelease.untilZero()];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        return State;
    }(cc.EventTarget));
    /**
     * @zh
     * 框架状态对象
     */
    lcc.state = new State();
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../base/state.ts" />
/// <reference path="../utils/js.ts" />
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../base/state.ts" />
/// <reference path="../utils/js.ts" />
(function (lcc) {
    var TAG = "lcc/archive/archive-manager.ts";
    /**
     * @zh
     * 事件点块位数
     */
    var EPOINT_BLOCK = 32;
    /**
     * @zh
     * 存档信息项
     */
    var INFO_ITEM = "archive_info";
    /**
     * @zh
     * 存档插槽前缀
     */
    var DATA_PREFIX = "archive_data_";
    /**
     * @zh
     * 默认存档事件段
     */
    lcc.ARCHIVE_EVENTS_SEGEMENT = 'default';
    /**
     * @zh
     * 存档管理器
     */
    var ArchiveManager = /** @class */ (function (_super) {
        __extends(ArchiveManager, _super);
        /**
         * @zh
         * 构造函数
         */
        function ArchiveManager() {
            var _this = _super.call(this) || this;
            /**
             * @zh
             * 存档信息
             */
            _this._infos = lcc.js.createMap();
            /**
             * @zh
             * 当前存档插槽
             */
            _this._nowSlot = 0;
            /**
             * @zh
             * 当前存档数据
             */
            _this._data = null;
            lcc.state.on('initialize', function () {
                lcc.doing.stateInitialize.in(function () {
                    _this._infos = JSON.parse(cc.sys.localStorage.getItem(INFO_ITEM) || "{}");
                    _this._nowSlot = 0;
                    _this._data = null;
                });
            });
            lcc.state.on('release', function () {
                lcc.doing.stateRelease.in(function () {
                    _this.clear();
                });
            });
            return _this;
        }
        /**
         * @zh
         * 获得当前存档信息
         */
        ArchiveManager.prototype.getArchiveInfo = function () {
            return this._infos[this, this._nowSlot];
        };
        /**
         * @zh
         * 获得当前存档数据
         */
        ArchiveManager.prototype.getArchiveData = function () {
            return this._data;
        };
        /**
         * @zh
         * 获得所有存档
         */
        ArchiveManager.prototype.getArchives = function () {
            var archives = [];
            for (var s in this._infos) {
                archives.push(this._infos[s]);
            }
            archives.sort(function (a, b) {
                return b.time - a.time;
            });
            return archives;
        };
        /**
         * @zh
         * 加载存档
         *
         * @param slot - 插槽
         */
        ArchiveManager.prototype.loadArchive = function (slot) {
            this._nowSlot = slot;
            var datas = cc.sys.localStorage.getItem(DATA_PREFIX + this._nowSlot);
            if (datas) {
                this._data = JSON.parse(datas);
                try {
                    this.emit("load", this._data, this._infos[this._nowSlot]);
                    lcc.DEBUG.ARCHIVE && cc.log(TAG, "loadArchive " + slot);
                    return true;
                }
                catch (e) {
                    cc.error(TAG, "loadArchive ' Exception " + e);
                }
            }
        };
        /**
         * @zh
         * 保存存档
         *
         * @param slot - 插槽
         */
        ArchiveManager.prototype.saveArchive = function (slot) {
            this._nowSlot = slot;
            if (this._nowSlot && this._infos && this._data) {
                var info = this._infos[this._nowSlot];
                try {
                    this.emit("save", this._data, info);
                    info.time = Math.floor(Date.now() / 1000);
                    cc.sys.localStorage.setItem(INFO_ITEM, JSON.stringify(this._infos));
                    cc.sys.localStorage.setItem(DATA_PREFIX + this._nowSlot, JSON.stringify(this._data));
                    lcc.DEBUG.ARCHIVE && cc.log(TAG, "saveArchive " + slot);
                }
                catch (e) {
                    cc.error(TAG, "saveArchive ' Exception " + e);
                }
            }
        };
        /**
         * @zh
         * 删除存档
         *
         * @param slot - 插槽
         */
        ArchiveManager.prototype.deleteArchive = function (slot) {
            if (this._nowSlot == slot) {
                this._data = null;
            }
            this._nowSlot = slot;
            if (this._infos[this._nowSlot]) {
                delete this._infos[this._nowSlot];
                cc.sys.localStorage.setItem(INFO_ITEM, JSON.stringify(this._infos));
                cc.sys.localStorage.setItem(DATA_PREFIX + this._nowSlot, "");
                lcc.DEBUG.ARCHIVE && cc.log(TAG, "deleteArchive " + slot);
                return true;
            }
        };
        /**
         * @zh
         * 新建存档
         *
         * @param slot - 插槽
         * @param name - 存档名
         */
        ArchiveManager.prototype.createArchive = function (slot, name) {
            this._nowSlot = slot;
            var info = {
                slot: slot,
                name: name || "New Archive",
                time: Math.floor(Date.now() / 1000),
                version: "1.0.0",
            };
            this._infos[slot] = info;
            this._data = {
                eventps: {
                    default: lcc.js.createMap() // 默认
                }
            };
            try {
                this.emit("create", this._data, info);
                lcc.DEBUG.ARCHIVE && cc.log(TAG, "createArchive " + slot + " name:" + name);
            }
            catch (e) {
                cc.error(TAG, "createArchive ' Exception " + e);
            }
        };
        /**
         * @zh
         * 检查事件点
         *
         * @param point - 事件
         * @param segment - 段
         */
        ArchiveManager.prototype.checkEventPoint = function (point, segment) {
            if (segment === void 0) { segment = lcc.ARCHIVE_EVENTS_SEGEMENT; }
            point--;
            var valofst = Math.floor(point / EPOINT_BLOCK);
            var bitofst = point % EPOINT_BLOCK;
            var segeps = this._data.eventps[segment];
            if (!segeps) {
                return false;
            }
            var epsval = segeps[valofst];
            if (!epsval) {
                return false;
            }
            return ((epsval & (1 << bitofst)) != 0);
        };
        /**
         * @zh
         * 设置事件点
         *
         * @param point - 事件
         * @param state - 状态
         * @param segment - 段
         */
        ArchiveManager.prototype.setEventPoint = function (point, state, segment) {
            if (segment === void 0) { segment = lcc.ARCHIVE_EVENTS_SEGEMENT; }
            point--;
            var valofst = Math.floor(point / EPOINT_BLOCK);
            var bitofst = point % EPOINT_BLOCK;
            var segeps = this._data.eventps[segment];
            if (!segeps) {
                segeps = lcc.js.createMap();
                this._data.eventps[segment] = segeps;
            }
            var epsval = segeps[valofst] || 0;
            if (state) {
                epsval = epsval | (1 << bitofst);
            }
            else {
                epsval = epsval & (~(1 << bitofst));
            }
            segeps[valofst] = epsval;
            lcc.DEBUG.ARCHIVE && cc.log(TAG, "setEventPoint " + point + " state:" + state + " segment:" + segment);
        };
        return ArchiveManager;
    }(cc.EventTarget));
    ;
    /**
     * @zh
     * 存档管理器对象
     */
    lcc.archiveMgr = new ArchiveManager();
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
(function (lcc) {
    var TAG = "lcc/network/http/http.ts";
    /**
     * @zh
     * HTTP发送默认超时时间
     */
    lcc.HTTP_SEND_TIMEOUT = 5;
    /**
     * @zh
     * http功能类
     */
    var http;
    (function (http) {
        /**
         * @zh
         * 请求索引
         */
        var requestIndex = 0;
        /**
         * @zh
         * http POST 数据
         *
         * @param url - URL
         * @param data - 数据
         * @param extHeaders - 额外header
         * @param timeout - 可选，自定义超时时间
         *
         * @return Promise<string>
         */
        function post(url, data, extHeaders, timeout) {
            return new Promise(function (resole) {
                var reqid = "req_" + requestIndex++;
                var xhr = new XMLHttpRequest();
                xhr.onreadystatechange = function () {
                    if (xhr.readyState === 4 && xhr.status == 200) {
                        lcc.timerMgr.removeTimer({
                            group: "lcc.http",
                            key: reqid,
                        });
                        resole(xhr.responseText);
                    }
                };
                lcc.timerMgr.addTimer(timeout || lcc.HTTP_SEND_TIMEOUT, function () {
                    xhr.onreadystatechange = null;
                    resole(null);
                }, {
                    group: "lcc.http",
                    key: reqid,
                });
                xhr.open("POST", url, true);
                xhr.setRequestHeader('Access-Control-Allow-Origin', '*');
                xhr.setRequestHeader('Access-Control-Allow-Methods', 'GET, POST');
                xhr.setRequestHeader('Access-Control-Allow-Headers', 'x-requested-with,content-type');
                if (extHeaders) {
                    for (var k in extHeaders) {
                        xhr.setRequestHeader(k, extHeaders[k]);
                    }
                }
                xhr.send(data);
            });
        }
        http.post = post;
        /**
         * @zh
         * http POST发送JSON与接收JSON数据
         *
         * @param url - URL
         * @param data - JSON对象
         * @param timeout - 可选，自定义超时时间
         *
         * @return Promise<[JSON]>
         */
        function postJson(url, data, timeout) {
            return __awaiter(this, void 0, void 0, function () {
                var content;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, post(url, JSON.stringify(data), { "Content-Type": "application/json" }, timeout)];
                        case 1:
                            content = _a.sent();
                            if (content) {
                                return [2 /*return*/, JSON.parse(content)];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        }
        http.postJson = postJson;
        /**
         * @zh
         * http GET 数据
         *
         * @param url - URL
         * @param timeout - 可选，自定义超时时间
         *
         * @return Promise<string>
         */
        function get(url, timeout) {
            return new Promise(function (resole) {
                var reqid = "req_" + requestIndex++;
                var xhr = new XMLHttpRequest();
                xhr.onreadystatechange = function () {
                    if (xhr.readyState === 4 && xhr.status == 200) {
                        lcc.timerMgr.removeTimer({
                            group: "lcc.http",
                            key: reqid,
                        });
                        resole(xhr.responseText);
                    }
                };
                lcc.timerMgr.addTimer(timeout || lcc.HTTP_SEND_TIMEOUT, function () {
                    xhr.onreadystatechange = null;
                    resole(null);
                }, {
                    group: "lcc.http",
                    key: reqid,
                });
                xhr.open("GET", url, true);
                xhr.setRequestHeader('Access-Control-Allow-Origin', '*');
                xhr.setRequestHeader('Access-Control-Allow-Methods', 'GET, POST');
                xhr.setRequestHeader('Access-Control-Allow-Headers', 'x-requested-with,content-type');
                xhr.send();
            });
        }
        http.get = get;
        /**
         * @zh
         * http GET JSON数据
         *
         * @param url - URL
         * @param timeout - 可选，自定义超时时间
         *
         * @return Promise<[JSON]>
         */
        function getJson(url, timeout) {
            return __awaiter(this, void 0, void 0, function () {
                var content;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, get(url, timeout)];
                        case 1:
                            content = _a.sent();
                            if (content) {
                                return [2 /*return*/, JSON.parse(content)];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        }
        http.getJson = getJson;
    })(http = lcc.http || (lcc.http = {}));
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
(function (lcc) {
    var asset;
    (function (asset_1) {
        var TAG = "lcc/utils/asset.ts";
        /**
         * @zh
         * 加载资源包
         *
         * @param nameOrUrl - 包名或者URL路径
         */
        function loadBundle(nameOrUrl) {
            return new Promise(function (resolve) {
                cc.assetManager.loadBundle(nameOrUrl, function (err, bundle) {
                    if (!err && bundle) {
                        resolve(bundle);
                    }
                    else {
                        cc.warn(TAG, "not found Bundle : " + nameOrUrl);
                        resolve(null);
                    }
                });
            });
        }
        asset_1.loadBundle = loadBundle;
        /**
         * @zh
         * 加载远程精灵帧
         *
         * @param surl - 精灵帧URL路径
         * @param ext - 图片后缀, 例如 .png .jpg 等。如果路径没有后缀，则必须指定该后缀
         */
        function loadRemoteSpriteFrame(surl, ext) {
            return new Promise(function (resolve) {
                var callback = function (err, data) {
                    if (!err && data) {
                        var spriteFrame = new cc.SpriteFrame();
                        spriteFrame.setTexture(data);
                        resolve(spriteFrame);
                    }
                    else {
                        cc.warn(TAG, "not found Remote SpriteFrame : " + surl);
                        resolve(null);
                    }
                };
                if (ext) {
                    cc.assetManager.loadRemote(surl, { type: ext }, callback);
                }
                else {
                    cc.assetManager.loadRemote(surl, callback);
                }
            });
        }
        asset_1.loadRemoteSpriteFrame = loadRemoteSpriteFrame;
        /**
         * @zh
         * 通过UUID获得资源
         *
         * @param uuid - UUID字符串
         */
        function getAssetByUUID(uuid) {
            return new Promise(function (resolve) {
                cc.assetManager.loadAny([uuid], function (err, asset) {
                    if (!err && asset) {
                        resolve(asset);
                    }
                    else {
                        cc.warn(TAG, "not found asset : " + uuid);
                        resolve(null);
                    }
                });
            });
        }
        asset_1.getAssetByUUID = getAssetByUUID;
        /**
         * @zh
         * 加载json文件
         *
         * @param jgPath - JSON文件包路径
         * @param bundle - 包对象
         */
        function loadJson(jpPath, bundle) {
            if (bundle === void 0) { bundle = cc.resources; }
            return new Promise(function (resolve) {
                bundle.load(jpPath, cc.JsonAsset, function (err, data) {
                    if (!err && data) {
                        resolve(data.json);
                    }
                    else {
                        cc.warn(TAG, "not found Json : " + jpPath + " in " + bundle.name);
                        resolve(null);
                    }
                });
            });
        }
        asset_1.loadJson = loadJson;
        /**
         * @zh
         * 加载音频
         *
         * @param apPath - 音频文件包路径
         * @param bundle - 包对象
         */
        function loadAudio(apPath, bundle) {
            if (bundle === void 0) { bundle = cc.resources; }
            return new Promise(function (resolve) {
                bundle.load(apPath, cc.AudioClip, function (err, data) {
                    if (!err && data) {
                        resolve(data);
                    }
                    else {
                        cc.warn(TAG, "not found AudioClip : " + apPath + " in " + bundle.name);
                        resolve(null);
                    }
                });
            });
        }
        asset_1.loadAudio = loadAudio;
        /**
         * @zh
         * 加载预制件
         *
         * @param ppPath 预制件包路径
         * @param bundle - 包对象
         */
        function loadPrefab(ppPath, bundle) {
            if (bundle === void 0) { bundle = cc.resources; }
            return new Promise(function (resolve) {
                bundle.load(ppPath, cc.Prefab, function (err, data) {
                    if (!err && data) {
                        resolve(data);
                    }
                    else {
                        cc.warn(TAG, "not found Prefab : " + ppPath + " in " + bundle.name);
                        resolve(null);
                    }
                });
            });
        }
        asset_1.loadPrefab = loadPrefab;
        /**
         * @zh
         * 加载精灵帧
         *
         * @param sfgPath 精灵帧包路径
         * @param bundle - 包对象
         */
        function loadSpriteFrame(sfpPath, bundle) {
            if (bundle === void 0) { bundle = cc.resources; }
            return new Promise(function (resolve) {
                bundle.load(sfpPath, cc.SpriteFrame, function (err, data) {
                    if (!err && data) {
                        resolve(data);
                    }
                    else {
                        cc.warn(TAG, "not found SpriteFrame : " + sfpPath + " in " + bundle.name);
                        resolve(null);
                    }
                });
            });
        }
        asset_1.loadSpriteFrame = loadSpriteFrame;
        /**
         * @zh
         * 加载ttf字体
         *
         * @param ttfgPath - 字体文件全局路径
         * @param bundle - 包对象
         */
        function loadTTFFont(ttfpPath, bundle) {
            if (bundle === void 0) { bundle = cc.resources; }
            return new Promise(function (resolve) {
                bundle.load(ttfpPath, cc.TTFFont, function (err, data) {
                    if (!err && data) {
                        resolve(data);
                    }
                    else {
                        cc.warn(TAG, "not found TTFFont : " + ttfpPath + " in " + bundle.name);
                        resolve(null);
                    }
                });
            });
        }
        asset_1.loadTTFFont = loadTTFFont;
        /**
         * @zh
         * 获得资源的url
         *
         * @param agPath 资源包路径
         * @param bundle - 包对象
         */
        function getAssetUrl(apPath, bundle) {
            if (bundle === void 0) { bundle = cc.resources; }
            return new Promise(function (resolve) {
                bundle.load(apPath, cc.Asset, function (err, data) {
                    if (!err && data) {
                        resolve(data.nativeUrl);
                    }
                    else {
                        cc.warn(TAG, "not found ResUrl : " + apPath + " in " + bundle.name);
                        resolve(null);
                    }
                });
            });
        }
        asset_1.getAssetUrl = getAssetUrl;
    })(asset = lcc.asset || (lcc.asset = {}));
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../base/doing.ts" />
/// <reference path="../base/variable.ts" />
/// <reference path="../base/reference.ts" />
/// <reference path="../index/index-manager.ts" />
/// <reference path="../utils/js.ts" />
/// <reference path="../utils/asset.ts" />
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../base/doing.ts" />
/// <reference path="../base/variable.ts" />
/// <reference path="../base/reference.ts" />
/// <reference path="../index/index-manager.ts" />
/// <reference path="../utils/js.ts" />
/// <reference path="../utils/asset.ts" />
(function (lcc) {
    var TAG = "lcc/pack/pack-manager.ts";
    /**
     * @zh
     * 包管理器
     */
    var PackManager = /** @class */ (function (_super) {
        __extends(PackManager, _super);
        /**
         * @zh
         * 构造函数
         */
        function PackManager() {
            var _this = _super.call(this) || this;
            /**
             * @zh
             * 包映射表
             */
            _this._packs = lcc.js.createMap();
            lcc.state.on('initialize', function () { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    lcc.doing.stateInitialize.in(function () { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, lcc.asset.loadBundle('resources')];
                                case 1:
                                    _a.sent();
                                    this._packs = lcc.js.createMap();
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    return [2 /*return*/];
                });
            }); });
            lcc.state.on('release', function () { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    lcc.doing.stateRelease.in(function () { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    this.clear();
                                    return [4 /*yield*/, this.releaseAllPacks()];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    return [2 /*return*/];
                });
            }); });
            return _this;
        }
        /**
         * @zh
         * 获得指定包
         *
         * @param name - 包名称
         */
        PackManager.prototype.getPack = function (name) {
            return this._packs[name];
        };
        /**
         * @zh
         * 加载包
         *
         * @param nameOrUrl - 包名称或者URL路径
         */
        PackManager.prototype.loadPack = function (nameOrUrl) {
            return __awaiter(this, void 0, void 0, function () {
                var pname, pack, bundle, PackLoaderType, packLoader;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            pname = lcc.fs.basename(nameOrUrl);
                            pack = this._packs[pname];
                            if (!!pack) return [3 /*break*/, 5];
                            lcc.variable.set("__LoadPack__", pname);
                            return [4 /*yield*/, lcc.asset.loadBundle(nameOrUrl)];
                        case 1:
                            bundle = _a.sent();
                            PackLoaderType = lcc.reference.get({ pack: pname, path: 'PackLoader' }) || lcc.PackLoader;
                            packLoader = new PackLoaderType(pname, bundle);
                            this._packs[pname] = packLoader;
                            return [4 /*yield*/, lcc.indexMgr.loadPackIndexes(pname)];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, packLoader.onLoad()];
                        case 3:
                            _a.sent();
                            try {
                                this.emit("loaded", pname);
                            }
                            catch (e) {
                                cc.error(TAG, "loadPack Exception " + e);
                            }
                            return [4 /*yield*/, lcc.doing.indexLoad.untilZero()];
                        case 4:
                            _a.sent(); // 等待索引加载完成
                            _a.label = 5;
                        case 5: return [2 /*return*/, pack];
                    }
                });
            });
        };
        /**
         * @zh
         * 释放包
         *
         * @param name - 包名称
         */
        PackManager.prototype.releasePack = function (name) {
            return __awaiter(this, void 0, void 0, function () {
                var pack, bundle;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            pack = this._packs[name];
                            if (!pack) return [3 /*break*/, 3];
                            bundle = pack.getBundle();
                            return [4 /*yield*/, pack.onDestroy()];
                        case 1:
                            _a.sent();
                            lcc.indexMgr.removePackIndexes(name);
                            delete this._packs[name];
                            lcc.reference.removeByPack(name);
                            cc.assetManager.removeBundle(bundle);
                            try {
                                this.emit("released", name);
                            }
                            catch (e) {
                                cc.error(TAG, "releasePack Exception " + e);
                            }
                            return [4 /*yield*/, lcc.doing.indexLoad.untilZero()];
                        case 2:
                            _a.sent(); // 等待索引加载完成
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 释放所有包
         */
        PackManager.prototype.releaseAllPacks = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _i, _a, name_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _i = 0, _a = Object.keys(this._packs);
                            _b.label = 1;
                        case 1:
                            if (!(_i < _a.length)) return [3 /*break*/, 4];
                            name_1 = _a[_i];
                            return [4 /*yield*/, this.releasePack(name_1)];
                        case 2:
                            _b.sent();
                            _b.label = 3;
                        case 3:
                            _i++;
                            return [3 /*break*/, 1];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 解析资源路径
         *
         * @param aPath - 资源路径
         */
        PackManager.prototype.parseAssetPath = function (aPath) {
            var parts = aPath.split('://');
            if (parts.length == 2 && parts[0] == 'asset') {
                var pindex = parts[1].indexOf('/');
                return {
                    rpath: parts[1].substring(pindex + 1),
                    bundle: this.getPack(parts[1].substring(0, pindex)).getBundle(),
                };
            }
        };
        /**
         * @zh
         * 加载json文件
         *
         * @param jgPath - JSON文件全局路径
         */
        PackManager.prototype.loadJson = function (jgPath) {
            return __awaiter(this, void 0, void 0, function () {
                var finfo;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            finfo = this.parseAssetPath(jgPath);
                            if (!(finfo && finfo.bundle)) return [3 /*break*/, 2];
                            return [4 /*yield*/, lcc.asset.loadJson(finfo.rpath, finfo.bundle)];
                        case 1: return [2 /*return*/, _a.sent()];
                        case 2:
                            cc.warn(TAG, "not found Json : " + jgPath);
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 加载音频
         *
         * @param agPath - 音频文件全局路径
         */
        PackManager.prototype.loadAudio = function (agPath) {
            return __awaiter(this, void 0, void 0, function () {
                var finfo;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            finfo = this.parseAssetPath(agPath);
                            if (!(finfo && finfo.bundle)) return [3 /*break*/, 2];
                            return [4 /*yield*/, lcc.asset.loadAudio(finfo.rpath, finfo.bundle)];
                        case 1: return [2 /*return*/, _a.sent()];
                        case 2:
                            cc.warn(TAG, "not found AudioClip : " + agPath);
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 加载预制件
         *
         * @param pfile 预制件全局路径
         */
        PackManager.prototype.loadPrefab = function (pgPath) {
            return __awaiter(this, void 0, void 0, function () {
                var finfo;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            finfo = this.parseAssetPath(pgPath);
                            if (!(finfo && finfo.bundle)) return [3 /*break*/, 2];
                            return [4 /*yield*/, lcc.asset.loadPrefab(finfo.rpath, finfo.bundle)];
                        case 1: return [2 /*return*/, _a.sent()];
                        case 2:
                            cc.warn(TAG, "not found Prefab : " + pgPath);
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 加载精灵帧
         *
         * @param sfgPath 精灵帧全局路径
         */
        PackManager.prototype.loadSpriteFrame = function (sfgPath) {
            return __awaiter(this, void 0, void 0, function () {
                var finfo;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            finfo = this.parseAssetPath(sfgPath);
                            if (!(finfo && finfo.bundle)) return [3 /*break*/, 2];
                            return [4 /*yield*/, lcc.asset.loadSpriteFrame(finfo.rpath, finfo.bundle)];
                        case 1: return [2 /*return*/, _a.sent()];
                        case 2:
                            cc.warn(TAG, "not found SpriteFrame : " + sfgPath);
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 加载ttf字体
         *
         * @param ttfgPath - 字体文件全局路径
         */
        PackManager.prototype.loadTTFFont = function (ttfgPath) {
            return __awaiter(this, void 0, void 0, function () {
                var finfo;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            finfo = this.parseAssetPath(ttfgPath);
                            if (!(finfo && finfo.bundle)) return [3 /*break*/, 2];
                            return [4 /*yield*/, lcc.asset.loadTTFFont(finfo.rpath, finfo.bundle)];
                        case 1: return [2 /*return*/, _a.sent()];
                        case 2:
                            cc.warn(TAG, "not found TTFFont : " + ttfgPath);
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 获得资源的url
         *
         * @param agPath 资源文件全局路径
         */
        PackManager.prototype.getAssetUrl = function (agPath) {
            return __awaiter(this, void 0, void 0, function () {
                var finfo;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            finfo = this.parseAssetPath(agPath);
                            if (!(finfo && finfo.bundle)) return [3 /*break*/, 2];
                            return [4 /*yield*/, lcc.asset.getAssetUrl(finfo.rpath, finfo.bundle)];
                        case 1: return [2 /*return*/, _a.sent()];
                        case 2:
                            cc.warn(TAG, "not found ResUrl : " + agPath);
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return PackManager;
    }(cc.EventTarget));
    /**
     * @zh
     * 包管理器对象
     */
    lcc.packMgr = new PackManager();
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../base/variable.ts" />
/// <reference path="../network/http/http.ts" />
/// <reference path="./pack-manager.ts" />
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../base/variable.ts" />
/// <reference path="../network/http/http.ts" />
/// <reference path="./pack-manager.ts" />
(function (lcc) {
    var TAG = "lcc/pack/read-config.ts";
    /**
     * @zh
     * 下载远程配置`remoteconfig`文件的超时时间
     */
    lcc.REMOTE_CONFIG_TIMEOUT = 5;
    /**
     * @zh
     * 解析配置对象</br>
     * 1、解析配置中的引用</br>
     *      "@key1":"http://localhost/config.json"     =>   "key1" : [具体内容]</br>
     *      "@key2":"resources://config/test1"         =>   "key2" : [具体内容]</br>
     *
     * @param config 配置对象
     */
    function parseConfigObject(config) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, k, v, vtp, nc;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _i = 0, _a = Object.keys(config);
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 6];
                        k = _a[_i];
                        v = config[k];
                        vtp = typeof (v);
                        if (!(vtp == 'object')) return [3 /*break*/, 3];
                        return [4 /*yield*/, parseConfigObject(v)];
                    case 2:
                        _b.sent();
                        return [3 /*break*/, 5];
                    case 3:
                        if (!(vtp == 'string' && k.indexOf('@') == 0)) return [3 /*break*/, 5];
                        return [4 /*yield*/, readConfigFile(v)];
                    case 4:
                        nc = _b.sent();
                        if (nc) {
                            config[k.substr(1)] = nc;
                            delete config[k];
                        }
                        else {
                            cc.error(TAG, "parseConfig file '" + v + "' not found!!!");
                        }
                        _b.label = 5;
                    case 5:
                        _i++;
                        return [3 /*break*/, 1];
                    case 6: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * @zh
     * 读取配置文件
     *
     * @param fileUrl 配置文件URL
     */
    function readConfigFile(fileUrl) {
        return __awaiter(this, void 0, void 0, function () {
            var content, _a, _b, config;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        content = null;
                        if (!(fileUrl.indexOf('http://') == 0 || fileUrl.indexOf('https://') == 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, lcc.http.get(fileUrl, lcc.REMOTE_CONFIG_TIMEOUT)];
                    case 1:
                        content = _c.sent();
                        return [3 /*break*/, 5];
                    case 2:
                        if (!(fileUrl.indexOf('asset://') == 0)) return [3 /*break*/, 4];
                        _b = (_a = JSON).stringify;
                        return [4 /*yield*/, lcc.packMgr.loadJson(fileUrl)];
                    case 3:
                        content = _b.apply(_a, [_c.sent()]);
                        return [3 /*break*/, 5];
                    case 4:
                        cc.error(TAG, "readConfigFile Unknown Url " + fileUrl);
                        _c.label = 5;
                    case 5:
                        if (!content) return [3 /*break*/, 7];
                        content = lcc.variable.parseString(content, { localpath: lcc.fs.dirname(fileUrl) });
                        config = JSON.parse(content);
                        return [4 /*yield*/, parseConfigObject(config)];
                    case 6:
                        _c.sent();
                        return [2 /*return*/, config];
                    case 7: return [2 /*return*/];
                }
            });
        });
    }
    lcc.readConfigFile = readConfigFile;
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../base/doing.ts" />
/// <reference path="../pack/read-config.ts" />
/// <reference path="../base/variable.ts" />
/// <reference path="../utils/js.ts" />
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../base/doing.ts" />
/// <reference path="../pack/read-config.ts" />
/// <reference path="../base/variable.ts" />
/// <reference path="../utils/js.ts" />
(function (lcc) {
    var TAG = "lcc/index/index-manager.ts";
    /**
     * @zh
     * 索引路径冲突
     */
    lcc.ERROR_INDEX_PATH_CONFLICT = true;
    /**
     * @zh
     * 索引管理器<br/>
     * 管理游戏中的公用资源索引
     */
    var IndexManager = /** @class */ (function (_super) {
        __extends(IndexManager, _super);
        /**
         * @zh
         * 构造索引管理器
         */
        function IndexManager() {
            var _this = _super.call(this) || this;
            /**
             * @zh
             * 包优先级
             */
            _this._packPriority = 0;
            /**
             * @zh
             * 包索引表
             */
            _this._packIndexs = lcc.js.createMap();
            /**
             * @zh
             * 全局索引表
             */
            _this._indexes = lcc.js.createMap();
            lcc.state.on('initialize', function () {
                lcc.doing.stateInitialize.in(function () {
                    _this._packPriority = 0;
                    _this._packIndexs = lcc.js.createMap();
                    _this._indexes = lcc.js.createMap();
                });
            });
            lcc.state.on('release', function () {
                lcc.doing.stateRelease.in(function () {
                    _this.clear();
                });
            });
            return _this;
        }
        //--------------------------------------------------	索引操作
        /**
         * @zh
         * 合并Map表<br/>
         * Map表合并规则：<br/>
         * 遍历源Map表字段，对比目的Map表对应字段，存在几种情况：<br/>
         * 1、目的Map表中不存在该字段，直接设置为源Map表字段<br/>
         * 2、目的Map表字段和源Map表字段同为数组(Array)，把字段的源Map表数组复制到目的Map表数组中<br/>
         * 3、目的Map表字段和源Map表字段同为对象(Object)，以字段的目的Map表和源Map表为参数再次调用次函数<br/>
         * 4、其他情况，说明存在冲突。警告后，源Map表字段直接覆盖目的Map表字段
         *
         * @param dmap - 目的Map表
         * @param smap - 源Map表
         * @param listen - 是否监听
         * @param ipath - 文件路径
         */
        IndexManager.prototype.mergeTable = function (dmap, smap, listen, ipath) {
            if (listen === void 0) { listen = false; }
            if (ipath === void 0) { ipath = ""; }
            for (var key in smap) {
                var svalue = smap[key];
                var dvalue = dmap[key];
                var lipath = ipath ? ipath + "/" + key : key;
                if (!dvalue) {
                    dmap[key] = svalue;
                }
                else {
                    var stype = typeof svalue;
                    var dtype = typeof dvalue;
                    if (dtype == 'object' && stype == dtype) {
                        var sarray = svalue instanceof Array;
                        var darray = dvalue instanceof Array;
                        if (sarray != darray) {
                            var msg = "invalid merge type array '" + sarray + "-" + darray + "' in key '" + key + "'";
                            if (lcc.ERROR_INDEX_PATH_CONFLICT) {
                                cc.error(TAG, msg);
                            }
                            else {
                                cc.warn(TAG, msg);
                            }
                            dmap[key] = svalue;
                        }
                        else {
                            if (darray) {
                                dvalue.push.apply(dvalue, svalue);
                            }
                            else {
                                this.mergeTable(dvalue, svalue, listen, lipath);
                            }
                        }
                    }
                    else {
                        var msg = "invalid merge type '" + stype + "-" + dtype + "' in key '" + key + "'";
                        if (lcc.ERROR_INDEX_PATH_CONFLICT) {
                            cc.error(TAG, msg);
                        }
                        else {
                            cc.warn(TAG, msg);
                        }
                        dmap[key] = svalue;
                    }
                }
                if (listen) {
                    try {
                        this.emit("indexes_loaded_" + lipath, svalue);
                    }
                    catch (e) {
                        cc.error(TAG, "mergeTable Exception " + e);
                    }
                }
            }
        };
        /**
         * @zh
         * 重构索引
         */
        IndexManager.prototype.rebuildIndexes = function () {
            this._indexes = lcc.js.createMap();
            var packIndexs = Object.values(this._packIndexs).sort(function (a, b) { return a.priority - b.priority; });
            for (var _i = 0, packIndexs_1 = packIndexs; _i < packIndexs_1.length; _i++) {
                var pi = packIndexs_1[_i];
                this.mergeTable(this._indexes, pi.indexes);
            }
        };
        /**
         * @zh
         * 获得指定索引
         *
         * @param path - 索引路径
         */
        IndexManager.prototype.getIndex = function (path) {
            if (path) {
                return lcc.js.getMapValue(this._indexes, path, "/");
            }
        };
        /**
         * @zh
         * 加载包索引表
         *
         * @param pname - 包名称
         */
        IndexManager.prototype.loadPackIndexes = function (pname) {
            return __awaiter(this, void 0, void 0, function () {
                var indexPath, indexConfig, _a, _b, _i, k, indexFile, indexes, packIndex;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            lcc.doing.indexLoad.addCount();
                            indexPath = "asset://" + pname + "/index-files";
                            return [4 /*yield*/, lcc.readConfigFile(indexPath)];
                        case 1:
                            indexConfig = _c.sent();
                            if (!indexConfig) return [3 /*break*/, 5];
                            indexConfig = lcc.translateJSON(indexConfig, lcc.fs.dirname(indexPath));
                            _a = [];
                            for (_b in indexConfig)
                                _a.push(_b);
                            _i = 0;
                            _c.label = 2;
                        case 2:
                            if (!(_i < _a.length)) return [3 /*break*/, 5];
                            k = _a[_i];
                            indexFile = indexConfig[k];
                            return [4 /*yield*/, lcc.readConfigFile(indexFile)];
                        case 3:
                            indexes = _c.sent();
                            if (indexes) {
                                indexes = lcc.translateJSON(indexes, lcc.fs.dirname(indexFile));
                                packIndex = this._packIndexs[pname];
                                if (!packIndex) {
                                    packIndex = {
                                        priority: this._packPriority++,
                                        indexes: indexes,
                                    };
                                    this._packIndexs[pname] = packIndex;
                                }
                                else {
                                    this.mergeTable(packIndex.indexes, indexes);
                                }
                                this.mergeTable(this._indexes, indexes, true);
                            }
                            _c.label = 4;
                        case 4:
                            _i++;
                            return [3 /*break*/, 2];
                        case 5:
                            lcc.doing.indexLoad.decCount();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 移除包索引表
         *
         * @param pname - 包名称
         */
        IndexManager.prototype.removePackIndexes = function (pname) {
            lcc.doing.indexLoad.addCount();
            var packIndex = this._packIndexs[pname];
            if (packIndex) {
                delete this._packIndexs[pname];
                this.rebuildIndexes();
                this.notifyIndexesRemoved(packIndex.indexes);
                try {
                    this.emit("indexes_removed");
                }
                catch (e) {
                    cc.error(TAG, "removePackIndexes Exception " + e);
                }
            }
            lcc.doing.indexLoad.decCount();
        };
        /**
         * @zh
         * 通知索引被移除
         *
         * @param indexes - 移除的包索引表
         * @param ipath - 当前索引路径
         */
        IndexManager.prototype.notifyIndexesRemoved = function (indexes, ipath) {
            if (ipath === void 0) { ipath = ""; }
            if (indexes) {
                for (var key in indexes) {
                    var value = indexes[key];
                    var lipath = ipath ? ipath + "/" + key : key;
                    if (typeof value == 'object') {
                        this.notifyIndexesRemoved(value, lipath);
                    }
                    try {
                        this.emit("indexes_removed_" + lipath, value);
                    }
                    catch (e) {
                        cc.error(TAG, "notifyIndexesRemoved Exception " + e);
                    }
                }
            }
        };
        return IndexManager;
    }(cc.EventTarget));
    /**
     * @zh
     * 索引管理器对象
     */
    lcc.indexMgr = new IndexManager();
    ;
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/state.ts" />
/// <reference path="../utils/js.ts" />
/// <reference path="../index/index-manager.ts" />
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/state.ts" />
/// <reference path="../utils/js.ts" />
/// <reference path="../index/index-manager.ts" />
(function (lcc) {
    var TAG = "lcc.AudioManager";
    /**
     * 索引路径
     */
    var INDEXPATH;
    (function (INDEXPATH) {
        /**
         * 音频
         */
        INDEXPATH.AUDIO = "audio";
    })(INDEXPATH = lcc.INDEXPATH || (lcc.INDEXPATH = {}));
    ;
    /**
     * 默认全局BGM音量
     */
    lcc.DEFAULT_BGM_VOLUME = 0.5;
    /**
     * 默认全局SE音量
     */
    lcc.DEFAULT_SE_VOLUME = 0.5;
    /**
     * @zh
     * 音频管理器
     */
    var AudioManager = /** @class */ (function () {
        /**
         * 构造数据库管理器
         */
        function AudioManager() {
            var _this = this;
            /**
             * 音频配置
             */
            this._audioConfigs = lcc.js.createMap();
            /**
             * 全局BGM音量
             */
            this._BGMVolume = lcc.DEFAULT_BGM_VOLUME;
            /**
             * 全局SE音量
             */
            this._SEVolume = lcc.DEFAULT_SE_VOLUME;
            /**
             * 当前BGM
             */
            this._nowBGM = null;
            /**
             * 当前BGM的ID
             */
            this._nowBGMID = null;
            lcc.state.on('initialize', function () {
                lcc.doing.stateInitialize.in(function () {
                    _this._audioConfigs = lcc.js.createMap();
                    _this._BGMVolume = lcc.DEFAULT_BGM_VOLUME;
                    _this._SEVolume = lcc.DEFAULT_SE_VOLUME;
                    _this._nowBGM = null;
                    _this._nowBGMID = null;
                    lcc.indexMgr.on("indexes_removed", _this.onIndexesRemoved, _this);
                });
            });
            lcc.state.on('release', function () {
                lcc.doing.stateRelease.in(function () {
                    lcc.indexMgr.targetOff(_this);
                });
            });
        }
        AudioManager.prototype.onIndexesRemoved = function () {
            this.releaseInvalidAudios();
        };
        /**
         * 释放无效音频
         */
        AudioManager.prototype.releaseInvalidAudios = function () {
            var afiles = lcc.indexMgr.getIndex(INDEXPATH.AUDIO) || {};
            for (var _i = 0, _a = Object.keys(this._audioConfigs); _i < _a.length; _i++) {
                var aname = _a[_i];
                if (!afiles[aname]) {
                    this.releaseAudio(aname);
                }
            }
        };
        /**
         * 获取所有音频
         */
        AudioManager.prototype.getAllAudios = function () {
            return Object.keys(lcc.indexMgr.getIndex(INDEXPATH.AUDIO));
        };
        /**
         * 释放指定音频
         * @param aname
         * @param preload 预加载的也释放
         */
        AudioManager.prototype.releaseAudio = function (aname, preload) {
            if (preload === void 0) { preload = false; }
            var audioconf = this._audioConfigs[aname];
            if (audioconf && (!audioconf.preload || preload)) {
                delete this._audioConfigs[aname];
                audioconf.clip.decRef();
                cc.audioEngine.uncache(audioconf.clip);
                lcc.DEBUG.AUDIO && cc.log(TAG, "releaseAudio " + aname);
            }
        };
        /**
         * 释放音频数组
         * @param preload
         */
        AudioManager.prototype.releaseAudios = function (anames, preload) {
            if (preload === void 0) { preload = false; }
            for (var _i = 0, anames_1 = anames; _i < anames_1.length; _i++) {
                var aname = anames_1[_i];
                this.releaseAudio(aname, preload);
            }
        };
        /**
         * 预加载指定音频
         * @param aname
         */
        AudioManager.prototype.preloadAudio = function (aname) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getAudioConfig(aname)];
                        case 1:
                            (_a.sent()).preload = true;
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * 预加载音频数组
         */
        AudioManager.prototype.preloadAudios = function (anames, progress) {
            if (progress === void 0) { progress = function (p) { }; }
            return __awaiter(this, void 0, void 0, function () {
                var i, len;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            i = 0, len = anames.length;
                            _a.label = 1;
                        case 1:
                            if (!(i < len)) return [3 /*break*/, 4];
                            return [4 /*yield*/, this.preloadAudio(anames[i])];
                        case 2:
                            _a.sent();
                            progress((i + 1) / len);
                            _a.label = 3;
                        case 3:
                            i++;
                            return [3 /*break*/, 1];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * 设置 BGM 音量
         */
        AudioManager.prototype.setBgmVolume = function (volume) {
            return __awaiter(this, void 0, void 0, function () {
                var audio;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this._BGMVolume != volume)) return [3 /*break*/, 3];
                            this._BGMVolume = volume;
                            if (!(this._nowBGMID != null)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.getAudioConfig(this._nowBGM)];
                        case 1:
                            audio = _a.sent();
                            if (audio) {
                                cc.audioEngine.setVolume(this._nowBGMID, volume * (audio.config.volume != null ? audio.config.volume : 1));
                                lcc.DEBUG.AUDIO && cc.log(TAG, "setBgmVolume " + volume);
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            if (this._nowBGM != null) {
                                this.playBGM(this._nowBGM);
                            }
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * 获得 BGM 音量
         */
        AudioManager.prototype.getBgmVolume = function () {
            return this._BGMVolume;
        };
        /**
         * 设置 SE 音量
         */
        AudioManager.prototype.setSeVolume = function (volume) {
            this._SEVolume = volume;
        };
        /**
         * 获得 SE 音量
         */
        AudioManager.prototype.getSeVolume = function () {
            return this._SEVolume;
        };
        /**
         * 获得当前的BGM
         */
        AudioManager.prototype.getNowBGM = function () {
            return this._nowBGM;
        };
        /**
         * 播放背景音乐
         * @param aname 音频名称
         * @param loop 是否循环
         */
        AudioManager.prototype.playBGM = function (aname, loop) {
            if (loop === void 0) { loop = true; }
            return __awaiter(this, void 0, void 0, function () {
                var aconf;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this._nowBGM != aname)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.getAudioConfig(aname)];
                        case 1:
                            aconf = _a.sent();
                            if (aconf) {
                                this.stopBGM();
                                this._nowBGM = aname;
                                if (this._BGMVolume > 0) {
                                    this._nowBGMID = cc.audioEngine.play(aconf.clip, loop !== null ? loop : aconf.config.loop, (aconf.config.volume != null ? aconf.config.volume : 1) * this._BGMVolume);
                                    lcc.DEBUG.AUDIO && cc.log(TAG, "playBGM " + aname + " loop:" + loop);
                                    return [2 /*return*/, this._nowBGMID];
                                }
                            }
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * 停止当前BGN
         */
        AudioManager.prototype.stopBGM = function () {
            if (this._nowBGMID != null) {
                cc.audioEngine.stop(this._nowBGMID);
                lcc.DEBUG.AUDIO && cc.log(TAG, "stopBGM " + this._nowBGM);
                this._nowBGMID = null;
                this._nowBGM = null;
            }
        };
        /**
         * 播放音效
         * @param aname 音频名称
         */
        AudioManager.prototype.playSE = function (aname) {
            return __awaiter(this, void 0, void 0, function () {
                var aconf, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getAudioConfig(aname)];
                        case 1:
                            aconf = _a.sent();
                            if (aconf && this._SEVolume > 0) {
                                result = cc.audioEngine.play(aconf.clip, aconf.config.loop, (aconf.config.volume != null ? aconf.config.volume : 1) * this._SEVolume);
                                lcc.DEBUG.AUDIO && cc.log(TAG, "playSE " + aname);
                                return [2 /*return*/, result];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * 直到音频播放完成
         * @param aid 音频播放ID
         */
        AudioManager.prototype.untilFinish = function (aid) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, new Promise(function (resolve) {
                            var state = cc.audioEngine.getState(aid);
                            if (state == cc.audioEngine.AudioState.ERROR) {
                                resolve(null);
                            }
                            else {
                                cc.audioEngine.setFinishCallback(aid, resolve);
                            }
                        })];
                });
            });
        };
        /**
         * 获得音频配置
         * @param aname 音频名称
         */
        AudioManager.prototype.getAudioConfig = function (aname) {
            return __awaiter(this, void 0, void 0, function () {
                var audioconf, config, clip;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            audioconf = this._audioConfigs[aname];
                            if (!!audioconf) return [3 /*break*/, 2];
                            config = lcc.indexMgr.getIndex(INDEXPATH.AUDIO + "/" + aname);
                            if (!config) return [3 /*break*/, 2];
                            return [4 /*yield*/, lcc.packMgr.loadAudio(config.file)];
                        case 1:
                            clip = _a.sent();
                            audioconf = {
                                clip: clip,
                                config: config,
                            };
                            clip.addRef();
                            this._audioConfigs[aname] = audioconf;
                            _a.label = 2;
                        case 2: return [2 /*return*/, audioconf];
                    }
                });
            });
        };
        return AudioManager;
    }());
    ;
    /**
     * 音频管理器
     */
    lcc.audioMgr = new AudioManager();
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../base/state.ts" />
/// <reference path="../pack/read-config.ts" />
/// <reference path="../utils/js.ts" />
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../base/state.ts" />
/// <reference path="../pack/read-config.ts" />
/// <reference path="../utils/js.ts" />
(function (lcc) {
    var TAG = "lcc/config/config-manager.ts";
    /**
     * @zh
     * 配置对象映射表<br/>
     * 在加载完对应配置后，可以直接通过这个变量访问配置数据<br/>
     * ```
     *      lcc.configMgr.loadConfigFile('asset://resources/config/test');
     *      let testConfig = CONFIGS.test;      // 方式1
     *      let testConfig = CONFIGS['test'];   // 方式2
     * ```
     */
    lcc.CONFIGS = lcc.js.createMap();
    /**
     * @zh
     * 配置管理器<br/>
     * 主要用于管理程序的配置对象<br/>
     * 配置对象在加载时会进行以下处理:<br/>
     * 1、替换配置对象字符串中的`${...}`变量值。变量值可以通过`setVariable`设置，其中`localpath`为固有值，表示当前文件目录。<br/>
     * 2、替换配置对象健中以`@`开始的引用字段。其值表示引用路径，比如`http://localhost/test.json`表示网络文件, `asset://resources/test`表示resources包中的test.json文件。
     * 会以引用文件的内容(这里是JSON对象)替换当前字段的值，并且去掉健中的`@`符号。<br/>
     * 例如：<br/>
     * 存在网络文件http://localhost/test.json，内容为；<br/>
     * ```
     * {
     *      "type" : "remote file"
     * }
     * ```
     * 存在资源文件asset://resources/test (resources包中的test.json文件)，内容为；<br/>
     * ```
     * {
     *      "type": "asset file"
     * }
     * ```
     * 存在本地配置文件asset://resources/config (resources包中的config.json文件)，内容为；<br/>
     * ```
     * {
     *      "config" : "config file",
     *      "@remote" : "http://localhost/test.json",
     *      "@asset" : "${localpath}/test"
     * }
     * ```
     * 那么，使用`lcc.configMgr.loadConfigFile('asset://resources/config')`后，<br/>
     * 使用lcc.configMgr.getConfig('config')内容如下；<br/>
     * ```
     * {
     *      "config" : "config file",
     *      "remote" : {
     *          "type" : "remote file"
     *      },
     *      "asset" :  {
     *          "type" : "asset file"
     *      }
     * }
     * ```
     * 可以看出config加载时，通过网络替换引用`@remote`，解析变量`localpath`拼接test.json路径并替换引用`@asset`<br/>
     */
    var ConfigManager = /** @class */ (function () {
        /**
         * @zh
         * 构造函数
         */
        function ConfigManager() {
            var _this = this;
            lcc.state.on('initialize', function () {
                lcc.doing.stateInitialize.in(function () {
                    _this.removeAllConfigs();
                });
            });
        }
        /**
         * @zh
         * 获得所有配置<br/>
         * 也可以直接使用`CONFIGS`
         */
        ConfigManager.prototype.getConfigs = function () {
            return lcc.CONFIGS;
        };
        /**
         * @zh
         * 获得对应配置<br/>
         * 也可以直接使用`CONFIGS[key]`
         */
        ConfigManager.prototype.getConfig = function (key) {
            return lcc.CONFIGS[key];
        };
        /**
         * @zh
         * 移除指定配置<br/>
         *
         * @param cname - 配置名称
         */
        ConfigManager.prototype.removeConfig = function (cname) {
            delete lcc.CONFIGS[cname];
        };
        /**
         * @zh
         * 移除所有配置
         */
        ConfigManager.prototype.removeAllConfigs = function () {
            for (var _i = 0, _a = Object.keys(lcc.CONFIGS); _i < _a.length; _i++) {
                var cname = _a[_i];
                delete lcc.CONFIGS[cname];
            }
        };
        /**
         * @zh
         * 加载配置文件<br/>
         * 用法：<br/>
         * ```
         * 		// 加载resources目录下的配置
         * 		lcc.configMgr.loadConfig('asset://resources/config/test');
         * 		// 获得加载的配置
         * 		lcc.configMgr.getConfig('test');
         *
         * 		// 加载resources目录下的配置，并且重置名称
         * 		lcc.configMgr.loadConfig('asset://resources/config/test', 'newtest');
         * 		// 获得加载的配置
         * 		lcc.configMgr.getConfig('newtest');
         *
         * 		// 加载game子包下的配置，并且重置名称。如果有相同配置，则合并
         * 		lcc.configMgr.loadConfig('asset://game/config/test', { name : 'newtest', merge : true });
         * 		// 获得加载的配置
         * 		lcc.configMgr.getConfig('newtest');
         * ```
         *
         * @param jfile - JSON文件路径
         * @param nameOrOption - 配置名称或者选项
         */
        ConfigManager.prototype.loadConfigFile = function (jfile, nameOrOption) {
            if (nameOrOption === void 0) { nameOrOption = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var localconf, option, config;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, lcc.readConfigFile(jfile)];
                        case 1:
                            localconf = _a.sent();
                            if (localconf) {
                                option = void 0;
                                if (typeof nameOrOption == 'string') {
                                    option = {
                                        configName: nameOrOption,
                                    };
                                }
                                else {
                                    option = nameOrOption;
                                }
                                option.configName = option.configName || lcc.fs.basename(jfile);
                                lcc.DEBUG.CONFIG && cc.log(TAG, "local config " + option.configName + " : " + JSON.stringify(localconf));
                                if (!option.merge) {
                                    delete lcc.CONFIGS[option.configName];
                                }
                                config = lcc.CONFIGS[option.configName];
                                if (!config) {
                                    config = lcc.js.createMap();
                                    lcc.CONFIGS[option.configName] = config;
                                }
                                lcc.js.mergeMap(config, localconf, { tag: TAG, source: jfile });
                            }
                            else {
                                cc.error(TAG, "loadConfigFile '" + jfile + "' not found!!!");
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        return ConfigManager;
    }());
    ;
    /**
     * @zh
     * 配置管理器对象
     */
    lcc.configMgr = new ConfigManager();
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../base/state.ts" />
/// <reference path="../base/doing.ts" />
/// <reference path="../base/variable.ts" />
/// <reference path="../utils/js.ts" />
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../base/state.ts" />
/// <reference path="../base/doing.ts" />
/// <reference path="../base/variable.ts" />
/// <reference path="../utils/js.ts" />
(function (lcc) {
    var TAG = "lcc/language/lang-manager.ts";
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    /**
     * @zh
     * 索引路径
     */
    var INDEXPATH;
    (function (INDEXPATH) {
        /**
         * @zh
         * 字体
         */
        INDEXPATH.FONT = "font";
        /**
         * @zh
         * 语言
         */
        INDEXPATH.LANG = "lang";
    })(INDEXPATH = lcc.INDEXPATH || (lcc.INDEXPATH = {}));
    ;
    /**
     * @zh
     * 默认语言
     */
    lcc.DEFAULT_LANGUAGE = 'zh';
    /**
     * @zh
     * 多语言文本
     */
    var LangText = /** @class */ (function () {
        function LangText() {
            /**
             * @zh
             * 使用富文本
             */
            this.useRichText = false;
            /**
             * @zh
             * 关联标签
             */
            this.label = null;
            /**
             * @zh
             * 关联富文本
             */
            this.richText = null;
            /**
             * @zh
             * 关联键
             */
            this.key = "";
            /**
             * @zh
             * 关联文本参数
             */
            this.args = "";
        }
        __decorate([
            property({
                tooltip: "使用富文本"
            })
        ], LangText.prototype, "useRichText", void 0);
        __decorate([
            property({
                type: cc.Label,
                visible: function () {
                    return this.useRichText == false;
                }
            })
        ], LangText.prototype, "label", void 0);
        __decorate([
            property({
                type: cc.RichText,
                visible: function () {
                    return this.useRichText == true;
                }
            })
        ], LangText.prototype, "richText", void 0);
        __decorate([
            property({
                tooltip: "关联键"
            })
        ], LangText.prototype, "key", void 0);
        __decorate([
            property({
                tooltip: "关联文本参数"
            })
        ], LangText.prototype, "args", void 0);
        LangText = __decorate([
            ccclass("lcc.LangText")
        ], LangText);
        return LangText;
    }());
    lcc.LangText = LangText;
    /**
     * @zh
     * 多语言图片
     */
    var LangImage = /** @class */ (function () {
        function LangImage() {
            /**
             * @zh
             * 关联精灵
             */
            this.image = null;
            /**
             * @zh
             * 关联键
             */
            this.key = "";
        }
        __decorate([
            property(cc.Sprite)
        ], LangImage.prototype, "image", void 0);
        __decorate([
            property({
                tooltip: "关联键"
            })
        ], LangImage.prototype, "key", void 0);
        LangImage = __decorate([
            ccclass("lcc.LangImage")
        ], LangImage);
        return LangImage;
    }());
    lcc.LangImage = LangImage;
    /**
     * @zh
     * 语言管理器<br/>
     * 管理多语言与其字体
     */
    var LangManager = /** @class */ (function (_super) {
        __extends(LangManager, _super);
        /**
         * @zh
         * 构造管理器
         */
        function LangManager() {
            var _this = _super.call(this) || this;
            /**
             * @zh
             * 字体缓冲
             */
            _this._fontBuff = lcc.js.createMap();
            /**
             * @zh
             * 图片缓冲
             */
            _this._imageBuff = lcc.js.createMap();
            /**
             * @zh
             * 语言配置表
             */
            _this._langConfig = { texts: {}, images: {} };
            /**
             * @zh
             * 当前语言
             */
            _this._nowLang = null;
            /**
             * @zh
             * 多语言组映射表
             */
            _this._langGroupMap = lcc.js.createMap();
            lcc.state.on('initialize', function () {
                lcc.doing.stateInitialize.in(function () {
                    _this._fontBuff = lcc.js.createMap();
                    _this._imageBuff = lcc.js.createMap();
                    _this._langConfig = { texts: {}, images: {} };
                    _this._nowLang = null;
                    _this._langGroupMap = lcc.js.createMap();
                    lcc.indexMgr.on("indexes_removed", _this.reloadNowLanguage, _this);
                    lcc.indexMgr.on("indexes_loaded_" + INDEXPATH.LANG, _this.onLangIndexesLoaded, _this);
                });
            });
            lcc.state.on('release', function () {
                lcc.doing.stateRelease.in(function () {
                    _this.clear();
                    lcc.indexMgr.targetOff(_this);
                });
            });
            return _this;
        }
        /**
         * @internal
         */
        LangManager.prototype.reloadNowLanguage = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            lcc.doing.indexLoad.addCount();
                            this._langConfig = { texts: {}, images: {} };
                            return [4 /*yield*/, this.loadPreposeLangs()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.onLangIndexesLoaded(lcc.indexMgr.getIndex(INDEXPATH.LANG))];
                        case 2:
                            _a.sent();
                            this.removeInvalidBuff();
                            lcc.doing.indexLoad.decCount();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 当索引加载
         *
         * @param ivalue 索引路径对象
         */
        LangManager.prototype.onLangIndexesLoaded = function (ivalue) {
            return __awaiter(this, void 0, void 0, function () {
                var tfiles, _i, tfiles_1, tfile, table;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            lcc.doing.indexLoad.addCount();
                            this._nowLang = this._nowLang || lcc.DEFAULT_LANGUAGE;
                            if (!ivalue) return [3 /*break*/, 4];
                            tfiles = ivalue[this._nowLang];
                            if (!tfiles) return [3 /*break*/, 4];
                            _i = 0, tfiles_1 = tfiles;
                            _a.label = 1;
                        case 1:
                            if (!(_i < tfiles_1.length)) return [3 /*break*/, 4];
                            tfile = tfiles_1[_i];
                            return [4 /*yield*/, lcc.readConfigFile(tfile)];
                        case 2:
                            table = _a.sent();
                            if (!table) {
                                cc.error(TAG, "lang file " + tfile + " read fail !!!");
                            }
                            else {
                                table = lcc.translateJSON(table, lcc.fs.dirname(tfile));
                                this.loadTable(table, tfile);
                            }
                            _a.label = 3;
                        case 3:
                            _i++;
                            return [3 /*break*/, 1];
                        case 4:
                            lcc.doing.indexLoad.decCount();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 移除无效的缓冲
         */
        LangManager.prototype.removeInvalidBuff = function () {
            var _this = this;
            // 字体
            var fontconfs = lcc.indexMgr.getIndex(INDEXPATH.FONT);
            for (var _i = 0, _a = Object.keys(this._fontBuff); _i < _a.length; _i++) {
                var fname = _a[_i];
                var font = this._fontBuff[fname];
                if (!fontconfs[fname] && font) {
                    font.decRef();
                    delete this._fontBuff[fname];
                }
            }
            var _loop_1 = function (ipath) {
                var image = this_1._imageBuff[ipath];
                var find = false;
                (function () {
                    for (var k in _this._langConfig.images) {
                        var path = _this._langConfig.images[k];
                        if (ipath == path) {
                            find = true;
                            return;
                        }
                    }
                })();
                if (!find) {
                    image.decRef();
                    delete this_1._imageBuff[ipath];
                }
            };
            var this_1 = this;
            // 图片
            for (var _b = 0, _c = Object.keys(this._imageBuff); _b < _c.length; _b++) {
                var ipath = _c[_b];
                _loop_1(ipath);
            }
        };
        /**
         * @zh
         * 合并表<br/>
         * 合并规则与[[js.mergeMap]]一致
         *
         * @param table - 新表对象
         * @param tfile - 文件路径
         */
        LangManager.prototype.loadTable = function (table, tfile) {
            if (tfile === void 0) { tfile = "[unknown]"; }
            lcc.js.mergeMap(this._langConfig, table, { tag: TAG, source: tfile });
            lcc.DEBUG.LANG && cc.log(TAG, "load lang table " + JSON.stringify(table) + " from " + tfile);
        };
        /**
         * @zh
         * 加载前置配置
         */
        LangManager.prototype.loadPreposeLangs = function () {
            return __awaiter(this, void 0, void 0, function () {
                var prelangs, langConfig;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this._nowLang = this._nowLang || lcc.DEFAULT_LANGUAGE;
                            return [4 /*yield*/, lcc.asset.loadJson("lcc-assets/prelangs", cc.resources)];
                        case 1:
                            prelangs = _a.sent();
                            langConfig = prelangs && prelangs[this._nowLang];
                            if (langConfig) {
                                this.loadTable(lcc.translateJSON(langConfig), "asset://resources/lcc-assets/prelangs");
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 设置并更新语言
         *
         * @param lang - 语言名称
         * @param deflang - 可选，默认语言
         */
        LangManager.prototype.setLanguage = function (lang) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this._nowLang != lang)) return [3 /*break*/, 4];
                            this._nowLang = lang;
                            return [4 /*yield*/, this.reloadNowLanguage()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.updateAllLangGroup()];
                        case 2:
                            _a.sent();
                            try {
                                this.emit("lang_changed", lang);
                            }
                            catch (e) {
                                cc.error(TAG, "setLanguage Exception " + e);
                            }
                            return [4 /*yield*/, lcc.doing.langUpdate.untilZero()];
                        case 3:
                            _a.sent(); // 直到更新完成
                            _a.label = 4;
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 获得当前语言
         */
        LangManager.prototype.getLanguage = function () {
            return this._nowLang;
        };
        /**
         * @zh
         * 获得语言列表
         */
        LangManager.prototype.getLanguageList = function () {
            return Object.keys(lcc.indexMgr.getIndex(INDEXPATH.LANG));
        };
        /**
         * @zh
         * 更新所有语言组
         */
        LangManager.prototype.updateAllLangGroup = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, _b, _i, group;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _a = [];
                            for (_b in this._langGroupMap)
                                _a.push(_b);
                            _i = 0;
                            _c.label = 1;
                        case 1:
                            if (!(_i < _a.length)) return [3 /*break*/, 4];
                            group = _a[_i];
                            return [4 /*yield*/, this.updateLangGroup(group)];
                        case 2:
                            _c.sent();
                            _c.label = 3;
                        case 3:
                            _i++;
                            return [3 /*break*/, 1];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 更新指定语言组
         *
         * @param group - 组名称
         */
        LangManager.prototype.updateLangGroup = function (group) {
            return __awaiter(this, void 0, void 0, function () {
                var groupconf, _i, _a, tc, _b, _c, ic;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            if (!this._nowLang) return [3 /*break*/, 8];
                            groupconf = this._langGroupMap[group];
                            if (!groupconf) return [3 /*break*/, 8];
                            if (!groupconf.texts) return [3 /*break*/, 4];
                            _i = 0, _a = groupconf.texts;
                            _d.label = 1;
                        case 1:
                            if (!(_i < _a.length)) return [3 /*break*/, 4];
                            tc = _a[_i];
                            return [4 /*yield*/, this.updateText(tc.useRichText ? tc.richText : tc.label, tc.key, tc.args.split(","))];
                        case 2:
                            _d.sent();
                            _d.label = 3;
                        case 3:
                            _i++;
                            return [3 /*break*/, 1];
                        case 4:
                            if (!groupconf.images) return [3 /*break*/, 8];
                            _b = 0, _c = groupconf.images;
                            _d.label = 5;
                        case 5:
                            if (!(_b < _c.length)) return [3 /*break*/, 8];
                            ic = _c[_b];
                            return [4 /*yield*/, this.updateImage(ic.image, ic.key)];
                        case 6:
                            _d.sent();
                            _d.label = 7;
                        case 7:
                            _b++;
                            return [3 /*break*/, 5];
                        case 8: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 更新文本
         *
         * @param target - 目标对象
         * @param key - 关联文本key
         * @param args - 文本参数
         */
        LangManager.prototype.updateText = function (target, key) {
            var args = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args[_i - 2] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                var textConf, font;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            lcc.doing.langUpdate.addCount();
                            textConf = this._langConfig.texts[key];
                            if (!textConf) return [3 /*break*/, 3];
                            target.string = lcc.variable.parseString(textConf.text, args);
                            if (textConf.fontSize) {
                                target.fontSize = textConf.fontSize;
                            }
                            if (!textConf.fontName) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.getFont(textConf.fontName)];
                        case 1:
                            font = _a.sent();
                            if (font) {
                                target.font = font;
                            }
                            _a.label = 2;
                        case 2: return [3 /*break*/, 4];
                        case 3:
                            cc.error(TAG, "updateText lang:" + this._nowLang + " key:" + key + " not found!");
                            _a.label = 4;
                        case 4:
                            lcc.doing.langUpdate.decCount();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 获得字体
         *
         * @param fname - 字体名称
         */
        LangManager.prototype.getFont = function (fname) {
            return __awaiter(this, void 0, void 0, function () {
                var font, path;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            font = this._fontBuff[fname];
                            if (!!font) return [3 /*break*/, 2];
                            path = lcc.indexMgr.getIndex(INDEXPATH.FONT + "/" + fname);
                            return [4 /*yield*/, lcc.packMgr.loadTTFFont(path)];
                        case 1:
                            font = _a.sent();
                            if (font) {
                                font.addRef();
                                this._fontBuff[fname] = font;
                            }
                            _a.label = 2;
                        case 2: return [2 /*return*/, font];
                    }
                });
            });
        };
        /**
         * @zh
         * 更新图片
         *
         * @param target - 目标对象
         * @param key - 关联图片key
         */
        LangManager.prototype.updateImage = function (target, key) {
            return __awaiter(this, void 0, void 0, function () {
                var imgPath, spframe;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            lcc.doing.langUpdate.addCount();
                            imgPath = this._langConfig.images[key];
                            if (!imgPath) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.getLangImage(imgPath)];
                        case 1:
                            spframe = _a.sent();
                            if (spframe) {
                                target.spriteFrame = spframe;
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            cc.error(TAG, "updateImage lang:" + this._nowLang + " key:" + key + " not found!");
                            _a.label = 3;
                        case 3:
                            lcc.doing.langUpdate.decCount();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 获得语言图片
         *
         * @param fpath - 语言图片路径
         */
        LangManager.prototype.getLangImage = function (fpath) {
            return __awaiter(this, void 0, void 0, function () {
                var spframe;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            spframe = this._imageBuff[fpath];
                            if (!!spframe) return [3 /*break*/, 2];
                            return [4 /*yield*/, lcc.packMgr.loadSpriteFrame(fpath)];
                        case 1:
                            spframe = _a.sent();
                            if (spframe) {
                                spframe.addRef();
                                this._imageBuff[fpath] = spframe;
                            }
                            _a.label = 2;
                        case 2: return [2 /*return*/, spframe];
                    }
                });
            });
        };
        /**
         * @zh
         * 添加语言组<br/>
         * 配套组件使用
         *
         * @param group - 组名称
         * @param texts - 文本组
         * @param images - 图片组
         */
        LangManager.prototype._addLangGroup = function (group, texts, images) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this._langGroupMap[group]) return [3 /*break*/, 1];
                            cc.error(TAG, "lang group conflict " + group + "!!!");
                            return [3 /*break*/, 3];
                        case 1:
                            this._langGroupMap[group] = {
                                texts: texts,
                                images: images,
                            };
                            return [4 /*yield*/, this.updateLangGroup(group)];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 移除语言组<br/>
         * 配套组件使用
         *
         * @param group - 组名称
         */
        LangManager.prototype._removeLangGroup = function (group) {
            delete this._langGroupMap[group];
        };
        /**
         * @zh
         * 增加语言更新中计数
         */
        LangManager.prototype.addLangUpdating = function () {
            lcc.doing.langUpdate.addCount();
        };
        /**
         * @zh
         * 减少语言更新中计数
         */
        LangManager.prototype.decLangUpdating = function () {
            lcc.doing.langUpdate.decCount();
        };
        /**
         * @zh
         * 获得当前语言文本
         *
         * @param key - 关联key
         * @param args - 参数数组
         */
        LangManager.prototype.getText = function (key) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var textConf = this._langConfig.texts[key];
            if (textConf) {
                return lcc.variable.parseString.apply(lcc.variable, __spreadArray([textConf.text], args));
            }
        };
        /**
         * @zh
         * 获得当前语言图片
         *
         * @param key - 关联key
         */
        LangManager.prototype.getImage = function (key) {
            return __awaiter(this, void 0, void 0, function () {
                var imgPath;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            imgPath = this._langConfig.images[key];
                            if (!imgPath) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.getLangImage(imgPath)];
                        case 1: return [2 /*return*/, _a.sent()];
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 获得图片的路径
         *
         * @param key - 关联key
         */
        LangManager.prototype.getImageUrl = function (key) {
            return __awaiter(this, void 0, void 0, function () {
                var imgPath;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            imgPath = this._langConfig.images[key];
                            if (!imgPath) return [3 /*break*/, 2];
                            return [4 /*yield*/, lcc.packMgr.getAssetUrl(imgPath)];
                        case 1: return [2 /*return*/, _a.sent()];
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        return LangManager;
    }(cc.EventTarget));
    ;
    /**
     * @zh
     * 语言管理器对象
     */
    lcc.langMgr = new LangManager();
    lcc.variable.set('LANG', function (key) {
        return lcc.langMgr.getText(key);
    });
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path = "./lang-manager.ts" /> 
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path = "./lang-manager.ts" /> 
(function (lcc) {
    var TAG = "lcc/language/multiple-languages.ts";
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property, menu = _a.menu;
    /**
     * @zh
     * 多语言绑定组件
     */
    var MultipleLanguages = /** @class */ (function (_super) {
        __extends(MultipleLanguages, _super);
        function MultipleLanguages() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.langTexts = [];
            _this.langImages = [];
            return _this;
        }
        MultipleLanguages.prototype.onLoad = function () {
            // @ts-ignore
            lcc.langMgr._addLangGroup(this._id, this.langTexts, this.langImages);
        };
        MultipleLanguages.prototype.onDestroy = function () {
            // @ts-ignore
            lcc.langMgr._removeLangGroup(this._id);
        };
        __decorate([
            property({
                type: [lcc.LangText],
                tooltip: "多语言文本"
            })
        ], MultipleLanguages.prototype, "langTexts", void 0);
        __decorate([
            property({
                type: [lcc.LangImage],
                tooltip: "多语言图片"
            })
        ], MultipleLanguages.prototype, "langImages", void 0);
        MultipleLanguages = __decorate([
            ccclass("lcc.MultipleLanguages"),
            menu("i18n:lcc-framework.menu-extension/MultipleLanguages")
        ], MultipleLanguages);
        return MultipleLanguages;
    }(cc.Component));
    lcc.MultipleLanguages = MultipleLanguages;
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../base/state.ts" />
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../base/state.ts" />
(function (lcc) {
    var _a;
    var TAG = "lcc/log/log-manager.ts";
    /**
     * @zh
     * 日志等级
     */
    var LOGLEVEL;
    (function (LOGLEVEL) {
        /**
         * @zh
         * 最低级，什么都可以
         */
        LOGLEVEL[LOGLEVEL["VERBOSE"] = 1] = "VERBOSE";
        /**
         * @zh
         * 调试日志
         */
        LOGLEVEL[LOGLEVEL["DEBUG"] = 2] = "DEBUG";
        /**
         * @zh
         * 信息日志
         */
        LOGLEVEL[LOGLEVEL["INFO"] = 3] = "INFO";
        /**
         * @zh
         * 警告日志
         */
        LOGLEVEL[LOGLEVEL["WARN"] = 4] = "WARN";
        /**
         * @zh
         * 错误日志
         */
        LOGLEVEL[LOGLEVEL["ERROR"] = 5] = "ERROR";
        /**
         * @zh
         * 寂静, 用于关闭日志
         */
        LOGLEVEL[LOGLEVEL["SILENT"] = 6] = "SILENT";
    })(LOGLEVEL = lcc.LOGLEVEL || (lcc.LOGLEVEL = {}));
    /**
     * @zh
     * 日志等级描述
     */
    var LogLevelDescs = (_a = {},
        _a[LOGLEVEL.VERBOSE] = "V",
        _a[LOGLEVEL.DEBUG] = "D",
        _a[LOGLEVEL.INFO] = "I",
        _a[LOGLEVEL.WARN] = "W",
        _a[LOGLEVEL.ERROR] = "E",
        _a[LOGLEVEL.SILENT] = "S",
        _a);
    /**
     * @zh
     * 最大日志缓冲 默认1M
     */
    lcc.LOG_BUFFERSIZE = 1024 * 1024;
    /**
     * @zh
     * 日志默认存放路径<br/>
      * *原生平台有效*
     */
    lcc.LOG_PATH = CC_JSB && jsb.fileUtils.getWritablePath() + "/logs";
    /**
     * @zh
     * 生成的日志文件名，不含后缀<br/>
     * *原生平台有效*
     */
    lcc.LOG_FILENAME = 'log';
    /**
     * @zh
     * 开启单个日志文件<br/>
     * 开启后所有输出都会追加到这个文件中<br/>
     * *原生平台有效*
     */
    lcc.LOG_SINGLE = false;
    /**
     * @zh
     * 日志管理器<br/>
     * 主要管理框架日志的输出和保存<br/>
     * 并且也监听程序异常日志
     */
    var LogManager = /** @class */ (function () {
        /**
         * @zh
         * 构造函数
         */
        function LogManager() {
            var _this = this;
            /**
             * @zh
             * 日志输出等级<br>
             * 只有不小于该等级的日志会被输出和保存<br/>
             * 保存不一定是及时的，有缓冲区
             */
            this._logLevel = LOGLEVEL.INFO;
            /**
             * @zh
             * 日志缓冲保存等级<br/>
             * 如果收到不小于该等级的日志会立刻保存
             */
            this._flushLevel = LOGLEVEL.ERROR;
            /**
             * @zh
             * 日志缓冲大小
             */
            this._buffSize = lcc.LOG_BUFFERSIZE;
            /**
             * @zh
             * 日志缓冲
             */
            this._logBuff = { logs: [], size: 0 };
            /**
             * @zh
             * 日志文件
             */
            this._logFile = null;
            /**
             * @zh
             * 日志格式化函数
             */
            this._logFormat = this.defaultLogFormat.bind(this);
            lcc.state.on('initialize', function () {
                lcc.doing.stateInitialize.in(function () {
                    _this._logLevel = LOGLEVEL.INFO;
                    _this._flushLevel = LOGLEVEL.ERROR;
                    _this._buffSize = lcc.LOG_BUFFERSIZE;
                    _this._logBuff = { logs: [], size: 0 };
                    _this._logFile = null;
                    _this._logFormat = _this.defaultLogFormat.bind(_this);
                    if (!CC_EDITOR) {
                        window.onerror = _this.onError.bind(_this);
                    }
                });
            });
            lcc.state.on('release', function () {
                lcc.doing.stateRelease.in(function () {
                    if (!CC_EDITOR) {
                        window.onerror = null;
                    }
                });
            });
        }
        /**
         * @zh
         * 获取单例对象
         */
        LogManager.getInstance = function () {
            if (!LogManager._instance) {
                LogManager._instance = new LogManager();
            }
            return LogManager._instance;
        };
        /**
         * @zh
         * 全局错误
         *
         * @param message
         * @param source
         * @param lineno
         * @param colno
         * @param error
         */
        LogManager.prototype.onError = function (message, source, lineno, colno, error) {
            this.error("SYSTEM", "[" + error + "]" + message + " < " + source + "(" + lineno + "," + colno + ")");
        };
        /**
         * @zh
         * 获得日志文件<br/>
         * 如果使用`LOG_SINGLE`单日志文件，那么始终获得同一个日志文件<br/>
         * 否则，每一次启动程序，日志文件名称都会加上时间标记
         */
        LogManager.prototype.getLogFile = function () {
            if (!this._logFile) {
                if (CC_JSB) {
                    jsb.fileUtils.createDirectory(lcc.LOG_PATH);
                    if (lcc.LOG_SINGLE) {
                        this._logFile = lcc.LOG_PATH + "/" + lcc.LOG_FILENAME + ".log";
                    }
                    else {
                        var now = new Date();
                        var yyyy = now.getFullYear();
                        var mm = now.getMonth() + 1;
                        var dd = now.getDate();
                        var HH = now.getHours();
                        var MM = now.getMinutes();
                        var SS = now.getSeconds();
                        this._logFile = lcc.LOG_PATH + "/" + yyyy + (mm < 10 ? "0" + mm : mm) + (dd < 10 ? "0" + dd : dd) + (HH < 10 ? "0" + HH : HH) + (MM < 10 ? "0" + MM : MM) + (SS < 10 ? "0" + SS : SS) + "-" + lcc.LOG_FILENAME + ".log";
                    }
                }
            }
            return this._logFile;
        };
        /**
         * @zh
         * 设置日志输出等级
         *
         * @param level - 日志等级
         */
        LogManager.prototype.setLogLevel = function (level) {
            this._logLevel = level;
        };
        /**
         * @zh
         * 设置缓冲区保存等级
         *
         * @param level - 日志等级
         */
        LogManager.prototype.setFlushLevel = function (level) {
            this._flushLevel = level;
        };
        /**
         * @zh
         * 设置日志缓冲区大小
         *
         * @param size - 大小，字节数
         */
        LogManager.prototype.setBufferSize = function (size) {
            this._buffSize = size;
        };
        /**
         * @zh
         * 设置日志格式化函数<br/>
         * 如果设置为'null'，那么会使用默认的格式化函数
         *
         * @param format - 自定义格式化函数
         */
        LogManager.prototype.setLogFormat = function (format) {
            this._logFormat = format;
            if (!this._logFormat) {
                this._logFormat = this.defaultLogFormat.bind(this);
            }
        };
        /**
         * @zh
         * 默认日志格式化函数
         *
         * @param params - 日志参数
         */
        LogManager.prototype.defaultLogFormat = function (params) {
            return lcc.js.formatDate("mm-dd HH:MM:SS", new Date()) + " " + LogLevelDescs[params.level] + "/" + params.tag
                + " - " + params.content;
        };
        /**
         * @zh
         * 写入日志<br/>
         * 根据`日志输出等级`，决定是否输出日志<br/>
         * 根据`缓冲保存等级`，决定是否立即保存日志
         *
         * @param params - 日志参数
         */
        LogManager.prototype.writeLog = function (params) {
            if (params.level >= this._logLevel) {
                var log = this._logFormat(params);
                switch (params.level) {
                    case LOGLEVEL.ERROR:
                        cc.error(log);
                        break;
                    case LOGLEVEL.WARN:
                        cc.warn(log);
                        break;
                    default:
                        cc.log(log);
                        break;
                }
                if (CC_JSB) {
                    this._logBuff.logs.push(log);
                    this._logBuff.size += log.length;
                    if (params.level >= this._flushLevel || this._logBuff.size >= this._buffSize) {
                        this.flushLog();
                    }
                }
            }
        };
        /**
         * @zh
         * 保存日志缓冲<br/>
         * 如果需要马上在日志文件上看到输出，可以手动调用
         */
        LogManager.prototype.flushLog = function () {
            if (this._logBuff.size > 0) {
                if (CC_JSB) {
                    // 写入缓冲区
                    jsb.fileUtils.writeStringToFile(this._logBuff.logs.join("\n") + "\n", this.getLogFile());
                }
                this._logBuff = { logs: [], size: 0 };
            }
        };
        /**
         * @zh
         * 输出 VERBOSE 日志
         */
        LogManager.prototype.verbose = function (tagOrParams, msg) {
            var args = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args[_i - 2] = arguments[_i];
            }
            if (LOGLEVEL.VERBOSE >= this._logLevel) {
                if (typeof tagOrParams == "string") {
                    tagOrParams = { tag: tagOrParams };
                }
                tagOrParams.level = LOGLEVEL.VERBOSE;
                tagOrParams.content = lcc.js.formatString(msg, args);
                this.writeLog(tagOrParams);
            }
        };
        /**
         * @zh
         * 输出 DEBUG 日志
         */
        LogManager.prototype.debug = function (tagOrParams, msg) {
            var args = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args[_i - 2] = arguments[_i];
            }
            if (LOGLEVEL.DEBUG >= this._logLevel) {
                if (typeof tagOrParams == "string") {
                    tagOrParams = { tag: tagOrParams };
                }
                tagOrParams.level = LOGLEVEL.DEBUG;
                tagOrParams.content = lcc.js.formatString(msg, args);
                this.writeLog(tagOrParams);
            }
        };
        /**
         * @zh
         * 输出 INFO 日志
         */
        LogManager.prototype.info = function (tagOrParams, msg) {
            var args = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args[_i - 2] = arguments[_i];
            }
            if (LOGLEVEL.INFO >= this._logLevel) {
                if (typeof tagOrParams == "string") {
                    tagOrParams = { tag: tagOrParams };
                }
                tagOrParams.level = LOGLEVEL.INFO;
                tagOrParams.content = lcc.js.formatString(msg, args);
                this.writeLog(tagOrParams);
            }
        };
        /**
         * @zh
         * 输出 WARN 日志
         */
        LogManager.prototype.warn = function (tagOrParams, msg) {
            var args = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args[_i - 2] = arguments[_i];
            }
            if (LOGLEVEL.WARN >= this._logLevel) {
                if (typeof tagOrParams == "string") {
                    tagOrParams = { tag: tagOrParams };
                }
                tagOrParams.level = LOGLEVEL.WARN;
                tagOrParams.content = lcc.js.formatString(msg, args);
                this.writeLog(tagOrParams);
            }
        };
        /**
         * @zh
         * 输出 ERROR 日志
         */
        LogManager.prototype.error = function (tagOrParams, msg) {
            var args = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args[_i - 2] = arguments[_i];
            }
            if (LOGLEVEL.ERROR >= this._logLevel) {
                if (typeof tagOrParams == "string") {
                    tagOrParams = { tag: tagOrParams };
                }
                tagOrParams.level = LOGLEVEL.ERROR;
                tagOrParams.content = lcc.js.formatString(msg, args);
                this.writeLog(tagOrParams);
            }
        };
        return LogManager;
    }());
    ;
    /**
     * @zh
     * 日志管理器对象
     */
    lcc.logMgr = new LogManager();
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
(function (lcc) {
    var TAG = "lcc/network/net-line.ts";
    /**
     * @zh
     * 网络线模式
     */
    var NetLineMode;
    (function (NetLineMode) {
        /**
         * @zh
         * 客户端
         */
        NetLineMode[NetLineMode["CLIENT"] = 1] = "CLIENT";
        /**
         * @zh
         * 服务器
         */
        NetLineMode[NetLineMode["SERVER"] = 2] = "SERVER";
        /**
         * @zh
         * 连接-服务器收到的连接
         */
        NetLineMode[NetLineMode["CONNECT"] = 3] = "CONNECT";
    })(NetLineMode = lcc.NetLineMode || (lcc.NetLineMode = {}));
    ;
    /**
     * @zh
     * 网络线基类<br/>
     * 基本属性、网络数据的缓冲和发送操作等
     */
    var NetLine = /** @class */ (function (_super) {
        __extends(NetLine, _super);
        /**
         * @zh
         * 构造函数
         * @param name - 名称
         * @param mode - 模式
         * @param type - 类型
         */
        function NetLine(name, mode, type) {
            var _this = _super.call(this) || this;
            /**
             * @zh
             * 网络线名称
             */
            _this._name = null;
            /**
             * @zh
             * 网络线模式
             */
            _this._mode = null;
            /**
             * @zh
             * 网络线类型
             */
            _this._type = null;
            /**
             * @zh
             * 使用ProtoBuff
             */
            _this._useProtoBuff = false;
            /**
             * @zh
             * 自动发送
             */
            _this._autoSend = true;
            /**
             * @zh
             * 发送缓冲
             */
            _this._sendCaches = [];
            /**
             * @zh
             * 自动分发
             */
            _this._autoDispatch = true;
            /**
             * @zh
             * 分发缓冲
             */
            _this._dispatchCaches = [];
            _this._mode = mode;
            _this._type = type;
            _this._name = name;
            return _this;
        }
        /**
         * @zh
         * 注册网络线类型
         *
         * @param netType - 网络类型枚举
         * @param value - 网络类型对象
         */
        NetLine.registerNetType = function (netType, value) {
            NetLine.__types[netType] = value;
        };
        /**
         * @zh
         * 获得网络类型对象
         *
         * @param netType - 网络类型枚举
         */
        NetLine.getNetType = function (netType) {
            return NetLine.__types[netType];
        };
        /**
         * @zh
         * 配置网络线<br/>
         * 子类中应该重写该函数
         *
         * @param config - 不同类型的网络线有不同的配置
         */
        NetLine.prototype.config = function (config) { };
        /**
         * @zh
         * 检查网络线是否有效<br/>
         * 子类中应该重写该函数
         *
         * @returns 如果无效，有些操作可能不会执行
         */
        NetLine.prototype.isValid = function () {
            return false;
        };
        /**
         * @zh
         * 打开网络线<br/>
         * 子类中应该重写该函数
         */
        NetLine.prototype.open = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, false];
                });
            });
        };
        /**
         * @zh
         * 关闭网络线<br/>
         * 子类中应该重写该函数
         */
        NetLine.prototype.close = function () { };
        /**
         * @zh
         * 更新网络线<br/>
         * 子类中应该重写该函数
         *
         * @param dt 间隔时间
         */
        NetLine.prototype.onUpdate = function (dt) { };
        /**
         * @zh
         * 发送网络数据<br/>
         * 子类中应该重写该函数
         *
         * @param data - 网络数据
         */
        NetLine.prototype.sendNetData = function (data) {
            console.warn(TAG, "NetLine " + this._name + " discard send datas!");
        };
        /**
         * @zh
         * 获得网络线名称
         */
        NetLine.prototype.getName = function () {
            return this._name;
        };
        /**
         * @zh
         * 获得模式
         */
        NetLine.prototype.getMode = function () {
            return this._mode;
        };
        /**
         * @zh
         * 获得类型
         */
        NetLine.prototype.getType = function () {
            return this._type;
        };
        /**
         * @zh
         * 设置是否使用ProtoBuff
         *
         * @param use - 是否使用ProtoBuff
         */
        NetLine.prototype.useProtoBuff = function (use) {
            this._useProtoBuff = use;
        };
        /**
         * @zh
         * 检查是否使用ProtoBuff
         */
        NetLine.prototype.isUseProtoBuff = function () {
            return this._useProtoBuff;
        };
        /**
         * @zh
         * 自动发送使能<br/>、
         * `自动发送`的意思是：如果`writeProtocol`写入协议后，会立刻发送出去
         *
         * @param psend - 是否自动发送
         */
        NetLine.prototype.autoSend = function (pwrite) {
            lcc.DEBUG.NETWORK && cc.log(TAG, this.getName() + " autoSend " + pwrite);
            if (this._autoSend != pwrite) {
                this._autoSend = pwrite;
                if (pwrite) {
                    this.flushSendCaches();
                }
            }
        };
        /**
         * @zh
         * 自动分发使能<br/>、
         * `自动发送`的意思是：如果接收到网络数据协议后，是否立刻`emit`到注册的协议事件
         *
         * @param dispatch - 是否自动分发
         */
        NetLine.prototype.autoDispatch = function (dispatch) {
            lcc.DEBUG.NETWORK && cc.log(TAG, this.getName() + " autoDispatch " + dispatch);
            if (this._autoDispatch != dispatch) {
                this._autoDispatch = dispatch;
                if (dispatch) {
                    this.flushDispatchCaches();
                }
            }
        };
        /**
         * @zh
         * 压入发送缓存
         *
         * @param datas - 协议数据
         */
        NetLine.prototype.pushSendCaches = function (datas) {
            var _a;
            lcc.DEBUG.NETWORK && cc.log(TAG, this.getName() + " pushSendCaches " + JSON.stringify(datas));
            (_a = this._sendCaches).push.apply(_a, datas);
            if (this._autoSend) {
                this.flushSendCaches();
            }
        };
        /**
         * @zh
         * 压入分发缓存
         *
         * @param datas - 协议数据
         */
        NetLine.prototype.pushDispatchCaches = function (datas) {
            var _a;
            lcc.DEBUG.NETWORK && cc.log(TAG, this.getName() + " pushDispatchCaches " + JSON.stringify(datas));
            (_a = this._dispatchCaches).push.apply(_a, datas);
            if (this._autoDispatch) {
                this.flushDispatchCaches();
            }
        };
        /**
         * @zh
         * 弹出发送缓冲<br/>
         * 会返回并清空发送缓冲
         *
         * @returns 协议数据
         */
        NetLine.prototype.popSendCaches = function () {
            if (this._sendCaches.length > 0) {
                var caches_1 = this._sendCaches;
                this._sendCaches = [];
                lcc.DEBUG.NETWORK && cc.log(TAG, this.getName() + " popSendCaches success");
                return caches_1;
            }
        };
        /**
         * @zh
         * 输出发送缓冲<br/>
         * 当网络线无效或者没有数据时，除非使用`force`，否则不能执行发送操作
         *
         * @param force - 如果当前网络线无效，也强制输出(最终结果可能是丢弃所有数据)
         */
        NetLine.prototype.flushSendCaches = function (force) {
            if (force === void 0) { force = false; }
            if (force || (this.isValid() && this._sendCaches.length > 0)) {
                lcc.DEBUG.NETWORK && cc.log(TAG, this.getName() + " flushSendCaches success " + force);
                this.writeNetLineData(lcc.netdata.NetDataType.PROTOCOLS);
            }
        };
        /**
         * @zh
         * 输出分发缓冲<br/>
         * 分发处理缓冲中的网络数据
         */
        NetLine.prototype.flushDispatchCaches = function () {
            lcc.DEBUG.NETWORK && cc.log(TAG, this.getName() + " flushDispatchCaches success");
            for (var _i = 0, _a = this._dispatchCaches; _i < _a.length; _i++) {
                var cache = _a[_i];
                try {
                    this.emit("protocol-" + cache.cmd, cache.data, this);
                    this.emit("protocol", cache.cmd, cache.data, this);
                    if (this._mode === NetLineMode.CLIENT) {
                        lcc.netClient.emit("protocol-" + cache.cmd, cache.data, this);
                        lcc.netClient.emit("protocol", cache.cmd, cache.data, this);
                    }
                }
                catch (e) {
                    cc.error(TAG, this.getName() + " flushDispatchCaches Exception " + e);
                }
            }
            this._dispatchCaches = [];
        };
        /**
         * @zh
         * 写入网络线数据
         *
         * @param type - 数据类型
         * @param data - 数据对象
         */
        NetLine.prototype.writeNetLineData = function (type, data) {
            lcc.DEBUG.NETWORK && cc.log(TAG, this.getName() + " writeNetLineData " + type + " " + (data && JSON.stringify(data)));
            this.sendNetData({ type: type, data: data, protocols: this.popSendCaches() });
        };
        /**
         * @zh
         * 写入协议<br/>
         * 协议是最基本的通信数据，它由`cmd`标记数据的类型，和`data`包含具体内容组成
         *
         * @param cmd - 命令
         * @param data - 数据
         */
        NetLine.prototype.writeProtocol = function (cmd, data) {
            lcc.DEBUG.NETWORK && cc.log(TAG, this.getName() + " writeProtocol " + cmd + " " + (data && JSON.stringify(data)));
            this.pushSendCaches([{
                    cmd: cmd,
                    data: data,
                }]);
        };
        /**
         * @zh
         * 网络线类型表
         */
        NetLine.__types = lcc.js.createMap();
        return NetLine;
    }(cc.EventTarget));
    lcc.NetLine = NetLine;
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../base/state.ts" />
/// <reference path="../utils/js.ts" />
/// <reference path="./net-line.ts" />
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../base/state.ts" />
/// <reference path="../utils/js.ts" />
/// <reference path="./net-line.ts" />
(function (lcc) {
    var TAG = "lcc/network/net-client.ts";
    /**
     * @zh
     * 网络客户端tick时间<br/>
     * 客户端上[[NetLine.onUpdate]]的基准时间
     */
    lcc.NETCLIENT_TICKTIME = 1;
    /**
     * @zh
     * 网络客户端映射表
     */
    lcc.NETCLIENTS = lcc.js.createMap();
    /**
     * @zh
     * 网络客户端管理<br/>
     * 主动发起连接端的管理
     */
    var NetClient = /** @class */ (function (_super) {
        __extends(NetClient, _super);
        /**
         * @zh
         * 构造函数
         */
        function NetClient() {
            var _this = _super.call(this) || this;
            /**
             * @zh
             * 是否使用网络心跳
             */
            _this._useNetHeart = false;
            /**
             * @zh
             * WSS 配置
             */
            _this._WSSConfig = null;
            lcc.state.on('initialize', function () {
                lcc.doing.stateInitialize.in(function () {
                    _this._useNetHeart = false;
                    _this._WSSConfig = null;
                });
            });
            lcc.state.on('release', function () {
                lcc.doing.stateRelease.in(function () {
                    _this.clear();
                    _this.removeAllClients();
                });
            });
            return _this;
        }
        /**
         * @zh
         * 设置WSS 配置
         *
         * @param protocol - 协议
         * @param cert - 证书
         */
        NetClient.prototype.setWSSConfig = function (protocol, cert) {
            this._WSSConfig = {
                protocol: protocol,
                cert: cert,
            };
        };
        /**
         * @zh
         * 获得WSS 配置
         */
        NetClient.prototype.getWSSConfig = function () {
            return this._WSSConfig;
        };
        /**
         * @zh
         * 安装心跳
         */
        NetClient.prototype.setupHeartTick = function () {
            if (!this._useNetHeart && !lcc.js.isEmptyMap(lcc.NETCLIENTS)) {
                lcc.timerMgr.addTimer(lcc.NETCLIENT_TICKTIME, this.onHeartTick.bind(this), {
                    group: "lcc.NetClient",
                    key: "tick",
                    loop: true
                });
                this._useNetHeart = true;
                lcc.DEBUG.NETWORK && cc.log(TAG, "setupHeartTick tick " + lcc.NETCLIENT_TICKTIME);
            }
        };
        /**
         * @zh
         * 删除心跳
         */
        NetClient.prototype.deleteHeartTick = function () {
            if (this._useNetHeart && lcc.js.isEmptyMap(lcc.NETCLIENTS)) {
                lcc.timerMgr.removeTimer({
                    group: "lcc.NetClient",
                    key: "tick",
                });
                this._useNetHeart = false;
                lcc.DEBUG.NETWORK && cc.log(TAG, "deleteHeartTick tick");
            }
        };
        /**
         * @zh
         * 当心跳回调
         *
         * @param dt 间隔时间，一般为[[NETCLIENT_TICKTIME]]
         */
        NetClient.prototype.onHeartTick = function (dt) {
            for (var _i = 0, _a = Object.keys(lcc.NETCLIENTS); _i < _a.length; _i++) {
                var cname = _a[_i];
                var netline = lcc.NETCLIENTS[cname];
                if (netline) {
                    netline.onUpdate(dt);
                }
            }
        };
        /**
         * 添加客户端<br/>
         * 这里只是添加客户端，如果你需要启动客户端，应该手动调用`open`<br/>
         * ```
         *      let client = lcc.netClient.addClient(...);
         *      if(client){
         *          // 打开客户端，一般是向服务器发送连接请求
         *          client.open();
         *      }
         * ```
         *
         * @param name - 名称
         * @param type - 类型
         * @param config - 配置
         */
        NetClient.prototype.addClient = function (name, type, config) {
            if (config === void 0) { config = lcc.js.createMap(); }
            lcc.DEBUG.NETWORK && cc.log(TAG, "addClient " + name + " " + type + " " + JSON.stringify(config));
            if (lcc.NETCLIENTS[name]) {
                cc.error(TAG, "client [" + name + "] conflict!");
            }
            else {
                var netType = lcc.NetLine.getNetType(type);
                if (!netType) {
                    cc.error(TAG, "net type [" + type + "] not found!");
                }
                else {
                    var netline = new netType(name, lcc.NetLineMode.CLIENT, type);
                    lcc.NETCLIENTS[name] = netline;
                    netline.config(config);
                    this.setupHeartTick();
                    lcc.DEBUG.NETWORK && cc.log(TAG, "addClient " + name + " success");
                    return netline;
                }
            }
        };
        /**
         * @zh
         * 获得网络客户端
         *
         * @param name 名称
         *
         * @returns 客户端对象
         */
        NetClient.prototype.getClient = function (name) {
            return lcc.NETCLIENTS[name];
        };
        /**
         * @zh
         * 移除网络客户端
         *
         * @param name 名称
         */
        NetClient.prototype.removeClient = function (name) {
            lcc.DEBUG.NETWORK && cc.log(TAG, "removeClient " + name);
            var netline = lcc.NETCLIENTS[name];
            if (netline) {
                netline.close();
                delete lcc.NETCLIENTS[name];
                this.deleteHeartTick();
                lcc.DEBUG.NETWORK && cc.log(TAG, "removeClient " + name + " success");
            }
        };
        /**
         * @zh
         * 移除所有客户端
         */
        NetClient.prototype.removeAllClients = function () {
            for (var _i = 0, _a = Object.keys(lcc.NETCLIENTS); _i < _a.length; _i++) {
                var name_2 = _a[_i];
                this.removeClient(name_2);
            }
        };
        return NetClient;
    }(cc.EventTarget));
    ;
    /**
     * @zh
     * 网络客户端管理实例
     */
    lcc.netClient = new NetClient();
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
(function (lcc) {
    var js;
    (function (js) {
        var TAG = "lcc/utils/js-buffer.ts";
        /**
         * @zh
         * 缓冲读取对象
         */
        var BufferReader = /** @class */ (function () {
            /**
             * @zh
             * 构造缓冲读取类
             *
             * @param buffer - 缓冲实体
             * @param index - 当前索引
             * @param capacity - 当前容量
             */
            function BufferReader(buffer, index, capacity) {
                if (index === void 0) { index = 0; }
                /**
                 * @zh
                 * 缓冲对象
                 */
                this._buffer = null;
                /**
                 * @zh
                 * 视图
                 */
                this._view = null;
                /**
                 * @zh
                 * 当前索引
                 */
                this._index = 0;
                /**
                 * @zh
                 * 缓冲容量
                 */
                this._capacity = 0;
                this._buffer = buffer;
                this._view = new DataView(buffer);
                this._index = index;
                this._capacity = capacity == null ? buffer.byteLength : capacity;
            }
            /**
             * @zh
             * 跳过长度字节
             *
             * @param count - 字节数
             */
            BufferReader.prototype.skip = function (count) {
                this._index += count;
                if (this._index > this._capacity) {
                    this._index = this._capacity;
                }
            };
            /**
             * @zh
             * 缓冲区对齐
             *
             * @param size - 对齐大小
             */
            BufferReader.prototype.alignment = function (size) {
                var rem = this._index % size;
                if (rem != 0) {
                    this.skip(size - rem);
                }
            };
            /**
             * @zh
             * 读取 Byte
             */
            BufferReader.prototype.readByte = function () {
                var value = this._view.getInt8(this._index);
                this.skip(1);
                return value;
            };
            /**
             * @zh
             * 读取 unsigned Byte
             */
            BufferReader.prototype.readUByte = function () {
                var value = this._view.getUint8(this._index);
                this.skip(1);
                return value;
            };
            /**
             * @zh
             * 查看 Byte
             */
            BufferReader.prototype.peekByte = function () {
                return this._view.getInt8(this._index);
            };
            /**
             * @zh
             * 查看 unsigned Byte
             */
            BufferReader.prototype.peekUByte = function () {
                return this._view.getUint8(this._index);
            };
            /**
             * @zh
             * 读取 Short
             */
            BufferReader.prototype.readShort = function () {
                var value = this._view.getInt16(this._index, true);
                this.skip(2);
                return value;
            };
            /**
             * @zh
             * 读取 unsigned Short
             */
            BufferReader.prototype.readUShort = function () {
                var value = this._view.getUint16(this._index, true);
                this.skip(2);
                return value;
            };
            /**
             * @zh
             * 查看 Short
             */
            BufferReader.prototype.peekShort = function () {
                return this._view.getInt16(this._index, true);
            };
            /**
             * @zh
             * 查看 unsigned Short
             */
            BufferReader.prototype.peekUShort = function () {
                return this._view.getUint16(this._index, true);
            };
            /**
             * @zh
             * 读取 Long
             */
            BufferReader.prototype.readLong = function () {
                var value = this._view.getInt32(this._index, true);
                this.skip(4);
                return value;
            };
            /**
             * @zh
             * 读取 unsigned Long
             */
            BufferReader.prototype.readULong = function () {
                var value = this._view.getUint32(this._index, true);
                this.skip(4);
                return value;
            };
            /**
             * @zh
             * 查看 Long
             */
            BufferReader.prototype.peekLong = function () {
                return this._view.getInt32(this._index, true);
            };
            /**
             * @zh
             * 查看 unsigned Long
             */
            BufferReader.prototype.peekULong = function () {
                return this._view.getUint32(this._index, true);
            };
            /**
             * @zh
             * 读取 Float
             */
            BufferReader.prototype.readFloat = function () {
                var value = this._view.getFloat32(this._index, true);
                this.skip(4);
                return value;
            };
            /**
             * @zh
             * 查看 Float
             */
            BufferReader.prototype.peekFloat = function () {
                return this._view.getFloat32(this._index, true);
            };
            /**
             * @zh
             * 读取 Double
             */
            BufferReader.prototype.readDouble = function () {
                var value = this._view.getFloat64(this._index, true);
                this.skip(8);
                return value;
            };
            /**
             * @zh
             * 查看 Double
             */
            BufferReader.prototype.peekDouble = function () {
                return this._view.getFloat64(this._index, true);
            };
            /**
             * @zh
             * 读取字符串，使用utf16le
             */
            BufferReader.prototype.readString = function () {
                var len = this.readUShort();
                var str = js.ab2str(this.readData(len));
                return str;
            };
            /**
             * @zh
             * 缓冲区索引
             */
            BufferReader.prototype.getIndex = function () {
                return this._index;
            };
            /**
             * @zh
             * 缓冲区剩余大小
             */
            BufferReader.prototype.getRemainSize = function () {
                return this._capacity - this._index;
            };
            /**
             * @zh
             * 空闲缓冲大小
             */
            BufferReader.prototype.getEmptySize = function () {
                return this._buffer.byteLength - this._capacity;
            };
            /**
             * @zh
             * 读取数据
             *
             * @param count - 大小
             */
            BufferReader.prototype.readData = function (count) {
                if (count > 0) {
                    var buffer = this._buffer.slice(this._index, this._index + count);
                    this.skip(count);
                    return buffer;
                }
            };
            /**
             * @zh
             * 查看数据
             *
             * @param count - 大小
             */
            BufferReader.prototype.peekData = function (count) {
                if (count > 0) {
                    return this._buffer.slice(this._index, this._index + count);
                }
            };
            return BufferReader;
        }());
        js.BufferReader = BufferReader;
        /**
         * @zh
         * 缓冲写入对象
         */
        var BufferWriter = /** @class */ (function () {
            function BufferWriter() {
                /**
                 * @zh
                 * 缓冲数组
                 */
                this._buffers = [];
                /**
                 * @zh
                 * 缓冲大小
                 */
                this._size = 0;
            }
            /**
             * @zh
             * 获得缓冲大小
             */
            BufferWriter.prototype.getSize = function () {
                return this._size;
            };
            /**
             * @zh
             * 填充指定数量的字符
             *
             * @param count - 字节数
             * @param char - 数值
             */
            BufferWriter.prototype.fill = function (count, char) {
                if (count > 0) {
                    var buff = new ArrayBuffer(count);
                    (new Int8Array(buff)).fill(char, 0, -1);
                    this._buffers.push(buff);
                    this._size += count;
                }
            };
            /**
             * @zh
             * 缓冲区对齐
             *
             * @param size - 对齐字节数
             * @param char - 填充数值
             */
            BufferWriter.prototype.alignment = function (size, char) {
                var rem = this._size % size;
                if (rem != 0) {
                    this.fill(rem, char);
                }
            };
            /**
             * @zh
             * 写入 Byte
             *
             * @param byte - 数据
             */
            BufferWriter.prototype.writeByte = function (byte) {
                var buff = new ArrayBuffer(1);
                (new DataView(buff)).setInt8(0, byte);
                this._buffers.push(buff);
                this._size += 1;
            };
            /**
             * @zh
             * 写入 unsigned Byte
             *
             * @param byte - 数据
             */
            BufferWriter.prototype.writeUByte = function (byte) {
                var buff = new ArrayBuffer(1);
                (new DataView(buff)).setUint8(0, byte);
                this._buffers.push(buff);
                this._size += 1;
            };
            /**
             * @zh
             * 写入 Short
             *
             * @param Short - 数据
             */
            BufferWriter.prototype.writeShort = function (short) {
                var buff = new ArrayBuffer(2);
                (new DataView(buff)).setInt16(0, short, true);
                this._buffers.push(buff);
                this._size += 2;
            };
            /**
             * @zh
             * 写入 unsigned Short
             *
             * @param Short - 数据
             */
            BufferWriter.prototype.writeUShort = function (short) {
                var buff = new ArrayBuffer(2);
                (new DataView(buff)).setUint16(0, short, true);
                this._buffers.push(buff);
                this._size += 2;
            };
            /**
             * @zh
             * 写入 Long
             *
             * @param Long - 数据
             */
            BufferWriter.prototype.writeLong = function (long) {
                var buff = new ArrayBuffer(4);
                (new DataView(buff)).setInt32(0, long, true);
                this._buffers.push(buff);
                this._size += 4;
            };
            /**
             * @zh
             * 写入 unsigned Long
             *
             * @param Long - 数据
             */
            BufferWriter.prototype.writeULong = function (long) {
                var buff = new ArrayBuffer(4);
                (new DataView(buff)).setUint32(0, long, true);
                this._buffers.push(buff);
                this._size += 4;
            };
            /**
             * @zh
             * 写入 unsigned Float
             *
             * @param Float - 数据
             */
            BufferWriter.prototype.writeFloat = function (float) {
                var buff = new ArrayBuffer(4);
                (new DataView(buff)).setFloat32(0, float, true);
                this._buffers.push(buff);
                this._size += 4;
            };
            /**
             * @zh
             * 写入 unsigned Double
             *
             * @param Double - 数据
             */
            BufferWriter.prototype.writeDouble = function (double) {
                var buff = new ArrayBuffer(8);
                (new DataView(buff)).setFloat64(0, double, true);
                this._buffers.push(buff);
                this._size += 8;
            };
            /**
             * @zh
             * 写入数据
             *
             * @param buffer - 缓冲
             */
            BufferWriter.prototype.writeData = function (buffer) {
                this._buffers.push(buffer);
                this._size += buffer.byteLength;
            };
            /**
             * @zh
             * 写入UTF16LE字符串
             *
             * @param str - 字符串
             */
            BufferWriter.prototype.writeString = function (str) {
                var buff = js.str2ab(str);
                this.writeUShort(buff.byteLength);
                this.writeData(buff);
            };
            /**
             * @zh
             * 清空缓冲
             */
            BufferWriter.prototype.clear = function () {
                this._buffers = [];
                this._size = 0;
            };
            /**
             * @zh
             * 获得数据
             *
             * @returns 最终的Buffer数据
             */
            BufferWriter.prototype.getData = function () {
                return js.mergeABs.apply(js, this._buffers);
            };
            return BufferWriter;
        }());
        js.BufferWriter = BufferWriter;
        /**
         * @zh
         * 流缓冲读取类<br/>
         * 在[[BufferReader]]基础上添加了追加缓冲功能
         */
        var StreamReader = /** @class */ (function (_super) {
            __extends(StreamReader, _super);
            /**
             * @zh
             * 构造函数
             *
             * @param basesize 基础大小
             */
            function StreamReader(basesize) {
                return _super.call(this, new ArrayBuffer(basesize), 0, 0) || this;
            }
            /**
             * @zh
             * 清空缓冲区
             */
            StreamReader.prototype.clear = function () {
                this._capacity = 0;
                this._index = 0;
            };
            /**
             * @zh
             * 追加缓冲
             *
             * @param buffer - 缓冲对象
             */
            StreamReader.prototype.append = function (buffer) {
                if (this.getEmptySize() > buffer.byteLength) {
                    js.copyAB(buffer, this._buffer, this._capacity);
                    this._capacity += buffer.byteLength;
                }
                else {
                    var needsize = this.getRemainSize() + buffer.byteLength;
                    var newcapacity = (needsize > this._capacity ? needsize : this._capacity) * 2;
                    var newbuffer = new ArrayBuffer(newcapacity);
                    js.copyAB(this._buffer.slice(this._index, this._capacity), newbuffer, 0);
                    js.copyAB(buffer, newbuffer, this.getRemainSize());
                    this._buffer = newbuffer;
                    this._index = 0;
                    this._capacity = needsize;
                }
            };
            return StreamReader;
        }(BufferReader));
        js.StreamReader = StreamReader;
    })(js = lcc.js || (lcc.js = {}));
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../utils/js-buffer.ts" />
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../utils/js-buffer.ts" />
(function (lcc) {
    var TAG = "lcc/network/net-data.ts";
    /**
     * @zh
     * 内部网络数据<br/>
     * 不要引用他们，除非你知道在干什么
     */
    var netdata;
    (function (netdata) {
        var _a;
        /**
         * @zh
         * 网络数据类型
         */
        var NetDataType;
        (function (NetDataType) {
            /**
             * @zh
             * 协议
             */
            NetDataType[NetDataType["PROTOCOLS"] = 0] = "PROTOCOLS";
            /**
             * @zh
             * 心跳
             */
            NetDataType[NetDataType["HERT_TICK"] = 1] = "HERT_TICK";
            /**
             * @zh
             * 同步心跳时间
             */
            NetDataType[NetDataType["SYNC_HERTTICK_TIME"] = 2] = "SYNC_HERTTICK_TIME";
            /**
             * @zh
             * 同步连接ID
             */
            NetDataType[NetDataType["SYNC_CONNECT_ID"] = 3] = "SYNC_CONNECT_ID";
        })(NetDataType = netdata.NetDataType || (netdata.NetDataType = {}));
        /**
         * @zh
         * 空网络数据打包器
         */
        var EmptyPacker = {
            pack: function (wBuff, data) {
            },
            unpack: function (rBuff) {
            }
        };
        /**
         * @zh
         * 网络数据打包器映射表
         */
        netdata.PackerMap = (_a = {},
            _a[NetDataType.PROTOCOLS] = EmptyPacker,
            _a[NetDataType.HERT_TICK] = EmptyPacker,
            _a[NetDataType.SYNC_HERTTICK_TIME] = {
                pack: function (wBuff, data) {
                    wBuff.writeUShort(data.heartTime);
                },
                unpack: function (rBuff) {
                    var heartTime = rBuff.readUShort();
                    return {
                        heartTime: heartTime
                    };
                }
            },
            _a[NetDataType.SYNC_CONNECT_ID] = {
                pack: function (wBuff, data) {
                    wBuff.writeString(data.connectID || '');
                },
                unpack: function (rBuff) {
                    var connectID = rBuff.readString();
                    return {
                        connectID: connectID
                    };
                }
            },
            _a);
    })(netdata = lcc.netdata || (lcc.netdata = {}));
    /**
     * @zh
     * 协议接口, 内部使用
     */
    lcc.__pbInterface = null;
    /**
     * @zh
     * 打包网络数据
     *
     * @param netData - 网络数据对象
     * @param netLine - 可选，当前网络线
     */
    function packNetData(data, netLine) {
        var wBuff = new lcc.js.BufferWriter();
        wBuff.writeString(data.connectID || '');
        wBuff.writeUShort(data.type);
        var packer = netdata.PackerMap[data.type];
        if (!packer) {
            lcc.logMgr.error(TAG, "not find packer for NetData " + data.type);
            return null;
        }
        packer.pack(wBuff, data.data || {});
        // 打包协议
        var useProtocol = !netLine || netLine.isUseProtoBuff();
        var protoSize = data.protocols ? data.protocols.length : 0;
        wBuff.writeUShort(protoSize);
        for (var i = 0; i < protoSize; i++) {
            var protocol = data.protocols[i];
            if (useProtocol && lcc.__pbInterface && lcc.__pbInterface.hasProtocol(protocol.cmd)) {
                wBuff.writeUByte(1);
                wBuff.writeUShort(protocol.cmd);
                lcc.__pbInterface.packProtocol(wBuff, protocol.cmd, protocol.data);
            }
            else {
                wBuff.writeUByte(0);
                wBuff.writeString(JSON.stringify(protocol));
            }
        }
        return wBuff.getData();
    }
    lcc.packNetData = packNetData;
    /**
     * @zh
     * 解包网络数据
     *
     * @param netBuff - 网络数据缓冲
     */
    function unpackNetData(netBuff) {
        var rBuff = new lcc.js.BufferReader(netBuff);
        var connectID = rBuff.readString() || undefined;
        var type = rBuff.readUShort();
        var packer = netdata.PackerMap[type];
        if (!packer) {
            lcc.logMgr.error(TAG, "not find packer for NetData " + type);
            return null;
        }
        var data = packer.unpack(rBuff);
        // 解包协议
        var protoSize = rBuff.readUShort();
        var protocols = [];
        for (var i = 0; i < protoSize; i++) {
            if (rBuff.readUByte()) {
                var cmd = rBuff.readUShort();
                var data_1 = lcc.__pbInterface && lcc.__pbInterface.unpackProtocol(rBuff, cmd);
                protocols.push({
                    cmd: cmd,
                    data: data_1,
                });
            }
            else {
                protocols.push(JSON.parse(rBuff.readString()));
            }
        }
        return {
            connectID: connectID,
            type: type,
            data: data,
            protocols: protocols,
        };
    }
    lcc.unpackNetData = unpackNetData;
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/state.ts" />
/// <reference path="../log/log-manager.ts" />
/// <reference path="../utils/js.ts" />
/// <reference path="../utils/js-buffer.ts" />
/// <reference path="./net-data.ts" />
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/state.ts" />
/// <reference path="../log/log-manager.ts" />
/// <reference path="../utils/js.ts" />
/// <reference path="../utils/js-buffer.ts" />
/// <reference path="./net-data.ts" />
(function (lcc) {
    var TAG = "lcc/network/protocol-manager.ts";
    /**
     * protobuf库
     */
    lcc.__jspb = require('google-protobuf');
    /**
     * @zh
     * Protobuf管理器<br/>
     * 主要管理协议打包器
     */
    var ProtobufManager = /** @class */ (function () {
        /**
         * @zh
         * 构造管理器
         */
        function ProtobufManager() {
            var _this = this;
            /**
             * @zh
             * 协议映射表
             */
            this._protocolMap = lcc.js.createMap();
            /**
             * @zh
             * 消息映射表
             */
            this._messageMap = lcc.js.createMap();
            lcc.state.on('initialize', function () {
                lcc.doing.stateInitialize.in(function () {
                    //this._protocolMap = js.createMap();
                    //this._messageMap = js.createMap();
                    lcc.packMgr.on('released', _this.onPackReleased, _this);
                });
            });
            lcc.state.on('release', function () {
                lcc.doing.stateRelease.in(function () {
                    lcc.packMgr.targetOff(_this);
                });
            });
        }
        /**
         * @internal
         */
        ProtobufManager.prototype.onPackReleased = function (pname) {
            return __awaiter(this, void 0, void 0, function () {
                var _i, _a, k, protocol, _b, _c, k, message;
                return __generator(this, function (_d) {
                    for (_i = 0, _a = Object.keys(this._protocolMap); _i < _a.length; _i++) {
                        k = _a[_i];
                        protocol = this._protocolMap[k];
                        if (protocol.pack == pname) {
                            delete this._protocolMap[k];
                        }
                    }
                    for (_b = 0, _c = Object.keys(this._messageMap); _b < _c.length; _b++) {
                        k = _c[_b];
                        message = this._messageMap[k];
                        if (message.pack == pname) {
                            delete this._messageMap[k];
                        }
                    }
                    return [2 /*return*/];
                });
            });
        };
        /**
         * @zh
         * 判断是否有协议
         *
         * @param command - 命令号
         */
        ProtobufManager.prototype.hasProtocol = function (command) {
            return this._protocolMap[command] != null;
        };
        /**
         * @zh
         * 获得协议
         *
         * @param command - 命令号
         */
        ProtobufManager.prototype.getProtocol = function (command) {
            return this._protocolMap[command];
        };
        /**
         * @zh
         * 添加协议
         *
         * @param command - 命令号
         * @param msgName - 消息名称
         * @param msgType - 消息类型
         * @param pack - 所属包
         */
        ProtobufManager.prototype.addProtocol = function (command, msgName, msgType, pack) {
            if (this._protocolMap[command]) {
                lcc.logMgr.warn(TAG, "addProtocol command '" + command + "' conflict");
            }
            this._protocolMap[command] = {
                msgName: msgName,
                msgType: msgType,
            };
        };
        /**
         * @zh
         * 移除协议
         *
         * @param command - 命令号
         */
        ProtobufManager.prototype.removeProtocol = function (command) {
            delete this._protocolMap[command];
        };
        /**
         * @zh
         * 打包协议
         *
         * @param wBuff - 写入缓冲
         * @param command - 命令号
         * @param data - 数据
         */
        ProtobufManager.prototype.packProtocol = function (wBuff, command, data) {
            var protocol = this.getProtocol(command);
            if (protocol) {
                var msg = this.packMessage(protocol.msgName, data);
                var buff = msg.serializeBinary();
                wBuff.writeUShort(buff.byteLength);
                wBuff.writeData(buff);
            }
        };
        /**
         * @zh
         * 解包协议
         *
         * @param rBuff - 读取缓冲
         * @param command - 命令号
         */
        ProtobufManager.prototype.unpackProtocol = function (rBuff, command) {
            var protocol = this.getProtocol(command);
            if (protocol) {
                var byteLength = rBuff.readUShort();
                var buff = rBuff.readData(byteLength);
                var msg = protocol.msgType.deserializeBinary(buff);
                return lcc.pbMgr.unpackMessage(protocol.msgName, msg);
            }
        };
        /**
         * @zh
         * 获得消息打包器
         *
         * @param name - 消息名称
         */
        ProtobufManager.prototype.getMessagePacker = function (name) {
            var msg = this._messageMap[name];
            return msg && msg.packer;
        };
        /**
         * @zh
         * 添加消息打包器
         *
         * @param name - 消息名称
         * @param packer - 打包器
         * @param pack - 所属包
         */
        ProtobufManager.prototype.addMessagePacker = function (name, packer, pack) {
            if (this._messageMap[name]) {
                lcc.logMgr.warn(TAG, "addMessagePacker command '" + name + "' conflict");
            }
            this._messageMap[name] = {
                packer: packer,
                pack: pack,
            };
        };
        /**
         * @zh
         * 移除消息打包器
         *
         * @param name - 消息名称
         */
        ProtobufManager.prototype.removeMessagePacker = function (name) {
            delete this._messageMap[name];
        };
        /**
         * @zh
         * 打包消息
         *
         * @param name - 消息名称
         * @param data - 数据
         * @return - 消息对象
         */
        ProtobufManager.prototype.packMessage = function (name, data) {
            var packer = this.getMessagePacker(name);
            if (packer) {
                return packer.pack(data);
            }
        };
        /**
         * @zh
         * 解包消息
         *
         * @param name - 消息名称
         * @param msg - 消息对象
         * @return - 数据
         */
        ProtobufManager.prototype.unpackMessage = function (name, msg) {
            var packer = this.getMessagePacker(name);
            if (packer) {
                return packer.unpack(msg);
            }
        };
        return ProtobufManager;
    }());
    /**
     * @zh
     * 协议管理器实例
     */
    lcc.pbMgr = new ProtobufManager();
    // 设置协议接口
    lcc.__pbInterface = lcc.pbMgr;
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../base/state.ts" />
/// <reference path="../utils/js.ts" />
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../base/state.ts" />
/// <reference path="../utils/js.ts" />
(function (lcc) {
    var TAG = "lcc/prefab/node-pools.ts";
    /**
     * @zh
     * 节点池表
     */
    var NodePools = /** @class */ (function () {
        /**
         * 构造数据库管理器
         */
        function NodePools() {
            var _this = this;
            /**
             * @zh
             * 节点池表
             */
            this._pools = lcc.js.createMap();
            lcc.state.on('initialize', function () {
                lcc.doing.stateInitialize.in(function () {
                    _this._pools = lcc.js.createMap();
                });
            });
        }
        /**
         * @zh
         * 从对象池中获得节点
         *
         * @param prefab - 预制资源
         * @param name - 可选，自定义名称
         */
        NodePools.prototype.getNode = function (prefab, name) {
            name = name || prefab.data.name;
            var node = null;
            if (this._pools.hasOwnProperty(name)) {
                var pool = this._pools[name];
                if (pool.size() > 0) {
                    node = pool.get();
                }
                else {
                    node = cc.instantiate(prefab);
                }
            }
            else {
                var pool = new cc.NodePool();
                this._pools[name] = pool;
                node = cc.instantiate(prefab);
            }
            return node;
        };
        /**
         * @zh
         * 将节点放回对象池中
         *
         * @param node - 节点对象
         * @param name - 可选，自定义名称
         */
        NodePools.prototype.putNode = function (node, name) {
            name = name || node.name;
            var pool = null;
            if (this._pools.hasOwnProperty(name)) {
                pool = this._pools[name];
            }
            else {
                pool = new cc.NodePool();
                this._pools[name] = pool;
            }
            pool.put(node);
        };
        /**
         * @zh
         * 根据名称清空对象池
         *
         * @param name - 名称
         */
        NodePools.prototype.clearPool = function (name) {
            if (this._pools.hasOwnProperty(name)) {
                var pool = this._pools[name];
                pool.clear();
            }
        };
        /**
         * @zh
         * 清空所有对象池
         */
        NodePools.prototype.clearAllPools = function () {
            for (var _i = 0, _a = Object.keys(this._pools); _i < _a.length; _i++) {
                var name_3 = _a[_i];
                this.clearPool(name_3);
            }
        };
        return NodePools;
    }());
    ;
    /**
     * @zh
     * 节点池表对象
     */
    lcc.nodePools = new NodePools();
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
(function (lcc) {
    var TAG = "lcc/prefab/prefab-base.ts";
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    /**
     * @zh
     * 预制体基类
     */
    var PrefabBase = /** @class */ (function (_super) {
        __extends(PrefabBase, _super);
        function PrefabBase() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * @zh
             * 预制体名称
             */
            _this._prefabName = null;
            /**
             * @zh
             * 预制体根节点
             */
            _this._rootNode = null;
            return _this;
        }
        /**
         * @zh
         * 设置预制体名称
         *
         * @param wname - 预制体名称
         */
        PrefabBase.prototype._setPrefabName = function (pname) {
            this._prefabName = pname;
        };
        /**
         * @zh
         * 获得预制体名称
         */
        PrefabBase.prototype.getPrefabName = function () {
            return this._prefabName || this.node.name;
        };
        /**
         * @zh
         * 设置预制体根节点
         *
         * @param node - 根节点
         */
        PrefabBase.prototype._setRootNode = function (node) {
            this._rootNode = node;
        };
        /**
         * @zh
         * 获得预制体根节点
         */
        PrefabBase.prototype.getRootNode = function () {
            return this._rootNode;
        };
        PrefabBase = __decorate([
            ccclass("lcc.PrefabBase")
        ], PrefabBase);
        return PrefabBase;
    }(cc.Component));
    lcc.PrefabBase = PrefabBase;
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../utils/js.ts" />
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../utils/js.ts" />
(function (lcc) {
    var TAG = "lcc/prefab/prefab-bind.ts";
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property, menu = _a.menu;
    var PrefabBindConfig = /** @class */ (function () {
        function PrefabBindConfig() {
            this.node = null;
            this.prefab = "";
            this.advance = false;
            this.key = "";
            this.priority = 0;
            this.pool = false;
        }
        __decorate([
            property({
                type: cc.Node,
                tooltip: "绑定的节点"
            })
        ], PrefabBindConfig.prototype, "node", void 0);
        __decorate([
            property({
                tooltip: "绑定的预制体"
            })
        ], PrefabBindConfig.prototype, "prefab", void 0);
        __decorate([
            property({
                tooltip: "高级选项",
            })
        ], PrefabBindConfig.prototype, "advance", void 0);
        __decorate([
            property({
                tooltip: "重定义引用的键",
                visible: function () {
                    return this.advance;
                }
            })
        ], PrefabBindConfig.prototype, "key", void 0);
        __decorate([
            property({
                tooltip: "UI优先级",
                visible: function () {
                    return this.advance;
                }
            })
        ], PrefabBindConfig.prototype, "priority", void 0);
        __decorate([
            property({
                tooltip: "池中分配",
                visible: function () {
                    return this.advance;
                }
            })
        ], PrefabBindConfig.prototype, "pool", void 0);
        PrefabBindConfig = __decorate([
            ccclass("lcc.PrefabBindConfig")
        ], PrefabBindConfig);
        return PrefabBindConfig;
    }());
    /**
     * @zh
     * 预制体绑定
     */
    var PrefabBind = /** @class */ (function (_super) {
        __extends(PrefabBind, _super);
        function PrefabBind() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.prefabBinds = [];
            /**
             * @zh
             * 绑定配置表
             */
            _this._bindConfigs = null;
            /**
             * @zh
             * 预制体表
             */
            _this._prefabs = null;
            return _this;
        }
        /**
         * @zh
         * 扩展加载
         */
        PrefabBind.prototype.onLoad = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _i, _a, wd, name_4, prefab;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this._bindConfigs = lcc.js.createMap();
                            this._prefabs = lcc.js.createMap();
                            _i = 0, _a = this.prefabBinds;
                            _b.label = 1;
                        case 1:
                            if (!(_i < _a.length)) return [3 /*break*/, 4];
                            wd = _a[_i];
                            name_4 = wd.advance ? wd.key : wd.prefab;
                            this._bindConfigs[name_4] = wd;
                            return [4 /*yield*/, lcc.prefabMgr.createPrefab(wd.prefab, wd.advance ? wd.pool : null)];
                        case 2:
                            prefab = _b.sent();
                            if (prefab) {
                                prefab.node.parent = wd.node;
                                this._prefabs[name_4] = prefab;
                                if (wd.advance) {
                                    prefab.node.zIndex = wd.priority;
                                }
                            }
                            _b.label = 3;
                        case 3:
                            _i++;
                            return [3 /*break*/, 1];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 扩展销毁
         */
        PrefabBind.prototype.onDestroy = function () {
            for (var name_5 in this._prefabs) {
                var prefab = this._prefabs[name_5];
                var config = this._bindConfigs[name_5];
                lcc.prefabMgr.releasePrefab(prefab, config.pool);
            }
            this._prefabs = null;
            this._bindConfigs = null;
        };
        /**
         * @zh
         * 获得预制体
         *
         * @param key - 键
         */
        PrefabBind.prototype.getPrefab = function (key) {
            return this._prefabs[key];
        };
        __decorate([
            property({
                type: [PrefabBindConfig],
                tooltip: "预制体绑定配置"
            })
        ], PrefabBind.prototype, "prefabBinds", void 0);
        PrefabBind = __decorate([
            ccclass("lcc.PrefabBind"),
            menu("i18n:lcc-framework.menu-extension/PrefabBind")
        ], PrefabBind);
        return PrefabBind;
    }(cc.Component));
    lcc.PrefabBind = PrefabBind;
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../base/state.ts" />
/// <reference path="../utils/js.ts" />
/// <reference path="./node-pools.ts" />
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../base/state.ts" />
/// <reference path="../utils/js.ts" />
/// <reference path="./node-pools.ts" />
(function (lcc) {
    var TAG = "lcc/prefab/prefab-manager.ts";
    /**
     * @zh
     * 索引路径
     */
    var INDEXPATH;
    (function (INDEXPATH) {
        /**
         * @zh
         * 预制体
         */
        INDEXPATH.PREFAB = "prefab";
    })(INDEXPATH = lcc.INDEXPATH || (lcc.INDEXPATH = {}));
    ;
    /**
     * @zh
     * 预制体实例
     */
    var PREFAB_INSTANCE = "lcc_Prefab";
    /**
     * @zh
     * 预制体管理器
     */
    var PrefabManager = /** @class */ (function () {
        /**
         * @zh
         * 构造函数
         */
        function PrefabManager() {
            var _this = this;
            /**
             * @zh
             * 预制体配置表
             */
            this._prefabConfigs = lcc.js.createMap();
            /**
             * @zh
             * 预制体实例，用于在预制体上挂配置
             */
            this._prefabInstances = lcc.js.createMap();
            /**
             * @zh
             * 预制体实例节点
             */
            this._instanceRoot = null;
            lcc.state.on('initialize', function () {
                lcc.doing.stateInitialize.in(function () {
                    _this._prefabConfigs = lcc.js.createMap();
                    _this._prefabInstances = lcc.js.createMap();
                    _this._instanceRoot = null;
                    lcc.indexMgr.on("indexes_removed", _this.onIndexesRemoved, _this);
                });
            });
            lcc.state.on('release', function () {
                lcc.doing.stateRelease.in(function () {
                    lcc.indexMgr.targetOff(_this);
                });
            });
        }
        /**
         * @zh
         * 当移除索引
         *
         * @internal
         */
        PrefabManager.prototype.onIndexesRemoved = function () {
            this.releaseInvalidPrefabConfigs();
        };
        /**
         * @zh
         * 释放无效预制体
         */
        PrefabManager.prototype.releaseInvalidPrefabConfigs = function () {
            var prefabfiles = lcc.indexMgr.getIndex(INDEXPATH.PREFAB) || lcc.js.createMap();
            for (var _i = 0, _a = Object.keys(this._prefabConfigs); _i < _a.length; _i++) {
                var pname = _a[_i];
                if (!prefabfiles[pname]) {
                    this.releasePrefabConfig(pname);
                }
            }
        };
        /**
         * @zh
         * 释放预制体
         *
         * @param pname - 预制体名称
         * @param preload - 预加载也释放
         */
        PrefabManager.prototype.releasePrefabConfig = function (pname, preload) {
            if (preload === void 0) { preload = false; }
            var prefabconf = this._prefabConfigs[pname];
            if (prefabconf && (!prefabconf.preload || preload)) {
                prefabconf.prefab.decRef();
                delete this._prefabConfigs[pname];
                lcc.nodePools.clearPool(pname);
            }
        };
        /**
         * @zh
         * 释放预制体数组
         *
         * @param pnames - 预制体数组
         * @param preload - 预加载也释放
         */
        PrefabManager.prototype.releasePrefabConfigs = function (pnames, preload) {
            if (preload === void 0) { preload = false; }
            for (var _i = 0, pnames_1 = pnames; _i < pnames_1.length; _i++) {
                var pname = pnames_1[_i];
                this.releasePrefabConfig(pname, preload);
            }
        };
        /**
         * @zh
         * 预加载预制体
         *
         * @param pname - 预制体名称
         */
        PrefabManager.prototype.preloadPrefabConfig = function (pname) {
            return __awaiter(this, void 0, void 0, function () {
                var prefabconf;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getPrefabConfig(pname)];
                        case 1:
                            prefabconf = _a.sent();
                            if (prefabconf) {
                                prefabconf.preload = true;
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 预加载预制体数组
         *
         * @param pnames - 预制体数组
         * @param progress - 进度
         */
        PrefabManager.prototype.preloadPrefabConfigs = function (pnames, progress) {
            if (progress === void 0) { progress = function (p) { }; }
            return __awaiter(this, void 0, void 0, function () {
                var i, len;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            i = 0, len = pnames.length;
                            _a.label = 1;
                        case 1:
                            if (!(i < len)) return [3 /*break*/, 4];
                            return [4 /*yield*/, this.preloadPrefabConfig(pnames[i])];
                        case 2:
                            _a.sent();
                            progress((i + 1) / len);
                            _a.label = 3;
                        case 3:
                            i++;
                            return [3 /*break*/, 1];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 获得预制体配置
         *
         * @param pname 预制体名称
         */
        PrefabManager.prototype.getPrefabConfig = function (pname) {
            return __awaiter(this, void 0, void 0, function () {
                var prefabConf, config, prefab;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            prefabConf = this._prefabConfigs[pname];
                            if (!!prefabConf) return [3 /*break*/, 2];
                            config = lcc.indexMgr.getIndex(INDEXPATH.PREFAB + "/" + pname);
                            if (!config) return [3 /*break*/, 2];
                            return [4 /*yield*/, lcc.packMgr.loadPrefab(config.file)];
                        case 1:
                            prefab = _a.sent();
                            prefabConf = {
                                prefab: prefab,
                                config: config,
                            };
                            prefab.addRef();
                            this._prefabConfigs[pname] = prefabConf;
                            _a.label = 2;
                        case 2: return [2 /*return*/, prefabConf];
                    }
                });
            });
        };
        /**
         * @zh
         * 创建预制体
         *
         * @param pname - 预制体名称
         * @param pool - 在池中创建
         */
        PrefabManager.prototype.createPrefab = function (pname, pool) {
            return __awaiter(this, void 0, void 0, function () {
                var prefabconf, node, prefab;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getPrefabConfig(pname)];
                        case 1:
                            prefabconf = _a.sent();
                            if (prefabconf) {
                                if (pool == null) {
                                    pool = prefabconf.config.pool;
                                }
                                node = null;
                                if (pool) {
                                    node = lcc.nodePools.getNode(prefabconf.prefab, pname);
                                }
                                else {
                                    node = cc.instantiate(prefabconf.prefab);
                                }
                                prefab = node.getComponent(lcc.PrefabBase) || node.getComponentInChildren(lcc.PrefabBase);
                                if (!prefab) {
                                    prefab = node.addComponent(lcc.PrefabBase);
                                }
                                prefab._setRootNode(node);
                                prefab._setPrefabName(pname);
                                return [2 /*return*/, prefab];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 释放预制体到池中
         *
         * @param prefab - 预制体对象
         * @param pool - 在池中创建
         */
        PrefabManager.prototype.releasePrefab = function (prefab, pool) {
            var pname = prefab.getPrefabName();
            if (pool == null) {
                var prefabconf = this._prefabConfigs[pname];
                if (prefabconf) {
                    pool = prefabconf.config.pool;
                }
            }
            if (pool) {
                lcc.nodePools.putNode(prefab.getRootNode(), pname);
            }
            else {
                prefab.getRootNode().destroy();
            }
        };
        /**
         * @zh
         * 获得预制体实例，一般用于获得在预制体上放的配置
         *
         * @param pname - 预制体名称
         */
        PrefabManager.prototype.getPrefabInstance = function (pname) {
            return __awaiter(this, void 0, void 0, function () {
                var prefab;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            prefab = this._prefabInstances[pname];
                            if (!!prefab) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.createPrefab(pname)];
                        case 1:
                            prefab = _a.sent();
                            if (!this._instanceRoot) {
                                this._instanceRoot = new cc.Node(PREFAB_INSTANCE);
                                cc.director.getScene().addChild(this._instanceRoot);
                                cc.game.addPersistRootNode(this._instanceRoot);
                            }
                            prefab.getRootNode().parent = this._instanceRoot;
                            this._prefabInstances[pname] = prefab;
                            _a.label = 2;
                        case 2: return [2 /*return*/, prefab];
                    }
                });
            });
        };
        /**
         * @zh
         * 释放预制体实例，一般用于释放在预制体上放的配置
         *
         * @param pname - 预制体名称
         */
        PrefabManager.prototype.releasePrefabInstance = function (pname) {
            var prefab = this._prefabInstances[pname];
            if (prefab) {
                this.releasePrefab(prefab);
                delete this._prefabInstances[pname];
            }
        };
        return PrefabManager;
    }());
    ;
    /**
     * @zh
     * 预制体管理器对象
     */
    lcc.prefabMgr = new PrefabManager();
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
(function (lcc) {
    var TAG = "lcc/pack/pack-loader.ts";
    /**
     * @zh
     * 包加载器基类
     */
    var PackLoader = /** @class */ (function () {
        /**
         * @zh
         * 构造包加载器
         *
         * @param name - 包的名称
         * @param bundle - 资源包对象
         */
        function PackLoader(name, bundle) {
            /**
             * @zh
             * 包的名称
             */
            this._name = null;
            /**
             * @zh
             * 资源包对象
             */
            this._bundle = null;
            this._name = name;
            this._bundle = bundle;
        }
        /**
         * @zh
         * 获得包名称
         */
        PackLoader.prototype.getName = function () {
            return this._name;
        };
        /**
         * @zh
         * 获得包资源
         */
        PackLoader.prototype.getBundle = function () {
            return this._bundle;
        };
        /**
         * @zh
         * 加载操作
         */
        PackLoader.prototype.onLoad = function () {
            return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {
                return [2 /*return*/];
            }); });
        };
        /**
         * @zh
         * 销毁操作
         */
        PackLoader.prototype.onDestroy = function () {
            return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {
                return [2 /*return*/];
            }); });
        };
        /**
         * @zh
         * 加载json文件
         *
         * @param jpPath - json文件包路径
         */
        PackLoader.prototype.loadJson = function (jpPath) {
            return lcc.asset.loadJson(jpPath, this._bundle);
        };
        /**
         * @zh
         * 加载音频
         *
         * @param apPath - 音频文件包路径
         */
        PackLoader.prototype.loadAudio = function (apPath) {
            return lcc.asset.loadAudio(apPath, this._bundle);
        };
        /**
         * @zh
         * 加载预制件
         *
         * @param ppPath 预制件包路径
         */
        PackLoader.prototype.loadPrefab = function (ppPath) {
            return lcc.asset.loadPrefab(ppPath, this._bundle);
        };
        /**
         * @zh
         * 加载精灵帧
         *
         * @param sfpPath 精灵帧包路径
         */
        PackLoader.prototype.loadSpriteFrame = function (sfpPath) {
            return lcc.asset.loadSpriteFrame(sfpPath, this._bundle);
        };
        /**
         * @zh
         * 加载ttf字体
         *
         * @param ttfpPath - 字体ttf文件包路径
         */
        PackLoader.prototype.loadTTFFont = function (ttfpPath) {
            return lcc.asset.loadTTFFont(ttfpPath, this._bundle);
        };
        /**
         * @zh
         * 获得资源的url
         *
         * @param apPath 资源文件包路径
         */
        PackLoader.prototype.getAssetUrl = function (apPath) {
            return lcc.asset.getAssetUrl(apPath, this._bundle);
        };
        return PackLoader;
    }());
    lcc.PackLoader = PackLoader;
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
(function (lcc) {
    var TAG = "lcc/scene/scene-base.ts";
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    /**
     * @zh
     * 场景基类
     */
    var SceneBase = /** @class */ (function (_super) {
        __extends(SceneBase, _super);
        function SceneBase() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * @zh
             * 捕捉按键
             */
            _this.catchKeys = false;
            /**
             * @zh
             * 场景名称
             */
            _this._sceneName = null;
            return _this;
        }
        /**
         * @zh
         * 安装场景
         */
        SceneBase.prototype.onLoad = function () {
            if (this.catchKeys) {
                cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.OnCatchKeyEvent, this);
            }
        };
        /**
         * @zh
         * 场景销毁
         */
        SceneBase.prototype.onDestroy = function () {
            if (this.catchKeys) {
                cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.OnCatchKeyEvent, this);
            }
        };
        /**
         * @zh
         * 当场景场景加载<br/>
         * 子类需要可以重写这个函数
         *
         * @param sceneArgs - 参数
         */
        SceneBase.prototype.onSceneLoad = function () {
            var sceneArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                sceneArgs[_i] = arguments[_i];
            }
        };
        /**
         * @zh
         * 设置场景名称
         *
         * @param scenename - 设置场景名
         */
        SceneBase.prototype._setSceneName = function (scenename) {
            this._sceneName = scenename;
        };
        /**
         * @zh
         * 获得场景名称
         */
        SceneBase.prototype.getSceneName = function () {
            if (!this._sceneName) {
                this._sceneName = cc.director.getScene().name;
            }
            return this._sceneName;
        };
        /**
         * @zh
         * 当捕捉到键盘事件
         *
         * @param event - 按键值
         */
        SceneBase.prototype.OnCatchKeyEvent = function (event) {
            if (!lcc.uiMgr.onKeyPressed(event.keyCode)) {
                this.onKeyPressed(event.keyCode);
            }
        };
        /**
         * @zh
         * 制作场景快照<br/>
         * 如果场景可以保存数据，可以重写这个函数
         */
        SceneBase.prototype.makeSnapshot = function () {
            return {
                sceneName: this.getSceneName(),
                sceneArgs: []
            };
        };
        /**
         * @zh
         * 当按键按下
         */
        SceneBase.prototype.onKeyPressed = function (keyCode) { return false; };
        __decorate([
            property({
                tooltip: "启动按键捕捉"
            })
        ], SceneBase.prototype, "catchKeys", void 0);
        SceneBase = __decorate([
            ccclass("lcc.SceneBase")
        ], SceneBase);
        return SceneBase;
    }(cc.Component));
    lcc.SceneBase = SceneBase;
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../base/state.ts" />
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../base/state.ts" />
(function (lcc) {
    var TAG = "lcc/scene/scene-manager.ts";
    /**
     * @zh
     * 场景管理器
     */
    var SceneManager = /** @class */ (function () {
        /**
         * @zh
         * 构造函数
         */
        function SceneManager() {
            var _this = this;
            /**
             * @zh
             * 场景栈
             */
            this._sceneStack = [];
            /**
             * @zh
             * 当前场景
             */
            this._currentScene = null;
            lcc.state.on('initialize', function () {
                lcc.doing.stateInitialize.in(function () {
                    _this._sceneStack = [];
                    _this._currentScene = null;
                });
            });
        }
        /**
         * @zh
         * 检查当前场景<br/>
         * 搜索场景的[[SceneBase]]脚本组件，如果不存在就会在第一个子节点上挂载一个新的
         */
        SceneManager.prototype.checkCurrentScene = function () {
            if (!this._currentScene) {
                var snode = cc.director.getScene();
                var scene = snode.getComponentInChildren(lcc.SceneBase);
                if (!scene) {
                    var node = (snode.children[0]);
                    if (node) {
                        scene = node.addComponent(lcc.SceneBase);
                    }
                    else {
                        cc.error(TAG, "scene must have nodes");
                    }
                }
                scene._setSceneName(snode.name);
                this._currentScene = scene;
            }
        };
        /**
         * @zh
         * 获得当前场景
         */
        SceneManager.prototype.getCurrentScene = function () {
            this.checkCurrentScene();
            return this._currentScene;
        };
        /**
         * @zh
         * 切换场景
         *
         * @param sname - 场景名
         * @param sargs - 快照参数
         */
        SceneManager.prototype._switchScene = function (sname) {
            var sargs = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                sargs[_i - 1] = arguments[_i];
            }
            var self = this;
            lcc.uiMgr.closeAllUI();
            cc.director.loadScene(sname, function (err, snode) {
                if (!err && snode) {
                    var scene = snode.getComponentInChildren(lcc.SceneBase);
                    if (!scene) {
                        var node = (snode.children[0]);
                        if (node) {
                            scene = node.addComponent(lcc.SceneBase);
                        }
                        else {
                            cc.error(TAG, "scene must have nodes");
                        }
                    }
                    scene._setSceneName(snode.name);
                    self._currentScene = scene;
                    scene.onSceneLoad.apply(scene, sargs);
                }
                else {
                    cc.error(TAG, "scene " + sname + " switch failure");
                }
            });
        };
        /**
         * @zh
         * 切换场景
         *
         * @param sname - 场景名
         * @param sargs - 快照参数
         */
        SceneManager.prototype.switchScene = function (sname) {
            var sargs = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                sargs[_i - 1] = arguments[_i];
            }
            this._sceneStack = [];
            this._switchScene.apply(this, __spreadArray([sname], sargs));
        };
        /**
         * @zh
         * 制作当前场景的快照
         */
        SceneManager.prototype.makeSnapshot = function () {
            var curscene = this.getCurrentScene();
            if (curscene) {
                return curscene.makeSnapshot();
            }
        };
        /**
         * @zh
         * 恢复场景快照
         *
         * @param snapshot - 场景快照
         */
        SceneManager.prototype.resumeSnapshot = function (snapshot) {
            if (snapshot) {
                this._switchScene(snapshot.sceneName, snapshot.sceneArgs);
            }
        };
        /**
         * @zh
         * 压入场景到栈
         *
         * @param sname - 场景名
         * @param sargs - 快照参数
         */
        SceneManager.prototype.pushScene = function (sname) {
            var sargs = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                sargs[_i - 1] = arguments[_i];
            }
            var curscene = this.getCurrentScene();
            if (curscene) {
                this._sceneStack.push(curscene.makeSnapshot());
            }
            this._switchScene.apply(this, __spreadArray([sname], sargs));
        };
        /**
         * @zh
         * 弹出栈中的场景
         */
        SceneManager.prototype.popScene = function () {
            var scenep = this._sceneStack.pop();
            if (scenep) {
                this._switchScene(scenep.sceneName, scenep.sceneArgs);
            }
        };
        /**
         * @zh
         * 获得场景栈
         */
        SceneManager.prototype.getSceneStack = function () {
            return this._sceneStack;
        };
        return SceneManager;
    }());
    ;
    /**
     * @zh
     * 场景管理器对象
     */
    lcc.sceneMgr = new SceneManager();
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../base/state.ts" />
/// <reference path="../base/doing.ts" />
/// <reference path="../utils/js.ts" />
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../base/state.ts" />
/// <reference path="../base/doing.ts" />
/// <reference path="../utils/js.ts" />
(function (lcc) {
    var TAG = "lcc/table/table-manager.ts";
    /**
     * @zh
     * 索引路径
     */
    var INDEXPATH;
    (function (INDEXPATH) {
        /**
         * @zh
         * 数据表
         */
        INDEXPATH.TABLE = "table";
    })(INDEXPATH = lcc.INDEXPATH || (lcc.INDEXPATH = {}));
    ;
    /**
     * @zh
     * 自动加载数据表<br/>
     * 如果为true，那么会在加载游戏包的时候加载所有数据表。
     */
    lcc.LOADTABLE_AUTO = true;
    /**
     * @zh
     * 数据表对象映射表<br/>
     */
    lcc.TABLES = lcc.js.createMap();
    /**
     * @zh
     * 数据表管理器<br/>
     * 主要用于管理游戏数据表，这些表一般由策划配置<br/>
     * 数据表的合并功能
     */
    var TableManager = /** @class */ (function () {
        /**
         * @zh
         * 构造函数
         */
        function TableManager() {
            var _this = this;
            /**
             * @zh
             * 数据表加载映射表
             */
            this._loadMap = lcc.js.createMap();
            lcc.state.on('initialize', function () {
                lcc.doing.stateInitialize.in(function () {
                    _this._loadMap = lcc.js.createMap();
                    lcc.indexMgr.on("indexes_removed", _this.onIndexesRemoved, _this);
                    lcc.indexMgr.on("indexes_loaded_" + INDEXPATH.TABLE, _this.onIndexesLoaded, _this);
                });
            });
            lcc.state.on('release', function () {
                lcc.doing.stateRelease.in(function () {
                    lcc.indexMgr.targetOff(_this);
                    for (var _i = 0, _a = Object.keys(lcc.TABLES); _i < _a.length; _i++) {
                        var tname = _a[_i];
                        delete lcc.TABLES[tname];
                    }
                });
            });
        }
        /**
         * @zh
         * 当移除索引
         *
         * @internal
         */
        TableManager.prototype.onIndexesRemoved = function () {
            lcc.doing.indexLoad.addCount();
            for (var _i = 0, _a = Object.keys(lcc.TABLES); _i < _a.length; _i++) {
                var tname = _a[_i];
                delete lcc.TABLES[tname];
            }
            this.onIndexesLoaded(lcc.indexMgr.getIndex(INDEXPATH.TABLE));
            lcc.doing.indexLoad.decCount();
        };
        /**
         * @zh
         * 当加载索引
         *
         * @param ivalue 索引对象
         *
         * @internal
         */
        TableManager.prototype.onIndexesLoaded = function (ivalue) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, _b, _i, tname, tfiles, _c, tfiles_2, tfile;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            lcc.doing.indexLoad.addCount();
                            if (!ivalue) return [3 /*break*/, 7];
                            _a = [];
                            for (_b in ivalue)
                                _a.push(_b);
                            _i = 0;
                            _d.label = 1;
                        case 1:
                            if (!(_i < _a.length)) return [3 /*break*/, 7];
                            tname = _a[_i];
                            if (!(lcc.LOADTABLE_AUTO || this._loadMap[tname])) return [3 /*break*/, 6];
                            this._loadMap[tname] = true;
                            tfiles = ivalue[tname];
                            _c = 0, tfiles_2 = tfiles;
                            _d.label = 2;
                        case 2:
                            if (!(_c < tfiles_2.length)) return [3 /*break*/, 5];
                            tfile = tfiles_2[_c];
                            return [4 /*yield*/, this.loadTableFile(tfile)];
                        case 3:
                            _d.sent();
                            _d.label = 4;
                        case 4:
                            _c++;
                            return [3 /*break*/, 2];
                        case 5:
                            this.sortListTable(tname);
                            _d.label = 6;
                        case 6:
                            _i++;
                            return [3 /*break*/, 1];
                        case 7:
                            lcc.doing.indexLoad.decCount();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 加载数据表
         *
         * @param tgPath - 数据表文件全局路径
         */
        TableManager.prototype.loadTableFile = function (tgPath) {
            return __awaiter(this, void 0, void 0, function () {
                var table;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, lcc.packMgr.loadJson(tgPath)];
                        case 1:
                            table = _a.sent();
                            if (!table) {
                                cc.error(TAG, "database file " + tgPath + " read fail !!!");
                            }
                            else {
                                lcc.js.mergeMap(lcc.TABLES, table, { tag: TAG, source: tgPath });
                                lcc.DEBUG.TABLE && cc.log(TAG, "load table " + JSON.stringify(table) + " from " + tgPath);
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 索引具体值
         *
         * @param map - 索引对象
         * @param index - 索引
         */
        TableManager.prototype.indexValue = function (map, index) {
            if (typeof index == 'string') {
                return lcc.js.getMapValue(map, index, '.');
            }
            else {
                return map[index];
            }
        };
        /**
         * @zh
         * 排序列表类型数据表
         *
         * @param tname 数据表名称
         */
        TableManager.prototype.sortListTable = function (tname) {
            var _this = this;
            var sortMap = lcc.TABLES['#listSort'];
            if (sortMap) {
                var table = lcc.TABLES[tname];
                var sortInfo_1 = sortMap[tname];
                if (table && sortInfo_1) {
                    if (sortInfo_1.key != null) {
                        if (sortInfo_1.sort == 'up') {
                            table.sort(function (a, b) { return _this.indexValue(a, sortInfo_1.key) - _this.indexValue(b, sortInfo_1.key); });
                        }
                        else {
                            table.sort(function (a, b) { return _this.indexValue(b, sortInfo_1.key) - _this.indexValue(a, sortInfo_1.key); });
                        }
                    }
                    else {
                        if (sortInfo_1.sort == 'up') {
                            table.sort(function (a, b) { return a - b; });
                        }
                        else {
                            table.sort(function (a, b) { return b - a; });
                        }
                    }
                }
            }
        };
        /**
         * @zh
         * 获得所有表
         */
        TableManager.prototype.getTables = function () {
            return lcc.TABLES;
        };
        /**
         * @zh
         * 获得指定表<br/>
         * 在[[LOADTABLE_AUTO]]为false时。如果表未加载，会优先加载指定表。
         *
         * @param tname - 数据表名称
         */
        TableManager.prototype.getTable = function (tname) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.loadTable(tname)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, lcc.TABLES[tname]];
                    }
                });
            });
        };
        /**
         * @zh
         * 手动加载数据表<br/>
         * 只在[[LOADTABLE_AUTO]]为false下有效
         *
         * @param tnames - 数据表名称数组
         */
        TableManager.prototype.loadTable = function () {
            var tnames = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                tnames[_i] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                var _a, tnames_1, tname, tfiles, _b, tfiles_3, tfile;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!!lcc.LOADTABLE_AUTO) return [3 /*break*/, 7];
                            _a = 0, tnames_1 = tnames;
                            _c.label = 1;
                        case 1:
                            if (!(_a < tnames_1.length)) return [3 /*break*/, 7];
                            tname = tnames_1[_a];
                            if (!!this._loadMap[tname]) return [3 /*break*/, 6];
                            this._loadMap[tname] = true;
                            tfiles = lcc.indexMgr.getIndex(INDEXPATH.TABLE + "/" + tname);
                            if (!tfiles) return [3 /*break*/, 6];
                            _b = 0, tfiles_3 = tfiles;
                            _c.label = 2;
                        case 2:
                            if (!(_b < tfiles_3.length)) return [3 /*break*/, 5];
                            tfile = tfiles_3[_b];
                            return [4 /*yield*/, this.loadTableFile(tfile)];
                        case 3:
                            _c.sent();
                            _c.label = 4;
                        case 4:
                            _b++;
                            return [3 /*break*/, 2];
                        case 5:
                            this.sortListTable(tname);
                            _c.label = 6;
                        case 6:
                            _a++;
                            return [3 /*break*/, 1];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 手动移除数据表<br/>
         * 只在[[LOADTABLE_AUTO]]为false下有效
         *
         * @param tnames - 数据表名称数组
         */
        TableManager.prototype.removeTable = function () {
            var tnames = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                tnames[_i] = arguments[_i];
            }
            if (!lcc.LOADTABLE_AUTO) {
                for (var _a = 0, tnames_2 = tnames; _a < tnames_2.length; _a++) {
                    var tname = tnames_2[_a];
                    delete lcc.TABLES[tname];
                    delete this._loadMap[tname];
                }
            }
        };
        /**
         * @zh
         * 手动移除移除所有数据表<br/>
         * 只在[[LOADTABLE_AUTO]]为false下有效
         */
        TableManager.prototype.removeAllTables = function () {
            if (!lcc.LOADTABLE_AUTO) {
                this.removeTable.apply(this, Object.keys(lcc.TABLES));
            }
        };
        return TableManager;
    }());
    ;
    /**
     * @zh
     * 数据表管理对象
     */
    lcc.tableMgr = new TableManager();
    lcc.variable.set('TABLE', function (path) {
        return lcc.js.getMapValue(lcc.TABLES, path);
    });
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../base/state.ts" />
/// <reference path="../utils/js.ts" />
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../base/state.ts" />
/// <reference path="../utils/js.ts" />
(function (lcc) {
    var TAG = "lcc/timer/timer-manager.ts";
    /**
     * @zh
     * 默认定时器组
     */
    lcc.DEFAULT_TIMER_GROUP = "default";
    /**
    /**
     * @zh
     * 定时器时间片，秒
     */
    lcc.TIMER_TIMESLICE = 1;
    /**
     * @zh
     * 定时器管理器<br/>
     * 主要用于程序中所有定时器的添加、触发和移除
     */
    var TimerManager = /** @class */ (function () {
        /**
         * @zh
         * 构造函数
         */
        function TimerManager() {
            var _this = this;
            /**
             * @zh
             * 定时器实体
             */
            this._entity = null;
            /**
             * @zh
             * 任务映射表
             */
            this._taskMap = lcc.js.createMap();
            /**
             * @zh
             * 任务索引<br>
             * 如果任务没有指定`key`，就会自动分配索引
             */
            this._taskIndex = 0;
            lcc.state.on('initialize', function () {
                lcc.doing.stateInitialize.in(function () {
                    _this._entity = null;
                    _this._taskMap = lcc.js.createMap();
                    _this._taskIndex = 0;
                });
            });
            lcc.state.on('release', function () {
                lcc.doing.stateRelease.in(function () {
                    _this.removeAllTimers();
                });
            });
        }
        /**
         * @zh
         * 安装定时器实体
         */
        TimerManager.prototype.setupTimerEntity = function () {
            if (!this._entity && !lcc.js.isEmptyMap(this._taskMap)) {
                this._entity = setInterval(this.onTimeUpdate.bind(this), lcc.TIMER_TIMESLICE * 1000);
                lcc.DEBUG.TIMER && cc.log(TAG, "setupTimerEntity " + lcc.TIMER_TIMESLICE * 1000);
            }
        };
        /**
         * @zh
         * 删除定时器实体
         */
        TimerManager.prototype.deleteTimerEntity = function () {
            if (this._entity && lcc.js.isEmptyMap(this._taskMap)) {
                clearInterval(this._entity);
                this._entity = null;
                lcc.DEBUG.TIMER && cc.log(TAG, "deleteTimerEntity");
            }
        };
        /**
         * @zh
         * 时间更新函数
         */
        TimerManager.prototype.onTimeUpdate = function () {
            var change = false;
            for (var _i = 0, _a = Object.keys(this._taskMap); _i < _a.length; _i++) {
                var group = _a[_i];
                var tasks = this._taskMap[group];
                if (tasks) {
                    for (var _b = 0, _c = Object.keys(tasks); _b < _c.length; _b++) {
                        var key = _c[_b];
                        var task = tasks[key];
                        if (task) {
                            task.remainTime -= lcc.TIMER_TIMESLICE;
                            if (task.remainTime <= 0) {
                                if (task.loop) {
                                    task.remainTime = task.totalTime;
                                }
                                else {
                                    delete tasks[key];
                                    if (lcc.js.isEmptyMap(tasks)) {
                                        delete this._taskMap[group];
                                        change = true;
                                    }
                                }
                                try {
                                    task.handle(task.totalTime);
                                }
                                catch (e) {
                                    lcc.logMgr.error(TAG, "onTimeUpdate '" + group + "-" + key + "' " + e);
                                }
                            }
                        }
                    }
                }
            }
            if (change) {
                this.deleteTimerEntity();
            }
        };
        /**
         * @zh
         * 添加定时器
         *
         * @param time - 回调的时间
         * @param handle - 回调函数
         * @param key - 可选，定时器键或者定时器选项
         */
        TimerManager.prototype.addTimer = function (time, handle, key) {
            if (key === void 0) { key = {}; }
            var option;
            if (typeof key == 'string') {
                option = { key: key };
            }
            else {
                option = key;
            }
            lcc.DEBUG.TIMER && cc.log(TAG, "addTimer " + time + " " + JSON.stringify(option));
            var group = option.group || lcc.DEFAULT_TIMER_GROUP;
            var tasks = this._taskMap[group];
            if (!tasks) {
                tasks = lcc.js.createMap();
                this._taskMap[group] = tasks;
            }
            var timerKey = option.key || (this._taskIndex++).toString();
            tasks[timerKey] = {
                remainTime: time,
                handle: handle,
                loop: option.loop,
                totalTime: time,
            };
            this.setupTimerEntity();
            return timerKey;
        };
        /**
         * @zh
         * 移除定时器<br/>
         * 如果选项不传入`key`，那么会移除整个定时器分组上的所有定时器
         *
         * @param key - 定时器键或者定时器选项，如果使用选项则必须存在group，否则不生效
         */
        TimerManager.prototype.removeTimer = function (key) {
            var option;
            if (typeof key == 'string') {
                option = { key: key, group: lcc.DEFAULT_TIMER_GROUP };
            }
            else {
                option = key;
            }
            lcc.DEBUG.TIMER && cc.log(TAG, "removeTimer " + JSON.stringify(option));
            if (option.group) {
                var timerKey = option.key;
                var remainTime = 0;
                var tasks = this._taskMap[option.group];
                if (tasks) {
                    if (timerKey) {
                        var task = tasks[timerKey];
                        if (task) {
                            delete tasks[timerKey];
                            if (lcc.js.isEmptyMap(tasks)) {
                                delete this._taskMap[option.group];
                            }
                            remainTime = task.remainTime;
                        }
                        lcc.DEBUG.TIMER && cc.log(TAG, "removeTimer " + JSON.stringify(option) + " success");
                    }
                    else {
                        delete this._taskMap[option.group];
                        lcc.DEBUG.TIMER && cc.log(TAG, "removeTimer Group " + JSON.stringify(option) + " success");
                    }
                }
                this.deleteTimerEntity();
                return remainTime;
            }
        };
        /**
         * 移除定时器
         */
        TimerManager.prototype.removeAllTimers = function () {
            for (var _i = 0, _a = Object.keys(this._taskMap); _i < _a.length; _i++) {
                var group = _a[_i];
                this.removeTimer({ group: group });
            }
        };
        /**
         * @zh
         * 睡眠指定秒数
         *
         * @param seconds - 秒数
         */
        TimerManager.prototype.sleep = function (seconds) {
            var _this = this;
            return new Promise(function (resolve) {
                _this.addTimer(seconds, resolve, { group: 'lcc.TimerManager.sleep' });
            });
        };
        return TimerManager;
    }());
    /**
     * @zh
     * 定时器管理器对象
     */
    lcc.timerMgr = new TimerManager();
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
(function (lcc) {
    var TAG = "lcc/ui/ui-base.ts";
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    /**
     * @zh
     * UI基类
     */
    var UIBase = /** @class */ (function (_super) {
        __extends(UIBase, _super);
        function UIBase() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * @zh
             * 根节点
             */
            _this._rootNode = null;
            /**
             * @zh
             * UI动画对象
             */
            _this._uiAnimation = null;
            /**
             * @zh
             * UI名称
             */
            _this._uiName = null;
            /**
             * @zh
             * 固定优先级
             */
            _this._fixedPriority = null;
            /**
             * @zh
             * 画布对象
             */
            _this._canvas = null;
            return _this;
        }
        /**
         * @zh
         * 设置根节点
         *
         * @param node - 节点对象
         */
        UIBase.prototype._setRootNode = function (node) {
            this._rootNode = node;
        };
        /**
         * @zh
         * 设置是否激活
         *
         * @param active - 是否激活
         */
        UIBase.prototype.setActive = function (active) {
            this._rootNode.active = active;
        };
        /**
         * @zh
         * 设置UI名称
         *
         * @param uiname - UI名称
         */
        UIBase.prototype._setUIName = function (uiname) {
            this._uiName = uiname;
        };
        /**
         * @zh
         * 获得UI名称
         */
        UIBase.prototype.getUIName = function () {
            return this._uiName;
        };
        /**
         * @zh
         * 设置固定优先级
         *
         * @param priority - 优先级
         */
        UIBase.prototype.setFixedPriority = function (priority) {
            this._fixedPriority = priority;
        };
        /**
         * @zh
         * 获得固定优先级
         */
        UIBase.prototype.getFixedPriority = function () {
            return this._fixedPriority;
        };
        /**
         * @zh
         * 设置画布对象
         *
         * @param canvas - 画布对象
         */
        UIBase.prototype._setCanvas = function (canvas) {
            this._canvas = canvas;
        };
        /**
         * @zh
         * 获得画布对象
         */
        UIBase.prototype.getCanvas = function () {
            return this._canvas;
        };
        /**
         * @zh
         * 关闭当前UI
         */
        UIBase.prototype.closeSelf = function (release) {
            if (release === void 0) { release = false; }
            return lcc.uiMgr.closeUI(this.getUIName(), release);
        };
        /**
         * @zh
         * UI创建，内部使用
         */
        UIBase.prototype._onUICreate = function () {
            this._uiAnimation = this.getComponent('lcc.UIAnimation');
            this.onUICreate();
        };
        /**
         * @zh
         * 播放UI动画
         *
         * @param aType 动画类型
         */
        UIBase.prototype.playUIAnimation = function (aType) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this._uiAnimation) return [3 /*break*/, 2];
                            return [4 /*yield*/, this._uiAnimation.play(aType)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * UI创建回调，子类中可以重写这个函数
         */
        UIBase.prototype.onUICreate = function () { };
        /**
         * @zh
         * UI打开回调，子类中可以重写这个函数
         *
         * @param args - 打开参数
         */
        UIBase.prototype.onOpen = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
        };
        /**
         * @zh
         * UI关闭回调，子类中可以重写这个函数
         */
        UIBase.prototype.onClose = function () { };
        /**
         * @zh
         * UI释放回调，子类中可以重写这个函数
         */
        UIBase.prototype.onUIRelease = function () { };
        /**
         * @zh
         * 当改变当前UI最前面，子类中可以重写这个函数
         */
        UIBase.prototype.onChangeFront = function (front) { };
        /**
         * @zh
         * 当按键按下，子类中可以重写这个函数
         */
        UIBase.prototype.onKeyPressed = function (keyCode) { return false; };
        UIBase = __decorate([
            ccclass("lcc.UIBase")
        ], UIBase);
        return UIBase;
    }(cc.Component));
    lcc.UIBase = UIBase;
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="./ui-base.ts" />
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="./ui-base.ts" />
(function (lcc) {
    var TAG = "lcc/ui/ui-animation.ts";
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property, executeInEditMode = _a.executeInEditMode, menu = _a.menu;
    /**
     * @zh
     * 空动画枚举
     */
    var TempAnimtionEnum;
    (function (TempAnimtionEnum) {
        TempAnimtionEnum[TempAnimtionEnum["<None>"] = 0] = "<None>";
    })(TempAnimtionEnum = lcc.TempAnimtionEnum || (lcc.TempAnimtionEnum = {}));
    /**
     * @zh
     * UI动画组件<br/>
     * 添加到UIBase同节点上生效
     */
    var UIAnimation = /** @class */ (function (_super) {
        __extends(UIAnimation, _super);
        function UIAnimation() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * @zh
             * UI动画
             */
            _this._uiAnimation = null;
            /**
             * @zh
             * 打开动画
             */
            _this.openAnimation = TempAnimtionEnum["<None>"];
            /**
             * @zh
             * 打开动画反转
             */
            _this.openReverse = false;
            /**
             * @zh
             * 关闭动画
             */
            _this.closeAnimation = TempAnimtionEnum["<None>"];
            /**
             * @zh
             * 反转关闭动画
             */
            _this.closeReverse = false;
            return _this;
        }
        Object.defineProperty(UIAnimation.prototype, "uiAnimation", {
            get: function () {
                return this._uiAnimation;
            },
            set: function (value) {
                if (this._uiAnimation != value) {
                    this._uiAnimation = value;
                    this.updateAnimationEnum();
                }
            },
            enumerable: false,
            configurable: true
        });
        /**
         * @zh
         * 更新动画枚举
         */
        UIAnimation.prototype.updateAnimationEnum = function () {
            if (CC_EDITOR) {
                if (this._uiAnimation) {
                    var enumMap_1 = {
                        '<None>': 0
                    };
                    this._uiAnimation.getClips().forEach(function (v, i) { enumMap_1[v.name] = i + 1; });
                    // @ts-ignore
                    cc.Class.Attr.setClassAttr(this, 'openAnimation', 'enumList', cc.Enum.getList(enumMap_1));
                    // @ts-ignore
                    cc.Class.Attr.setClassAttr(this, 'closeAnimation', 'enumList', cc.Enum.getList(enumMap_1));
                }
                else {
                    // @ts-ignore
                    cc.Class.Attr.setClassAttr(this, 'openAnimation', 'enumList', cc.Enum.getList(cc.Enum(TempAnimtionEnum)));
                    // @ts-ignore
                    cc.Class.Attr.setClassAttr(this, 'closeAnimation', 'enumList', cc.Enum.getList(cc.Enum(TempAnimtionEnum)));
                }
                if (this.node) {
                    Editor.Utils.refreshSelectedInspector('node', this.node.uuid);
                }
            }
        };
        /**
         * @zh
         * 预加载
         */
        UIAnimation.prototype.__preload = function () {
            this.updateAnimationEnum();
        };
        /**
         * @zh
         * 播放动画
         *
         * @param aType 动画类型 'open'/'close'
         */
        UIAnimation.prototype.play = function (aType) {
            var _this = this;
            return new Promise(function (resolve) {
                if (!_this._uiAnimation) {
                    resolve(null);
                }
                else {
                    var state_1 = null;
                    var duration = 0;
                    if (aType == 'open' && _this.openAnimation > 0) {
                        var clip = _this._uiAnimation.getClips()[_this.openAnimation - 1];
                        state_1 = _this._uiAnimation.getAnimationState(clip.name);
                        if (_this.openReverse) {
                            state_1.time = clip.duration;
                            state_1.speed = -1;
                        }
                        else {
                            state_1.time = 0;
                            state_1.speed = 1;
                        }
                        duration = clip.duration;
                    }
                    else if (aType == 'close' && _this.closeAnimation > 0) {
                        var clip = _this._uiAnimation.getClips()[_this.closeAnimation - 1];
                        state_1 = _this._uiAnimation.getAnimationState(clip.name);
                        if (_this.closeReverse) {
                            state_1.time = clip.duration;
                            state_1.speed = -1;
                        }
                        else {
                            state_1.time = 0;
                            state_1.speed = 1;
                        }
                        duration = clip.duration;
                    }
                    if (!state_1) {
                        resolve(null);
                    }
                    else {
                        state_1.play();
                        cc.tween(_this.node).delay(duration).call(resolve).start();
                    }
                }
            });
        };
        __decorate([
            property(cc.Animation)
        ], UIAnimation.prototype, "_uiAnimation", void 0);
        __decorate([
            property({
                type: cc.Animation,
                tooltip: 'UI动画组件'
            })
        ], UIAnimation.prototype, "uiAnimation", null);
        __decorate([
            property({
                type: cc.Enum(TempAnimtionEnum),
                tooltip: '在UI动画组件中，打开动画的索引',
                visible: function () {
                    return this._uiAnimation != null;
                }
            })
        ], UIAnimation.prototype, "openAnimation", void 0);
        __decorate([
            property({
                tooltip: '是否反转打开动画',
                visible: function () {
                    return this._uiAnimation != null && this.openAnimation != 0;
                }
            })
        ], UIAnimation.prototype, "openReverse", void 0);
        __decorate([
            property({
                type: cc.Enum(TempAnimtionEnum),
                tooltip: '在UI动画组件中，关闭动画的索引',
                visible: function () {
                    return this._uiAnimation != null;
                }
            })
        ], UIAnimation.prototype, "closeAnimation", void 0);
        __decorate([
            property({
                tooltip: '是否反转关闭动画',
                visible: function () {
                    return this._uiAnimation != null && this.closeAnimation != 0;
                }
            })
        ], UIAnimation.prototype, "closeReverse", void 0);
        UIAnimation = __decorate([
            ccclass("lcc.UIAnimation"),
            executeInEditMode(),
            menu("i18n:lcc-framework.menu-extension/UIAnimation")
        ], UIAnimation);
        return UIAnimation;
    }(cc.Component));
    lcc.UIAnimation = UIAnimation;
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../base/state.ts" />
/// <reference path="../utils/js.ts" />
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../base/base.ts" />
/// <reference path="../base/state.ts" />
/// <reference path="../utils/js.ts" />
(function (lcc) {
    var TAG = "lcc/ui/ui-manager.ts";
    /**
     * @zh
     * 索引路径
     */
    var INDEXPATH;
    (function (INDEXPATH) {
        /**
         * @zh
         * UI界面
         */
        INDEXPATH.UI = "ui";
    })(INDEXPATH = lcc.INDEXPATH || (lcc.INDEXPATH = {}));
    ;
    /**
     * @zh
     * UI根节点名
     */
    lcc.UIROOT_NAME = 'UIManager';
    /**
     * @zh
     * UI根节ZINDEX
     */
    lcc.UIROOT_ZINDEX = 1000;
    /**
     * @zh
     * 默认画布
     */
    lcc.DEFAULT_CANVAS = "lcc_Canvas";
    /**
     * @zh
     * 优先级最大值
     */
    lcc.PRIORITY_MAX = 1000;
    /**
     * @zh
     * UI管理器
     */
    var UIManager = /** @class */ (function () {
        /**
         * @zh
         * 构造函数
         */
        function UIManager() {
            var _this = this;
            /**
             * @zh
             * 画布映射表
             */
            this._canvasMap = lcc.js.createMap();
            /**
             * @zh
             * UI配置表
             */
            this._UIConfigs = lcc.js.createMap();
            /**
             * UI根节点
             */
            this._uiRoot = null;
            /**
             * @zh
             * 画布优先级
             */
            this._canvasPriority = 0;
            /**
             * @zh
             * UI操作表
             */
            this._uiOperations = lcc.js.createMap();
            /**
             * @zh
             * UI栈
             */
            this._uiStack = [];
            lcc.state.on('initialize', function () {
                lcc.doing.stateInitialize.in(function () {
                    _this._canvasMap = lcc.js.createMap();
                    _this._UIConfigs = lcc.js.createMap();
                    _this._uiRoot = null;
                    _this._canvasPriority = 0;
                    _this._uiOperations = lcc.js.createMap();
                    _this._uiStack = [];
                    lcc.indexMgr.on("indexes_removed", _this.onIndexesRemoved, _this);
                });
            });
            lcc.state.on('release', function () {
                lcc.doing.stateRelease.in(function () {
                    lcc.indexMgr.targetOff(_this);
                });
            });
        }
        /**
         * @zh
         * 获得UI根节点
         */
        UIManager.prototype.getUIRoot = function () {
            if (!this._uiRoot) {
                this._uiRoot = new cc.Node(lcc.UIROOT_NAME);
                cc.director.getScene().addChild(this._uiRoot, lcc.UIROOT_ZINDEX);
                cc.game.addPersistRootNode(this._uiRoot);
                this._uiRoot.setAnchorPoint(cc.v2(0, 0));
                this._uiRoot.setPosition(cc.v2(0, 0));
                this._uiRoot.setContentSize(cc.winSize);
            }
            1;
            return this._uiRoot;
        };
        /**
         * @zh
         * 获得画布
         *
         * @param cname - 画布名称
         */
        UIManager.prototype.getCanvas = function (cname) {
            if (cname === void 0) { cname = lcc.DEFAULT_CANVAS; }
            var canvasConfig = this._canvasMap[cname];
            if (!canvasConfig) {
                var canvasNode = new cc.Node(cname);
                this.getUIRoot().addChild(canvasNode);
                canvasNode.setAnchorPoint(cc.v2(0, 0));
                var widget = canvasNode.addComponent(cc.Widget);
                widget.alignMode = cc.Widget.AlignMode.ON_WINDOW_RESIZE;
                widget.isAlignTop = true;
                widget.isAlignBottom = true;
                widget.isAlignLeft = true;
                widget.isAlignRight = true;
                widget.top = 0;
                widget.bottom = 0;
                widget.left = 0;
                widget.right = 0;
                canvasConfig = {
                    canvas: canvasNode,
                    UIs: lcc.js.createMap(),
                    openUIs: lcc.js.createMap(),
                    UIPriority: 1,
                    frontUI: null,
                };
                this._canvasMap[cname] = canvasConfig;
            }
            return canvasConfig;
        };
        /**
         * @zh
         * 设置指定画布在最前面
         *
         * @param cname - 画布名称
         */
        UIManager.prototype.setFrontCanvas = function (cname) {
            var canvasConfig = this._canvasMap[cname];
            if (canvasConfig) {
                canvasConfig.canvas.zIndex = this._canvasPriority++;
            }
        };
        /**
         * @zh
         * 当移除索引
         *
         * @internal
         */
        UIManager.prototype.onIndexesRemoved = function () {
            this.releaseInvalidUIs();
        };
        /**
         * @zh
         * 释放无效UI
         */
        UIManager.prototype.releaseInvalidUIs = function () {
            var uifiles = lcc.indexMgr.getIndex(INDEXPATH.UI) || lcc.js.createMap();
            for (var _i = 0, _a = Object.keys(this._UIConfigs); _i < _a.length; _i++) {
                var uiname = _a[_i];
                if (!uifiles[uiname]) {
                    this.releaseUI(uiname);
                }
            }
        };
        /**
         * @zh
         * 获取所有UI
         */
        UIManager.prototype.getAllUIs = function () {
            return Object.keys(lcc.indexMgr.getIndex(INDEXPATH.UI));
        };
        /**
         * @zh
         * 释放指定UI
         *
         * @param uiname - ui名称
         * @param preload - 预加载
         */
        UIManager.prototype.releaseUI = function (uiname, preload) {
            if (preload === void 0) { preload = false; }
            var uiconf = this._UIConfigs[uiname];
            if (uiconf && (!uiconf.preload || preload)) {
                this.closeUI(uiname, true);
                this._releaseUI(uiname);
            }
        };
        /**
         * @zh
         * 释放UI数组
         *
         * @param uinames - ui名称数组
         * @param preload - 预加载
         */
        UIManager.prototype.releaseUIs = function (uinames, preload) {
            if (preload === void 0) { preload = false; }
            for (var _i = 0, uinames_1 = uinames; _i < uinames_1.length; _i++) {
                var uiname = uinames_1[_i];
                this.releaseUI(uiname, preload);
            }
        };
        /**
         * @zh
         * 预加载UI
         *
         * @param uiname - ui名称
         */
        UIManager.prototype.preloadUI = function (uiname) {
            return __awaiter(this, void 0, void 0, function () {
                var uiconf;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getUIConfig(uiname)];
                        case 1:
                            uiconf = _a.sent();
                            if (uiconf) {
                                this._getUI(uiname, uiconf, true);
                                uiconf.preload = true;
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 预加载UI数组
         *
         * @param uinames - ui名称数组
         * @param progress - 进度
         */
        UIManager.prototype.preloadUIs = function (uinames, progress) {
            if (progress === void 0) { progress = function (p) { }; }
            return __awaiter(this, void 0, void 0, function () {
                var i, len;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            i = 0, len = uinames.length;
                            _a.label = 1;
                        case 1:
                            if (!(i < len)) return [3 /*break*/, 4];
                            return [4 /*yield*/, this.preloadUI(uinames[i])];
                        case 2:
                            _a.sent();
                            progress((i + 1) / len);
                            _a.label = 3;
                        case 3:
                            i++;
                            return [3 /*break*/, 1];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 获得UI配置
         *
         * @param uiname - UI名称
         */
        UIManager.prototype.getUIConfig = function (uiname) {
            return __awaiter(this, void 0, void 0, function () {
                var uiconf, config, prefab;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            uiconf = this._UIConfigs[uiname];
                            if (!!uiconf) return [3 /*break*/, 2];
                            config = lcc.indexMgr.getIndex(INDEXPATH.UI + "/" + uiname);
                            if (!config) return [3 /*break*/, 2];
                            return [4 /*yield*/, lcc.packMgr.loadPrefab(config.file)];
                        case 1:
                            prefab = _a.sent();
                            uiconf = {
                                prefab: prefab,
                                config: config,
                                UI: null,
                            };
                            prefab.addRef();
                            this._UIConfigs[uiname] = uiconf;
                            _a.label = 2;
                        case 2: return [2 /*return*/, uiconf];
                    }
                });
            });
        };
        /**
         * @zh
         * 获得指定UI
         *
         * @param uiname - UI名称
         * @param create - 如果不存在，则创建
         */
        UIManager.prototype.getUI = function (uiname, create) {
            if (create === void 0) { create = false; }
            return __awaiter(this, void 0, void 0, function () {
                var uiconf;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getUIConfig(uiname)];
                        case 1:
                            uiconf = _a.sent();
                            return [2 /*return*/, this._getUI(uiname, uiconf, create)];
                    }
                });
            });
        };
        /**
         * @zh
         * 获得指定UI
         *
         * @param uiname - UI名称
         * @param create - 如果不存在，则创建
         */
        UIManager.prototype._getUI = function (uiname, uiconf, create) {
            if (create === void 0) { create = false; }
            if (uiconf) {
                var ui = uiconf.UI;
                if (!ui && create) {
                    var node = cc.instantiate(uiconf.prefab);
                    var canvas = this.getCanvas(uiconf.config.canvas);
                    canvas.canvas.addChild(node);
                    node.active = false;
                    ui = node.getComponent(lcc.UIBase) || node.getComponentInChildren(lcc.UIBase);
                    if (!ui) {
                        ui = node.addComponent(lcc.UIBase);
                    }
                    ui._setRootNode(node);
                    ui._setCanvas(canvas);
                    ui._setUIName(uiname);
                    if (uiconf.config.priority != null) {
                        ui.setFixedPriority(uiconf.config.priority);
                    }
                    ui._onUICreate();
                    uiconf.UI = ui;
                    canvas.UIs[uiname] = ui;
                }
                return ui;
            }
        };
        /**
         * @zh
         * 释放指定UI
         *
         * @param uiname - UI名称
         */
        UIManager.prototype._releaseUI = function (uiname) {
            var uiconf = this._UIConfigs[uiname];
            if (uiconf) {
                var ui = uiconf.UI;
                if (ui) {
                    var canvas = ui.getCanvas();
                    ui.onUIRelease();
                    ui.node.destroy();
                    delete canvas.UIs[uiname];
                    uiconf.prefab.decRef();
                    uiconf.UI = null;
                    delete this._UIConfigs[uiname];
                }
            }
        };
        /**
         * @zh
         * 设置指定UI到最前面
         *
         * @param ui - 指定UI
         */
        UIManager.prototype.setFront = function (ui) {
            if (ui) {
                var canvas = ui.getCanvas();
                if (ui !== canvas.frontUI) {
                    var priority = ui.getFixedPriority();
                    if (priority == null) {
                        canvas.UIPriority += 1;
                        priority = canvas.UIPriority;
                    }
                    ui.node.zIndex = priority;
                    if (canvas.frontUI) {
                        canvas.frontUI.onChangeFront(false);
                    }
                    canvas.frontUI = ui;
                    canvas.frontUI.onChangeFront(true);
                }
                if (canvas.UIPriority >= lcc.PRIORITY_MAX) {
                    this.sortOpenedUIs(canvas);
                }
            }
        };
        /**
         * @zh
         * 排序打开的UI
         *
         * @param canvas - 画布对象
         */
        UIManager.prototype.sortOpenedUIs = function (canvas) {
            var ouis = [];
            for (var uname in canvas.openUIs) {
                var ui = canvas.openUIs[uname];
                if (ui.getFixedPriority() == null) {
                    ouis.push(ui);
                }
            }
            ouis.sort(function (a, b) {
                return a.node.zIndex - b.node.zIndex;
            });
            canvas.UIPriority = ouis.length;
            for (var i = 0, len = ouis.length; i < len; i++) {
                ouis[i].node.zIndex = (i + 1);
            }
        };
        /**
         * @zh
         * 把UI放置到最前面
         *
         * @param uiname - UI名称
         */
        UIManager.prototype.setFrontByName = function (uiname) {
            var uiconf = this._UIConfigs[uiname];
            if (uiconf && uiconf.UI) {
                this.setFront(uiconf.UI);
            }
        };
        /**
         * @zh
         * 添加UI操作
         *
         * @param uiname - UI名称
         * @param operation - 操作函数
         */
        UIManager.prototype.addUIOperation = function (uiname, operation) {
            var operations = this._uiOperations[uiname];
            if (!operations) {
                operations = [];
                this._uiOperations[uiname] = operations;
            }
            operations.push(operation);
            if (operations.length == 1) {
                operations[0]();
            }
        };
        /**
         * @zh
         * 执行下个UI操作
         *
         * @param uiname - UI名称
         */
        UIManager.prototype.nextUIOperation = function (uiname) {
            var operations = this._uiOperations[uiname];
            if (operations.length > 0) {
                operations.shift();
            }
            if (operations.length > 0) {
                operations[0]();
            }
        };
        /**
         * @zh
         * 打开指定UI
         *
         * @param uiname - UI名称
         * @param args - 打开参数
         */
        UIManager.prototype._openUI = function (uiname) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                var ui, uiconf, canvas;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            ui = null;
                            return [4 /*yield*/, this.getUIConfig(uiname)];
                        case 1:
                            uiconf = _a.sent();
                            if (!uiconf) return [3 /*break*/, 3];
                            ui = uiconf.UI;
                            if (!ui) {
                                ui = this._getUI(uiname, uiconf, true);
                                if (ui) {
                                    canvas = ui.getCanvas();
                                    canvas.openUIs[uiname] = ui;
                                }
                            }
                            if (!ui) return [3 /*break*/, 3];
                            this.setFront(ui);
                            ui.setActive(true);
                            ui.onOpen.apply(ui, args);
                            return [4 /*yield*/, ui.playUIAnimation('open')];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3: return [2 /*return*/, ui];
                    }
                });
            });
        };
        /**
         * @zh
         * 打开指定UI
         *
         * @param uiname - UI名称
         * @param args - 打开参数
         */
        UIManager.prototype.openUI = function (uiname) {
            var _this = this;
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            return new Promise(function (resolve) {
                _this.addUIOperation(uiname, function () { return __awaiter(_this, void 0, void 0, function () {
                    var ui;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this._openUI.apply(this, __spreadArray([uiname], args))];
                            case 1:
                                ui = _a.sent();
                                this.nextUIOperation(uiname);
                                resolve(ui);
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
        };
        /**
         * @zh
         * 关闭指定UI
         *
         * @param uiname - UI名称
         * @param release - 释放对象
         */
        UIManager.prototype._closeUI = function (uiname, release) {
            if (release === void 0) { release = false; }
            return __awaiter(this, void 0, void 0, function () {
                var uiconf, ui, canvas, nfui, uin, opui;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            uiconf = this._UIConfigs[uiname];
                            if (!uiconf) return [3 /*break*/, 2];
                            ui = uiconf.UI;
                            if (!ui) return [3 /*break*/, 2];
                            canvas = ui.getCanvas();
                            return [4 /*yield*/, ui.playUIAnimation('close')];
                        case 1:
                            _a.sent();
                            ui.onClose();
                            ui.setActive(false);
                            delete canvas.openUIs[uiname];
                            if (ui === canvas.frontUI) {
                                nfui = null;
                                for (uin in canvas.openUIs) {
                                    opui = canvas.openUIs[uin];
                                    if ((opui !== canvas.frontUI) && (!nfui ||
                                        nfui.node.zIndex < opui.node.zIndex)) {
                                        nfui = opui;
                                    }
                                }
                                this.setFront(nfui);
                            }
                            if (release) {
                                this._releaseUI(uiname);
                            }
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 关闭指定UI
         *
         * @param uiname - UI名称
         * @param release - 释放对象
         */
        UIManager.prototype.closeUI = function (uiname, release) {
            var _this = this;
            if (release === void 0) { release = false; }
            return new Promise(function (resolve) {
                _this.addUIOperation(uiname, function () { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this._closeUI(uiname, release)];
                            case 1:
                                _a.sent();
                                this.nextUIOperation(uiname);
                                resolve(uiname);
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
        };
        /**
         * @zh
         * 关闭UI数组
         *
         * @param uinames - UI名称数组
         */
        UIManager.prototype.closeUIs = function (uinames, release) {
            if (release === void 0) { release = false; }
            for (var _i = 0, uinames_2 = uinames; _i < uinames_2.length; _i++) {
                var uin = uinames_2[_i];
                this.closeUI(uin, release);
            }
        };
        /**
         * @zh
         * 关闭所有UI
         *
         * @param excepts - 排除UI数组
         */
        UIManager.prototype.closeAllUI = function (excepts, release) {
            var _this = this;
            if (release === void 0) { release = false; }
            Object.keys(this._UIConfigs).forEach(function (uiname) {
                if (!excepts || excepts.indexOf(uiname) == -1) {
                    _this.closeUI(uiname, release);
                }
            });
        };
        /**
         * @zh
         * 使用栈方式打开UI
         *
         * @param uiname - UI名称
         * @param args - 打开参数
         */
        UIManager.prototype.pushUI = function (uiname) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this._uiStack.length > 0)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.closeUI(this._uiStack[this._uiStack.length - 1])];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            this._uiStack.push(uiname);
                            return [4 /*yield*/, this.openUI.apply(this, __spreadArray([uiname], args))];
                        case 3: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        /**
         * @zh
         * 使用栈方式关闭UI
         *
         * @param uiname - UI名称
         */
        UIManager.prototype.popUI = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this._uiStack.length > 0)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.closeUI(this._uiStack.pop())];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            if (!(this._uiStack.length > 0)) return [3 /*break*/, 4];
                            return [4 /*yield*/, this.openUI(this._uiStack[this._uiStack.length - 1])];
                        case 3: return [2 /*return*/, _a.sent()];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 获得UI栈
         */
        UIManager.prototype.getUIStack = function () {
            return this._uiStack;
        };
        /**
         * @zh
         * 清空UI栈
         */
        UIManager.prototype.clearUIStack = function () {
            this._uiStack = lcc.js.createMap();
        };
        /**
         * @zh
         * 当按键按下
         *
         * @param keyCode - 按键编码
         */
        UIManager.prototype.onKeyPressed = function (keyCode) {
            var canvasuis = [];
            for (var cname in this._canvasMap) {
                var canvans = this._canvasMap[cname];
                var openuis = [];
                for (var uin in canvans.openUIs) {
                    openuis.push(canvans.openUIs[uin]);
                }
                canvasuis.push({
                    priority: canvans.canvas.zIndex,
                    openuis: openuis,
                });
            }
            canvasuis.sort(function (a, b) { return b.priority - a.priority; });
            for (var _i = 0, canvasuis_1 = canvasuis; _i < canvasuis_1.length; _i++) {
                var cui = canvasuis_1[_i];
                cui.openuis.sort(function (a, b) { return b.node.zIndex - a.node.zIndex; });
                for (var _a = 0, _b = cui.openuis; _a < _b.length; _a++) {
                    var ui = _b[_a];
                    if (ui.onKeyPressed(keyCode)) {
                        return true;
                    }
                }
            }
            return false;
        };
        return UIManager;
    }());
    ;
    /**
     * @zh
     * UI管理器对象
     */
    lcc.uiMgr = new UIManager();
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
(function (lcc) {
    var fs;
    (function (fs) {
        var TAG = "lcc/utils/fs.ts";
        /**
         * @zh
         * 获得路径的目录
         *
         * @param path - 路径
         */
        function dirname(path) {
            var lastSpos = path.lastIndexOf('/');
            return lastSpos == -1 ? '' : path.substring(0, lastSpos);
        }
        fs.dirname = dirname;
        /**
         * @zh
         * 获得路径的文件名
         *
         * @param path - 路径
         */
        function basename(path) {
            var lastSpos = path.lastIndexOf('/');
            return lastSpos == -1 ? path : path.substr(lastSpos + 1);
        }
        fs.basename = basename;
    })(fs = lcc.fs || (lcc.fs = {}));
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
(function (lcc) {
    var math;
    (function (math) {
        var TAG = "lcc/utils/math.ts";
        /**
         * @zh
         * 获得随机浮点值
         *
         * @param min - 最小值
         * @param max - 最大值
         */
        function randomFloat(min, max) {
            return Math.random() * (max - min + 1) + min;
        }
        math.randomFloat = randomFloat;
        /**
         * @zh
         * 获得随机整数值
         *
         * @param min - 最小值
         * @param max - 最大值
         */
        function randomInt(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }
        math.randomInt = randomInt;
        /**
         * @zh
         * 随机获得数组中的值
         *
         * @param elements - 元素数组
         */
        function randomElement(elements) {
            var select = Math.floor(Math.random() * 100) % elements.length;
            return elements[select];
        }
        math.randomElement = randomElement;
        /**
         * @zh
         * 随机获得数组的几个值
         *
         * @param elements - 元素数组
         * @param count - 数量
         */
        function randomElements(elements, count) {
            var shuffled = elements.slice(0), i = elements.length, min = i - count, temp, index;
            while (i-- > min) {
                index = Math.floor((i + 1) * Math.random());
                temp = shuffled[index];
                shuffled[index] = shuffled[i];
                shuffled[i] = temp;
            }
            return shuffled.slice(min);
        }
        math.randomElements = randomElements;
    })(math = lcc.math || (lcc.math = {}));
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../net-line.ts" />
/// <reference path="../net-client.ts" />
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../net-line.ts" />
/// <reference path="../net-client.ts" />
(function (lcc) {
    var TAG = "lcc/network/http/http-line.ts";
    /**
     * @zh
     * HTTP心跳，不大于0表示不使用
     */
    lcc.HTTP_HEARTTICK = -1;
    /**
     * @zh
     * HTTP协议路径
     */
    lcc.HTTP_PROTOCOL_PATH = '/protocol';
    /**
     * @zh
     * 网络线类型
     */
    var NetLineType;
    (function (NetLineType) {
        /**
         * @zh
         * HTTP网络线
         */
        NetLineType.HTTP = 2;
    })(NetLineType = lcc.NetLineType || (lcc.NetLineType = {}));
    /**
     * @zh
     * Http调用方式
     */
    var HttpCall;
    (function (HttpCall) {
        /**
         * @zh
         * GET调用
         */
        HttpCall[HttpCall["GET"] = 1] = "GET";
        /**
         * @zh
         * POST调用
         */
        HttpCall[HttpCall["POST"] = 2] = "POST";
    })(HttpCall = lcc.HttpCall || (lcc.HttpCall = {}));
    /**
     * @zh
     * HTTP网络线
     */
    var HttpLine = /** @class */ (function (_super) {
        __extends(HttpLine, _super);
        function HttpLine() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * @zh
             * 网络线配置
             */
            _this._config = null;
            /**
             * @zh
             * 连接ID
             */
            _this._connectID = null;
            /**
             * @zh
             * 就绪
             */
            _this._ready = false;
            /**
             * @zh
             * 已经关闭
             */
            _this._closed = false;
            /**
             * @zh
             * 发送心跳时间
             */
            _this._sendHeartTime = 0;
            return _this;
        }
        /**
         * @zh
         * 获得URL连接
         */
        HttpLine.prototype.getURL = function () {
            return this._config.url;
        };
        /**
         * @zh
         * 配置网络线
         *
         * @param config - 配置对象
         */
        HttpLine.prototype.config = function (config) {
            lcc.DEBUG.NETWORK && cc.log(TAG, this.getName() + " config");
            this._config = config;
        };
        /**
         * @zh
         * 检查网络线是否有效
         */
        HttpLine.prototype.isValid = function () {
            return this._ready && !this._closed;
        };
        /**
         * @zh
         * 处理网络线数据
         *
         * @param netData 网络数据
         */
        HttpLine.prototype.onDealNetData = function (netData) {
            lcc.DEBUG.NETWORK && cc.log(TAG, this.getName() + " onDealNetData " + JSON.stringify(netData));
            if (netData.protocols) {
                this.pushDispatchCaches(netData.protocols);
            }
            if (netData.type == lcc.netdata.NetDataType.SYNC_CONNECT_ID) {
                this._connectID = netData.data.connectID;
                lcc.DEBUG.NETWORK && cc.log(TAG, this.getName() + " onDealNetData SYNC_CONNECT_ID " + this._connectID);
                if (!this._ready) {
                    lcc.DEBUG.NETWORK && cc.log(TAG, this.getName() + " CLIENT connect");
                    this._sendHeartTime = 0;
                    this._ready = true;
                    try {
                        this.emit("onOpen", true, this);
                    }
                    catch (e) {
                        cc.error(TAG, "onDealNetData SYNC_CONNECT_ID Exception " + e);
                    }
                }
            }
        };
        /**
         * @zh
         * 打开网络线
         */
        HttpLine.prototype.open = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    if (!this._ready) {
                        this._config.call = this._config.call || HttpCall.POST;
                        lcc.DEBUG.NETWORK && cc.log(TAG, this.getName() + " CLIENT open " + this._config.url + " " + this._config.call);
                        if (this._config.url) {
                            this._config.url = "" + this._config.url + lcc.HTTP_PROTOCOL_PATH;
                            this.syncConnectID();
                        }
                        else {
                            cc.error(TAG, "HttpLine " + this._name + " url is invalid!");
                            try {
                                this.emit("onOpen", false, this);
                            }
                            catch (e) {
                                cc.error(TAG, "CLIENT open Exception " + e);
                            }
                        }
                    }
                    return [2 /*return*/, new Promise(function (resolve) {
                            if (_this._ready) {
                                resolve(true);
                            }
                            else {
                                _this.once("onOpen", resolve);
                            }
                        })];
                });
            });
        };
        /**
         * @zh
         * 关闭网络线
         */
        HttpLine.prototype.close = function () {
            if (this._ready) {
                lcc.DEBUG.NETWORK && cc.log(TAG, this.getName() + " CLIENT close");
                this._ready = false;
                this.emit("onClose", this, 0);
            }
        };
        /**
         * @zh
         * 更新网络线
         *
         * @param dt 间隔时间
         */
        HttpLine.prototype.onUpdate = function (dt) {
            if (lcc.HTTP_HEARTTICK > 0 && this._ready) {
                this._sendHeartTime += dt;
                if (this._sendHeartTime >= lcc.HTTP_HEARTTICK) {
                    lcc.DEBUG.NETWORK && cc.log(TAG, this.getName() + " onUpdate sendHeartTime");
                    this.writeNetLineData(lcc.netdata.NetDataType.HERT_TICK);
                }
            }
        };
        /**
         * @zh
         * 同步连接ID
         */
        HttpLine.prototype.syncConnectID = function () {
            if (this._mode === lcc.NetLineMode.CLIENT) {
                lcc.DEBUG.NETWORK && cc.log(TAG, this.getName() + " syncConnectID");
                var data = {
                    type: lcc.netdata.NetDataType.SYNC_CONNECT_ID
                };
                this.sendNetData_client(data);
            }
        };
        /**
         * @zh
         * 发送网络数据-客户端
         *
         * @param data - 网络数据
         */
        HttpLine.prototype.sendNetData_client = function (netData) {
            return __awaiter(this, void 0, void 0, function () {
                var datab64, r, rNetData;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            datab64 = lcc.js.ab2b64(lcc.packNetData(netData, this));
                            if (!(this._config.call == HttpCall.POST)) return [3 /*break*/, 2];
                            return [4 /*yield*/, lcc.http.postJson(this._config.url, { data: datab64 })];
                        case 1:
                            r = _a.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, lcc.http.getJson(this._config.url + "?data=" + datab64)];
                        case 3:
                            r = _a.sent();
                            _a.label = 4;
                        case 4:
                            rNetData = r && lcc.unpackNetData(lcc.js.b642u8a(r.data).buffer);
                            if (rNetData) {
                                this.onDealNetData(rNetData);
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @zh
         * 发送网络线数据
         *
         * @param data - 网络数据
         */
        HttpLine.prototype.sendNetData = function (data) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (this._ready) {
                        lcc.DEBUG.NETWORK && cc.log(TAG, this.getName() + " sendNetData " + this._mode + " " + JSON.stringify(data));
                        if (this._mode === lcc.NetLineMode.CLIENT) {
                            data.connectID = this._connectID;
                            this.sendNetData_client(data);
                            this._sendHeartTime = 0;
                        }
                    }
                    else {
                        cc.warn(TAG, "HttpLine " + this._name + " sendNetData fail!");
                    }
                    return [2 /*return*/];
                });
            });
        };
        return HttpLine;
    }(lcc.NetLine));
    lcc.HttpLine = HttpLine;
    ;
    //注册网络类型
    lcc.NetLine.registerNetType(NetLineType.HTTP, HttpLine);
})(lcc || (lcc = {}));
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../net-line.ts" />
/// <reference path="../net-client.ts" />
/// <reference path="../../utils/js-buffer.ts" />
var lcc;
/*
Copyright 2021 LuJun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/// <reference path="../net-line.ts" />
/// <reference path="../net-client.ts" />
/// <reference path="../../utils/js-buffer.ts" />
(function (lcc) {
    var TAG = "lcc/network/websocket/websocket-line.ts";
    /**
     * @zh
     * WS心跳
     */
    lcc.WEBSOCKET_HEARTTICK = 10;
    /**
     * @zh
     * 网络线类型
     */
    var NetLineType;
    (function (NetLineType) {
        /**
         * @zh
         * WS网络线
         */
        NetLineType.WEBSOCKET = 1;
    })(NetLineType = lcc.NetLineType || (lcc.NetLineType = {}));
    /**
     * @zh
     * WEBSOCKET网络线<br/>
     */
    var WebSocketLine = /** @class */ (function (_super) {
        __extends(WebSocketLine, _super);
        function WebSocketLine() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * @zh
             * 网络线配置
             */
            _this._config = null;
            /**
             * @zh
             * 网络线实体
             */
            _this._entity = null;
            /**
             * @zh
             * 就绪
             */
            _this._ready = false;
            /**
             * @zh
             * 心跳时间限制
             */
            _this._heartTimeLimit = lcc.WEBSOCKET_HEARTTICK;
            /**
             * @zh
             * 检查心跳时间
             */
            _this._checkHeartTime = 0;
            /**
             * @zh
             * 发送心跳时间<br/>
             * 客户端
             */
            _this._sendHeartTime = 0;
            return _this;
        }
        /**
         * @zh
         * 获得URL连接
         */
        WebSocketLine.prototype.getURL = function () {
            return this._config.url;
        };
        /**
         * @zh
         * 配置网络线
         *
         * @param config - 配置对象
         */
        WebSocketLine.prototype.config = function (config) {
            lcc.DEBUG.NETWORK && cc.log(TAG, this.getName() + " config");
            this._config = config;
        };
        /**
         * @zh
         * 检查网络线是否有效
         */
        WebSocketLine.prototype.isValid = function () {
            return this._entity && this._ready;
        };
        /**
         * @zh
         * 处理网络线数据
         *
         * @param netData - 收到的网络数据
         */
        WebSocketLine.prototype.onDealNetData = function (netData) {
            this._checkHeartTime = 0;
            lcc.DEBUG.NETWORK && cc.log(TAG, this.getName() + " onDealNetData " + JSON.stringify(netData));
            if (netData.protocols) {
                this.pushDispatchCaches(netData.protocols);
            }
            if (netData.type == lcc.netdata.NetDataType.SYNC_HERTTICK_TIME) {
                if (this._mode === lcc.NetLineMode.CLIENT) {
                    this._heartTimeLimit = netData.data.heartTime;
                    this.writeNetLineData(lcc.netdata.NetDataType.HERT_TICK);
                    this._sendHeartTime = 0;
                    lcc.DEBUG.NETWORK && cc.log(TAG, this.getName() + " SYNC_HERTTICK_TIME " + this._heartTimeLimit);
                }
            }
        };
        /**
         * @zh
         * 打开网络线
         */
        WebSocketLine.prototype.open = function () {
            return __awaiter(this, void 0, void 0, function () {
                var wssconfig;
                var _this = this;
                return __generator(this, function (_a) {
                    if (!this._entity) {
                        if (this._mode === lcc.NetLineMode.CLIENT) {
                            lcc.DEBUG.NETWORK && cc.log(TAG, this.getName() + " CLIENT open " + this._config.url);
                            try {
                                if (this._config.url.indexOf("wss://") == 0 && CC_JSB) {
                                    wssconfig = lcc.netClient.getWSSConfig();
                                    if (wssconfig) {
                                        // @ts-ignore
                                        this._entity = new WebSocket(this._config.url, wssconfig.protocol, wssconfig.cert);
                                    }
                                    else {
                                        cc.warn(TAG, "native wss connect must set wssconfig");
                                        try {
                                            this.emit("onOpen", false, this);
                                        }
                                        catch (e) {
                                            cc.error(TAG, this.getName() + " CLIENT open Exception " + e);
                                        }
                                    }
                                }
                                else {
                                    this._entity = new WebSocket(this._config.url);
                                }
                            }
                            catch (err) {
                                cc.error(err);
                                try {
                                    this.emit("onOpen", false, this);
                                }
                                catch (e) {
                                    cc.error(TAG, this.getName() + " CLIENT open Exception " + e);
                                }
                                return [2 /*return*/];
                            }
                            this._entity.onopen = function (ev) {
                                lcc.DEBUG.NETWORK && cc.log(TAG, _this.getName() + " CLIENT onopen");
                                _this._checkHeartTime = 0;
                                _this._sendHeartTime = 0;
                                _this._ready = true;
                                try {
                                    _this.emit("onOpen", true, _this);
                                }
                                catch (e) {
                                    cc.error(TAG, _this.getName() + " CLIENT open onopen Exception " + e);
                                }
                            };
                            this._entity.onclose = function (ev) {
                                lcc.DEBUG.NETWORK && cc.log(TAG, _this.getName() + " CLIENT onclose");
                                if (_this._entity) {
                                    _this._entity = null;
                                    _this._ready = false;
                                    try {
                                        _this.emit("onClose", _this, 0);
                                    }
                                    catch (e) {
                                        cc.error(TAG, _this.getName() + " CLIENT open onclose Exception " + e);
                                    }
                                }
                            };
                            this._entity.onmessage = function (ev) {
                                lcc.DEBUG.NETWORK && cc.log(TAG, _this.getName() + " CLIENT onmessage " + ev.data);
                                if (typeof ev.data == 'string') {
                                    var netData = JSON.parse(ev.data);
                                    if (netData) {
                                        _this.onDealNetData(netData);
                                    }
                                }
                                else if (ev.data instanceof ArrayBuffer) {
                                    var netData = lcc.unpackNetData(ev.data);
                                    if (netData) {
                                        _this.onDealNetData(netData);
                                    }
                                }
                                else if (ev.data instanceof Blob) {
                                    var reader = new FileReader();
                                    reader.onload = function (evt) {
                                        if (evt.target.readyState == FileReader.DONE) {
                                            var netData = lcc.unpackNetData(evt.target.result);
                                            if (netData) {
                                                _this.onDealNetData(netData);
                                            }
                                        }
                                    };
                                    reader.readAsArrayBuffer(ev.data);
                                }
                            };
                            this._entity.onerror = function (ev) {
                                lcc.DEBUG.NETWORK && cc.log(TAG, _this.getName() + " CLIENT onerror " + ev);
                                try {
                                    if (_this._ready) {
                                        _this.emit("onError", _this, ev);
                                    }
                                    else {
                                        _this.emit("onOpen", false, _this);
                                    }
                                }
                                catch (e) {
                                    cc.error(TAG, _this.getName() + " CLIENT open onerror Exception " + e);
                                }
                                _this.close();
                            };
                        }
                    }
                    if (this._entity) {
                        return [2 /*return*/, new Promise(function (resolve) {
                                if (_this._ready) {
                                    resolve(true);
                                }
                                else {
                                    _this.once("onOpen", resolve);
                                }
                            })];
                    }
                    return [2 /*return*/];
                });
            });
        };
        /**
         * @zh
         * 关闭网络线
         */
        WebSocketLine.prototype.close = function () {
            if (this._entity) {
                lcc.DEBUG.NETWORK && cc.log(TAG, this.getName() + " " + this._mode + " close");
                var ent = this._entity;
                this._entity = null;
                if (this._ready) {
                    ent.close();
                }
                this._ready = false;
                try {
                    this.emit("onClose", this, 0);
                }
                catch (e) {
                    cc.error(TAG, this.getName() + " close Exception " + e);
                }
            }
        };
        /**
         * @zh
         * 更新网络线
         *
         * @param dt - 间隔时间
         */
        WebSocketLine.prototype.onUpdate = function (dt) {
            if (this._entity && this._ready) {
                this._checkHeartTime += dt;
                if (this._checkHeartTime >= this._heartTimeLimit) {
                    lcc.DEBUG.NETWORK && cc.log(TAG, this.getName() + " onUpdate checkHeartTime close");
                    this.close();
                }
                if (this._mode === lcc.NetLineMode.CLIENT) {
                    this._sendHeartTime += dt;
                    if (this._sendHeartTime >= this._heartTimeLimit / 2) {
                        lcc.DEBUG.NETWORK && cc.log(TAG, this.getName() + " onUpdate sendHeartTime");
                        this.writeNetLineData(lcc.netdata.NetDataType.HERT_TICK);
                        this._sendHeartTime = 0;
                    }
                }
            }
        };
        /**
         * @zh
         * 发送网络线数据
         *
         * @param data - 网络数据
         */
        WebSocketLine.prototype.sendNetData = function (netData) {
            if (this._entity && this._ready) {
                this._entity.send(lcc.packNetData(netData, this));
            }
            else {
                console.warn(TAG, "WebSocketLine " + this._name + " sendNetData fail!");
            }
        };
        return WebSocketLine;
    }(lcc.NetLine));
    lcc.WebSocketLine = WebSocketLine;
    ;
    //注册网络类型
    lcc.NetLine.registerNetType(NetLineType.WEBSOCKET, WebSocketLine);
})(lcc || (lcc = {}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,

}).call(this,require("qC859L"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/fake_a562d9a4.js","/")
},{"buffer":3,"google-protobuf":4,"qC859L":6}],2:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)
	var PLUS_URL_SAFE = '-'.charCodeAt(0)
	var SLASH_URL_SAFE = '_'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS ||
		    code === PLUS_URL_SAFE)
			return 62 // '+'
		if (code === SLASH ||
		    code === SLASH_URL_SAFE)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

}).call(this,require("qC859L"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\node_modules\\base64-js\\lib\\b64.js","/..\\node_modules\\base64-js\\lib")
},{"buffer":3,"qC859L":6}],3:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = Buffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192

/**
 * If `Buffer._useTypedArrays`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (compatible down to IE6)
 */
Buffer._useTypedArrays = (function () {
  // Detect if browser supports Typed Arrays. Supported browsers are IE 10+, Firefox 4+,
  // Chrome 7+, Safari 5.1+, Opera 11.6+, iOS 4.2+. If the browser does not support adding
  // properties to `Uint8Array` instances, then that's the same as no `Uint8Array` support
  // because we need to be able to add all the node Buffer API methods. This is an issue
  // in Firefox 4-29. Now fixed: https://bugzilla.mozilla.org/show_bug.cgi?id=695438
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return 42 === arr.foo() &&
        typeof arr.subarray === 'function' // Chrome 9-10 lack `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding, noZero) {
  if (!(this instanceof Buffer))
    return new Buffer(subject, encoding, noZero)

  var type = typeof subject

  // Workaround: node's base64 implementation allows for non-padded strings
  // while base64-js does not.
  if (encoding === 'base64' && type === 'string') {
    subject = stringtrim(subject)
    while (subject.length % 4 !== 0) {
      subject = subject + '='
    }
  }

  // Find the length
  var length
  if (type === 'number')
    length = coerce(subject)
  else if (type === 'string')
    length = Buffer.byteLength(subject, encoding)
  else if (type === 'object')
    length = coerce(subject.length) // assume that object is array-like
  else
    throw new Error('First argument needs to be a number, array or string.')

  var buf
  if (Buffer._useTypedArrays) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    buf = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    buf = this
    buf.length = length
    buf._isBuffer = true
  }

  var i
  if (Buffer._useTypedArrays && typeof subject.byteLength === 'number') {
    // Speed optimization -- use set if we're copying from a typed array
    buf._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    for (i = 0; i < length; i++) {
      if (Buffer.isBuffer(subject))
        buf[i] = subject.readUInt8(i)
      else
        buf[i] = subject[i]
    }
  } else if (type === 'string') {
    buf.write(subject, 0, encoding)
  } else if (type === 'number' && !Buffer._useTypedArrays && !noZero) {
    for (i = 0; i < length; i++) {
      buf[i] = 0
    }
  }

  return buf
}

// STATIC METHODS
// ==============

Buffer.isEncoding = function (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.isBuffer = function (b) {
  return !!(b !== null && b !== undefined && b._isBuffer)
}

Buffer.byteLength = function (str, encoding) {
  var ret
  str = str + ''
  switch (encoding || 'utf8') {
    case 'hex':
      ret = str.length / 2
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.concat = function (list, totalLength) {
  assert(isArray(list), 'Usage: Buffer.concat(list, [totalLength])\n' +
      'list should be an Array.')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (typeof totalLength !== 'number') {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

// BUFFER INSTANCE METHODS
// =======================

function _hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  assert(strLen % 2 === 0, 'Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16)
    assert(!isNaN(byte), 'Invalid hex string')
    buf[offset + i] = byte
  }
  Buffer._charsWritten = i * 2
  return i
}

function _utf8Write (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(utf8ToBytes(string), buf, offset, length)
  return charsWritten
}

function _asciiWrite (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function _binaryWrite (buf, string, offset, length) {
  return _asciiWrite(buf, string, offset, length)
}

function _base64Write (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function _utf16leWrite (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(utf16leToBytes(string), buf, offset, length)
  return charsWritten
}

Buffer.prototype.write = function (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0
  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = _hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = _utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = _asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = _binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = _base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leWrite(this, string, offset, length)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toString = function (encoding, start, end) {
  var self = this

  encoding = String(encoding || 'utf8').toLowerCase()
  start = Number(start) || 0
  end = (end !== undefined)
    ? Number(end)
    : end = self.length

  // Fastpath empty strings
  if (end === start)
    return ''

  var ret
  switch (encoding) {
    case 'hex':
      ret = _hexSlice(self, start, end)
      break
    case 'utf8':
    case 'utf-8':
      ret = _utf8Slice(self, start, end)
      break
    case 'ascii':
      ret = _asciiSlice(self, start, end)
      break
    case 'binary':
      ret = _binarySlice(self, start, end)
      break
    case 'base64':
      ret = _base64Slice(self, start, end)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leSlice(self, start, end)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toJSON = function () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function (target, target_start, start, end) {
  var source = this

  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (!target_start) target_start = 0

  // Copy 0 bytes; we're done
  if (end === start) return
  if (target.length === 0 || source.length === 0) return

  // Fatal error conditions
  assert(end >= start, 'sourceEnd < sourceStart')
  assert(target_start >= 0 && target_start < target.length,
      'targetStart out of bounds')
  assert(start >= 0 && start < source.length, 'sourceStart out of bounds')
  assert(end >= 0 && end <= source.length, 'sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length)
    end = this.length
  if (target.length - target_start < end - start)
    end = target.length - target_start + start

  var len = end - start

  if (len < 100 || !Buffer._useTypedArrays) {
    for (var i = 0; i < len; i++)
      target[i + target_start] = this[i + start]
  } else {
    target._set(this.subarray(start, start + len), target_start)
  }
}

function _base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function _utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function _asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++)
    ret += String.fromCharCode(buf[i])
  return ret
}

function _binarySlice (buf, start, end) {
  return _asciiSlice(buf, start, end)
}

function _hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function _utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i+1] * 256)
  }
  return res
}

Buffer.prototype.slice = function (start, end) {
  var len = this.length
  start = clamp(start, len, 0)
  end = clamp(end, len, len)

  if (Buffer._useTypedArrays) {
    return Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    var newBuf = new Buffer(sliceLen, undefined, true)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
    return newBuf
  }
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

Buffer.prototype.readUInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  return this[offset]
}

function _readUInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    val = buf[offset]
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
  } else {
    val = buf[offset] << 8
    if (offset + 1 < len)
      val |= buf[offset + 1]
  }
  return val
}

Buffer.prototype.readUInt16LE = function (offset, noAssert) {
  return _readUInt16(this, offset, true, noAssert)
}

Buffer.prototype.readUInt16BE = function (offset, noAssert) {
  return _readUInt16(this, offset, false, noAssert)
}

function _readUInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    if (offset + 2 < len)
      val = buf[offset + 2] << 16
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
    val |= buf[offset]
    if (offset + 3 < len)
      val = val + (buf[offset + 3] << 24 >>> 0)
  } else {
    if (offset + 1 < len)
      val = buf[offset + 1] << 16
    if (offset + 2 < len)
      val |= buf[offset + 2] << 8
    if (offset + 3 < len)
      val |= buf[offset + 3]
    val = val + (buf[offset] << 24 >>> 0)
  }
  return val
}

Buffer.prototype.readUInt32LE = function (offset, noAssert) {
  return _readUInt32(this, offset, true, noAssert)
}

Buffer.prototype.readUInt32BE = function (offset, noAssert) {
  return _readUInt32(this, offset, false, noAssert)
}

Buffer.prototype.readInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null,
        'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  var neg = this[offset] & 0x80
  if (neg)
    return (0xff - this[offset] + 1) * -1
  else
    return this[offset]
}

function _readInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = _readUInt16(buf, offset, littleEndian, true)
  var neg = val & 0x8000
  if (neg)
    return (0xffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt16LE = function (offset, noAssert) {
  return _readInt16(this, offset, true, noAssert)
}

Buffer.prototype.readInt16BE = function (offset, noAssert) {
  return _readInt16(this, offset, false, noAssert)
}

function _readInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = _readUInt32(buf, offset, littleEndian, true)
  var neg = val & 0x80000000
  if (neg)
    return (0xffffffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt32LE = function (offset, noAssert) {
  return _readInt32(this, offset, true, noAssert)
}

Buffer.prototype.readInt32BE = function (offset, noAssert) {
  return _readInt32(this, offset, false, noAssert)
}

function _readFloat (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 23, 4)
}

Buffer.prototype.readFloatLE = function (offset, noAssert) {
  return _readFloat(this, offset, true, noAssert)
}

Buffer.prototype.readFloatBE = function (offset, noAssert) {
  return _readFloat(this, offset, false, noAssert)
}

function _readDouble (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 7 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 52, 8)
}

Buffer.prototype.readDoubleLE = function (offset, noAssert) {
  return _readDouble(this, offset, true, noAssert)
}

Buffer.prototype.readDoubleBE = function (offset, noAssert) {
  return _readDouble(this, offset, false, noAssert)
}

Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'trying to write beyond buffer length')
    verifuint(value, 0xff)
  }

  if (offset >= this.length) return

  this[offset] = value
}

function _writeUInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 2); i < j; i++) {
    buf[offset + i] =
        (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
            (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, false, noAssert)
}

function _writeUInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffffffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 4); i < j; i++) {
    buf[offset + i] =
        (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, false, noAssert)
}

Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7f, -0x80)
  }

  if (offset >= this.length)
    return

  if (value >= 0)
    this.writeUInt8(value, offset, noAssert)
  else
    this.writeUInt8(0xff + value + 1, offset, noAssert)
}

function _writeInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fff, -0x8000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    _writeUInt16(buf, value, offset, littleEndian, noAssert)
  else
    _writeUInt16(buf, 0xffff + value + 1, offset, littleEndian, noAssert)
}

Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, false, noAssert)
}

function _writeInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fffffff, -0x80000000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    _writeUInt32(buf, value, offset, littleEndian, noAssert)
  else
    _writeUInt32(buf, 0xffffffff + value + 1, offset, littleEndian, noAssert)
}

Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, false, noAssert)
}

function _writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 23, 4)
}

Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, false, noAssert)
}

function _writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 7 < buf.length,
        'Trying to write beyond buffer length')
    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 52, 8)
}

Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, false, noAssert)
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (typeof value === 'string') {
    value = value.charCodeAt(0)
  }

  assert(typeof value === 'number' && !isNaN(value), 'value is not a number')
  assert(end >= start, 'end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  assert(start >= 0 && start < this.length, 'start out of bounds')
  assert(end >= 0 && end <= this.length, 'end out of bounds')

  for (var i = start; i < end; i++) {
    this[i] = value
  }
}

Buffer.prototype.inspect = function () {
  var out = []
  var len = this.length
  for (var i = 0; i < len; i++) {
    out[i] = toHex(this[i])
    if (i === exports.INSPECT_MAX_BYTES) {
      out[i + 1] = '...'
      break
    }
  }
  return '<Buffer ' + out.join(' ') + '>'
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer._useTypedArrays) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1)
        buf[i] = this[i]
      return buf.buffer
    }
  } else {
    throw new Error('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function (arr) {
  arr._isBuffer = true

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

// slice(start, end)
function clamp (index, len, defaultValue) {
  if (typeof index !== 'number') return defaultValue
  index = ~~index;  // Coerce to integer.
  if (index >= len) return len
  if (index >= 0) return index
  index += len
  if (index >= 0) return index
  return 0
}

function coerce (length) {
  // Coerce length to a number (possibly NaN), round up
  // in case it's fractional (e.g. 123.456) then do a
  // double negate to coerce a NaN to 0. Easy, right?
  length = ~~Math.ceil(+length)
  return length < 0 ? 0 : length
}

function isArray (subject) {
  return (Array.isArray || function (subject) {
    return Object.prototype.toString.call(subject) === '[object Array]'
  })(subject)
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    var b = str.charCodeAt(i)
    if (b <= 0x7F)
      byteArray.push(str.charCodeAt(i))
    else {
      var start = i
      if (b >= 0xD800 && b <= 0xDFFF) i++
      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')
      for (var j = 0; j < h.length; j++)
        byteArray.push(parseInt(h[j], 16))
    }
  }
  return byteArray
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(str)
}

function blitBuffer (src, dst, offset, length) {
  var pos
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length))
      break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

/*
 * We have to make sure that the value is a valid integer. This means that it
 * is non-negative. It has no fractional component and that it does not
 * exceed the maximum allowed value.
 */
function verifuint (value, max) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value >= 0, 'specified a negative value for writing an unsigned value')
  assert(value <= max, 'value is larger than maximum value for type')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifsint (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifIEEE754 (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
}

function assert (test, message) {
  if (!test) throw new Error(message || 'Failed assertion')
}

}).call(this,require("qC859L"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\node_modules\\buffer\\index.js","/..\\node_modules\\buffer")
},{"base64-js":2,"buffer":3,"ieee754":5,"qC859L":6}],4:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.findInternal=function(a,b,c){a instanceof String&&(a=String(a));for(var d=a.length,e=0;e<d;e++){var f=a[e];if(b.call(c,f,e,a))return{i:e,v:f}}return{i:-1,v:void 0}};$jscomp.ASSUME_ES5=!1;$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.ASSUME_NO_NATIVE_SET=!1;$jscomp.SIMPLE_FROUND_POLYFILL=!1;
$jscomp.defineProperty=$jscomp.ASSUME_ES5||"function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value)};$jscomp.getGlobal=function(a){return"undefined"!=typeof window&&window===a?a:"undefined"!=typeof global&&null!=global?global:a};$jscomp.global=$jscomp.getGlobal(this);
$jscomp.polyfill=function(a,b,c,d){if(b){c=$jscomp.global;a=a.split(".");for(d=0;d<a.length-1;d++){var e=a[d];e in c||(c[e]={});c=c[e]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&$jscomp.defineProperty(c,a,{configurable:!0,writable:!0,value:b})}};$jscomp.polyfill("Array.prototype.findIndex",function(a){return a?a:function(a,c){return $jscomp.findInternal(this,a,c).i}},"es6","es3");
$jscomp.checkStringArgs=function(a,b,c){if(null==a)throw new TypeError("The 'this' value for String.prototype."+c+" must not be null or undefined");if(b instanceof RegExp)throw new TypeError("First argument to String.prototype."+c+" must not be a regular expression");return a+""};
$jscomp.polyfill("String.prototype.endsWith",function(a){return a?a:function(a,c){var b=$jscomp.checkStringArgs(this,a,"endsWith");a+="";void 0===c&&(c=b.length);c=Math.max(0,Math.min(c|0,b.length));for(var e=a.length;0<e&&0<c;)if(b[--c]!=a[--e])return!1;return 0>=e}},"es6","es3");$jscomp.polyfill("Array.prototype.find",function(a){return a?a:function(a,c){return $jscomp.findInternal(this,a,c).v}},"es6","es3");
$jscomp.polyfill("String.prototype.startsWith",function(a){return a?a:function(a,c){var b=$jscomp.checkStringArgs(this,a,"startsWith");a+="";var e=b.length,f=a.length;c=Math.max(0,Math.min(c|0,b.length));for(var g=0;g<f&&c<e;)if(b[c++]!=a[g++])return!1;return g>=f}},"es6","es3");
$jscomp.polyfill("String.prototype.repeat",function(a){return a?a:function(a){var b=$jscomp.checkStringArgs(this,null,"repeat");if(0>a||1342177279<a)throw new RangeError("Invalid count value");a|=0;for(var d="";a;)if(a&1&&(d+=b),a>>>=1)b+=b;return d}},"es6","es3");var COMPILED=!0,goog=goog||{};goog.global=this||self;goog.isDef=function(a){return void 0!==a};goog.isString=function(a){return"string"==typeof a};goog.isBoolean=function(a){return"boolean"==typeof a};
goog.isNumber=function(a){return"number"==typeof a};goog.exportPath_=function(a,b,c){a=a.split(".");c=c||goog.global;a[0]in c||"undefined"==typeof c.execScript||c.execScript("var "+a[0]);for(var d;a.length&&(d=a.shift());)!a.length&&goog.isDef(b)?c[d]=b:c=c[d]&&c[d]!==Object.prototype[d]?c[d]:c[d]={}};
goog.define=function(a,b){if(!COMPILED){var c=goog.global.CLOSURE_UNCOMPILED_DEFINES,d=goog.global.CLOSURE_DEFINES;c&&void 0===c.nodeType&&Object.prototype.hasOwnProperty.call(c,a)?b=c[a]:d&&void 0===d.nodeType&&Object.prototype.hasOwnProperty.call(d,a)&&(b=d[a])}return b};goog.FEATURESET_YEAR=2012;goog.DEBUG=!0;goog.LOCALE="en";goog.TRUSTED_SITE=!0;goog.STRICT_MODE_COMPATIBLE=!1;goog.DISALLOW_TEST_ONLY_CODE=COMPILED&&!goog.DEBUG;goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING=!1;
goog.provide=function(a){if(goog.isInModuleLoader_())throw Error("goog.provide cannot be used within a module.");if(!COMPILED&&goog.isProvided_(a))throw Error('Namespace "'+a+'" already declared.');goog.constructNamespace_(a)};goog.constructNamespace_=function(a,b){if(!COMPILED){delete goog.implicitNamespaces_[a];for(var c=a;(c=c.substring(0,c.lastIndexOf(".")))&&!goog.getObjectByName(c);)goog.implicitNamespaces_[c]=!0}goog.exportPath_(a,b)};
goog.getScriptNonce=function(a){if(a&&a!=goog.global)return goog.getScriptNonce_(a.document);null===goog.cspNonce_&&(goog.cspNonce_=goog.getScriptNonce_(goog.global.document));return goog.cspNonce_};goog.NONCE_PATTERN_=/^[\w+/_-]+[=]{0,2}$/;goog.cspNonce_=null;goog.getScriptNonce_=function(a){return(a=a.querySelector&&a.querySelector("script[nonce]"))&&(a=a.nonce||a.getAttribute("nonce"))&&goog.NONCE_PATTERN_.test(a)?a:""};goog.VALID_MODULE_RE_=/^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
goog.module=function(a){if(!goog.isString(a)||!a||-1==a.search(goog.VALID_MODULE_RE_))throw Error("Invalid module identifier");if(!goog.isInGoogModuleLoader_())throw Error("Module "+a+" has been loaded incorrectly. Note, modules cannot be loaded as normal scripts. They require some kind of pre-processing step. You're likely trying to load a module via a script tag or as a part of a concatenated bundle without rewriting the module. For more info see: https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.");
if(goog.moduleLoaderState_.moduleName)throw Error("goog.module may only be called once per module.");goog.moduleLoaderState_.moduleName=a;if(!COMPILED){if(goog.isProvided_(a))throw Error('Namespace "'+a+'" already declared.');delete goog.implicitNamespaces_[a]}};goog.module.get=function(a){return goog.module.getInternal_(a)};
goog.module.getInternal_=function(a){if(!COMPILED){if(a in goog.loadedModules_)return goog.loadedModules_[a].exports;if(!goog.implicitNamespaces_[a])return a=goog.getObjectByName(a),null!=a?a:null}return null};goog.ModuleType={ES6:"es6",GOOG:"goog"};goog.moduleLoaderState_=null;goog.isInModuleLoader_=function(){return goog.isInGoogModuleLoader_()||goog.isInEs6ModuleLoader_()};goog.isInGoogModuleLoader_=function(){return!!goog.moduleLoaderState_&&goog.moduleLoaderState_.type==goog.ModuleType.GOOG};
goog.isInEs6ModuleLoader_=function(){if(goog.moduleLoaderState_&&goog.moduleLoaderState_.type==goog.ModuleType.ES6)return!0;var a=goog.global.$jscomp;return a?"function"!=typeof a.getCurrentModulePath?!1:!!a.getCurrentModulePath():!1};
goog.module.declareLegacyNamespace=function(){if(!COMPILED&&!goog.isInGoogModuleLoader_())throw Error("goog.module.declareLegacyNamespace must be called from within a goog.module");if(!COMPILED&&!goog.moduleLoaderState_.moduleName)throw Error("goog.module must be called prior to goog.module.declareLegacyNamespace.");goog.moduleLoaderState_.declareLegacyNamespace=!0};
goog.declareModuleId=function(a){if(!COMPILED){if(!goog.isInEs6ModuleLoader_())throw Error("goog.declareModuleId may only be called from within an ES6 module");if(goog.moduleLoaderState_&&goog.moduleLoaderState_.moduleName)throw Error("goog.declareModuleId may only be called once per module.");if(a in goog.loadedModules_)throw Error('Module with namespace "'+a+'" already exists.');}if(goog.moduleLoaderState_)goog.moduleLoaderState_.moduleName=a;else{var b=goog.global.$jscomp;if(!b||"function"!=typeof b.getCurrentModulePath)throw Error('Module with namespace "'+
a+'" has been loaded incorrectly.');b=b.require(b.getCurrentModulePath());goog.loadedModules_[a]={exports:b,type:goog.ModuleType.ES6,moduleId:a}}};goog.setTestOnly=function(a){if(goog.DISALLOW_TEST_ONLY_CODE)throw a=a||"",Error("Importing test-only code into non-debug environment"+(a?": "+a:"."));};goog.forwardDeclare=function(a){};
COMPILED||(goog.isProvided_=function(a){return a in goog.loadedModules_||!goog.implicitNamespaces_[a]&&goog.isDefAndNotNull(goog.getObjectByName(a))},goog.implicitNamespaces_={"goog.module":!0});goog.getObjectByName=function(a,b){a=a.split(".");b=b||goog.global;for(var c=0;c<a.length;c++)if(b=b[a[c]],!goog.isDefAndNotNull(b))return null;return b};goog.globalize=function(a,b){b=b||goog.global;for(var c in a)b[c]=a[c]};
goog.addDependency=function(a,b,c,d){!COMPILED&&goog.DEPENDENCIES_ENABLED&&goog.debugLoader_.addDependency(a,b,c,d)};goog.ENABLE_DEBUG_LOADER=!0;goog.logToConsole_=function(a){goog.global.console&&goog.global.console.error(a)};
goog.require=function(a){if(!COMPILED){goog.ENABLE_DEBUG_LOADER&&goog.debugLoader_.requested(a);if(goog.isProvided_(a)){if(goog.isInModuleLoader_())return goog.module.getInternal_(a)}else if(goog.ENABLE_DEBUG_LOADER){var b=goog.moduleLoaderState_;goog.moduleLoaderState_=null;try{goog.debugLoader_.load_(a)}finally{goog.moduleLoaderState_=b}}return null}};goog.requireType=function(a){return{}};goog.basePath="";goog.nullFunction=function(){};
goog.abstractMethod=function(){throw Error("unimplemented abstract method");};goog.addSingletonGetter=function(a){a.instance_=void 0;a.getInstance=function(){if(a.instance_)return a.instance_;goog.DEBUG&&(goog.instantiatedSingletons_[goog.instantiatedSingletons_.length]=a);return a.instance_=new a}};goog.instantiatedSingletons_=[];goog.LOAD_MODULE_USING_EVAL=!0;goog.SEAL_MODULE_EXPORTS=goog.DEBUG;goog.loadedModules_={};goog.DEPENDENCIES_ENABLED=!COMPILED&&goog.ENABLE_DEBUG_LOADER;goog.TRANSPILE="detect";
goog.ASSUME_ES_MODULES_TRANSPILED=!1;goog.TRANSPILE_TO_LANGUAGE="";goog.TRANSPILER="transpile.js";goog.hasBadLetScoping=null;goog.useSafari10Workaround=function(){if(null==goog.hasBadLetScoping){try{var a=!eval('"use strict";let x = 1; function f() { return typeof x; };f() == "number";')}catch(b){a=!1}goog.hasBadLetScoping=a}return goog.hasBadLetScoping};goog.workaroundSafari10EvalBug=function(a){return"(function(){"+a+"\n;})();\n"};
goog.loadModule=function(a){var b=goog.moduleLoaderState_;try{goog.moduleLoaderState_={moduleName:"",declareLegacyNamespace:!1,type:goog.ModuleType.GOOG};if(goog.isFunction(a))var c=a.call(void 0,{});else if(goog.isString(a))goog.useSafari10Workaround()&&(a=goog.workaroundSafari10EvalBug(a)),c=goog.loadModuleFromSource_.call(void 0,a);else throw Error("Invalid module definition");var d=goog.moduleLoaderState_.moduleName;if(goog.isString(d)&&d)goog.moduleLoaderState_.declareLegacyNamespace?goog.constructNamespace_(d,
c):goog.SEAL_MODULE_EXPORTS&&Object.seal&&"object"==typeof c&&null!=c&&Object.seal(c),goog.loadedModules_[d]={exports:c,type:goog.ModuleType.GOOG,moduleId:goog.moduleLoaderState_.moduleName};else throw Error('Invalid module name "'+d+'"');}finally{goog.moduleLoaderState_=b}};goog.loadModuleFromSource_=function(a){eval(a);return{}};goog.normalizePath_=function(a){a=a.split("/");for(var b=0;b<a.length;)"."==a[b]?a.splice(b,1):b&&".."==a[b]&&a[b-1]&&".."!=a[b-1]?a.splice(--b,2):b++;return a.join("/")};
goog.loadFileSync_=function(a){if(goog.global.CLOSURE_LOAD_FILE_SYNC)return goog.global.CLOSURE_LOAD_FILE_SYNC(a);try{var b=new goog.global.XMLHttpRequest;b.open("get",a,!1);b.send();return 0==b.status||200==b.status?b.responseText:null}catch(c){return null}};
goog.transpile_=function(a,b,c){var d=goog.global.$jscomp;d||(goog.global.$jscomp=d={});var e=d.transpile;if(!e){var f=goog.basePath+goog.TRANSPILER,g=goog.loadFileSync_(f);if(g){(function(){(0,eval)(g+"\n//# sourceURL="+f)}).call(goog.global);if(goog.global.$gwtExport&&goog.global.$gwtExport.$jscomp&&!goog.global.$gwtExport.$jscomp.transpile)throw Error('The transpiler did not properly export the "transpile" method. $gwtExport: '+JSON.stringify(goog.global.$gwtExport));goog.global.$jscomp.transpile=
goog.global.$gwtExport.$jscomp.transpile;d=goog.global.$jscomp;e=d.transpile}}e||(e=d.transpile=function(a,b){goog.logToConsole_(b+" requires transpilation but no transpiler was found.");return a});return e(a,b,c)};
goog.typeOf=function(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return"function"}else return"null";
else if("function"==b&&"undefined"==typeof a.call)return"object";return b};goog.isNull=function(a){return null===a};goog.isDefAndNotNull=function(a){return null!=a};goog.isArray=function(a){return"array"==goog.typeOf(a)};goog.isArrayLike=function(a){var b=goog.typeOf(a);return"array"==b||"object"==b&&"number"==typeof a.length};goog.isDateLike=function(a){return goog.isObject(a)&&"function"==typeof a.getFullYear};goog.isFunction=function(a){return"function"==goog.typeOf(a)};
goog.isObject=function(a){var b=typeof a;return"object"==b&&null!=a||"function"==b};goog.getUid=function(a){return a[goog.UID_PROPERTY_]||(a[goog.UID_PROPERTY_]=++goog.uidCounter_)};goog.hasUid=function(a){return!!a[goog.UID_PROPERTY_]};goog.removeUid=function(a){null!==a&&"removeAttribute"in a&&a.removeAttribute(goog.UID_PROPERTY_);try{delete a[goog.UID_PROPERTY_]}catch(b){}};goog.UID_PROPERTY_="closure_uid_"+(1E9*Math.random()>>>0);goog.uidCounter_=0;goog.getHashCode=goog.getUid;
goog.removeHashCode=goog.removeUid;goog.cloneObject=function(a){var b=goog.typeOf(a);if("object"==b||"array"==b){if("function"===typeof a.clone)return a.clone();b="array"==b?[]:{};for(var c in a)b[c]=goog.cloneObject(a[c]);return b}return a};goog.bindNative_=function(a,b,c){return a.call.apply(a.bind,arguments)};
goog.bindJs_=function(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}};goog.bind=function(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?goog.bind=goog.bindNative_:goog.bind=goog.bindJs_;return goog.bind.apply(null,arguments)};
goog.partial=function(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}};goog.mixin=function(a,b){for(var c in b)a[c]=b[c]};goog.now=goog.TRUSTED_SITE&&Date.now||function(){return+new Date};
goog.globalEval=function(a){if(goog.global.execScript)goog.global.execScript(a,"JavaScript");else if(goog.global.eval){if(null==goog.evalWorksForGlobals_){try{goog.global.eval("var _evalTest_ = 1;")}catch(d){}if("undefined"!=typeof goog.global._evalTest_){try{delete goog.global._evalTest_}catch(d){}goog.evalWorksForGlobals_=!0}else goog.evalWorksForGlobals_=!1}if(goog.evalWorksForGlobals_)goog.global.eval(a);else{var b=goog.global.document,c=b.createElement("SCRIPT");c.type="text/javascript";c.defer=
!1;c.appendChild(b.createTextNode(a));b.head.appendChild(c);b.head.removeChild(c)}}else throw Error("goog.globalEval not available");};goog.evalWorksForGlobals_=null;
goog.getCssName=function(a,b){if("."==String(a).charAt(0))throw Error('className passed in goog.getCssName must not start with ".". You passed: '+a);var c=function(a){return goog.cssNameMapping_[a]||a},d=function(a){a=a.split("-");for(var b=[],d=0;d<a.length;d++)b.push(c(a[d]));return b.join("-")};d=goog.cssNameMapping_?"BY_WHOLE"==goog.cssNameMappingStyle_?c:d:function(a){return a};a=b?a+"-"+d(b):d(a);return goog.global.CLOSURE_CSS_NAME_MAP_FN?goog.global.CLOSURE_CSS_NAME_MAP_FN(a):a};
goog.setCssNameMapping=function(a,b){goog.cssNameMapping_=a;goog.cssNameMappingStyle_=b};!COMPILED&&goog.global.CLOSURE_CSS_NAME_MAPPING&&(goog.cssNameMapping_=goog.global.CLOSURE_CSS_NAME_MAPPING);goog.getMsg=function(a,b,c){c&&c.html&&(a=a.replace(/</g,"&lt;"));b&&(a=a.replace(/\{\$([^}]+)}/g,function(a,c){return null!=b&&c in b?b[c]:a}));return a};goog.getMsgWithFallback=function(a,b){return a};goog.exportSymbol=function(a,b,c){goog.exportPath_(a,b,c)};
goog.exportProperty=function(a,b,c){a[b]=c};goog.inherits=function(a,b){function c(){}c.prototype=b.prototype;a.superClass_=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.base=function(a,c,f){for(var d=Array(arguments.length-2),e=2;e<arguments.length;e++)d[e-2]=arguments[e];return b.prototype[c].apply(a,d)}};
goog.base=function(a,b,c){var d=arguments.callee.caller;if(goog.STRICT_MODE_COMPATIBLE||goog.DEBUG&&!d)throw Error("arguments.caller not defined.  goog.base() cannot be used with strict mode code. See http://www.ecma-international.org/ecma-262/5.1/#sec-C");if("undefined"!==typeof d.superClass_){for(var e=Array(arguments.length-1),f=1;f<arguments.length;f++)e[f-1]=arguments[f];return d.superClass_.constructor.apply(a,e)}if("string"!=typeof b&&"symbol"!=typeof b)throw Error("method names provided to goog.base must be a string or a symbol");
e=Array(arguments.length-2);for(f=2;f<arguments.length;f++)e[f-2]=arguments[f];f=!1;for(var g=a.constructor.prototype;g;g=Object.getPrototypeOf(g))if(g[b]===d)f=!0;else if(f)return g[b].apply(a,e);if(a[b]===d)return a.constructor.prototype[b].apply(a,e);throw Error("goog.base called from a method of one name to a method of a different name");};goog.scope=function(a){if(goog.isInModuleLoader_())throw Error("goog.scope is not supported within a module.");a.call(goog.global)};
COMPILED||(goog.global.COMPILED=COMPILED);goog.defineClass=function(a,b){var c=b.constructor,d=b.statics;c&&c!=Object.prototype.constructor||(c=function(){throw Error("cannot instantiate an interface (no constructor defined).");});c=goog.defineClass.createSealingConstructor_(c,a);a&&goog.inherits(c,a);delete b.constructor;delete b.statics;goog.defineClass.applyProperties_(c.prototype,b);null!=d&&(d instanceof Function?d(c):goog.defineClass.applyProperties_(c,d));return c};
goog.defineClass.SEAL_CLASS_INSTANCES=goog.DEBUG;goog.defineClass.createSealingConstructor_=function(a,b){if(!goog.defineClass.SEAL_CLASS_INSTANCES)return a;var c=!goog.defineClass.isUnsealable_(b),d=function(){var b=a.apply(this,arguments)||this;b[goog.UID_PROPERTY_]=b[goog.UID_PROPERTY_];this.constructor===d&&c&&Object.seal instanceof Function&&Object.seal(b);return b};return d};goog.defineClass.isUnsealable_=function(a){return a&&a.prototype&&a.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");goog.defineClass.applyProperties_=function(a,b){for(var c in b)Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c]);for(var d=0;d<goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;d++)c=goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[d],Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c])};
goog.tagUnsealableClass=function(a){!COMPILED&&goog.defineClass.SEAL_CLASS_INSTANCES&&(a.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]=!0)};goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_="goog_defineClass_legacy_unsealable";
!COMPILED&&goog.DEPENDENCIES_ENABLED&&(goog.inHtmlDocument_=function(){var a=goog.global.document;return null!=a&&"write"in a},goog.isDocumentLoading_=function(){var a=goog.global.document;return a.attachEvent?"complete"!=a.readyState:"loading"==a.readyState},goog.findBasePath_=function(){if(goog.isDef(goog.global.CLOSURE_BASE_PATH)&&goog.isString(goog.global.CLOSURE_BASE_PATH))goog.basePath=goog.global.CLOSURE_BASE_PATH;else if(goog.inHtmlDocument_()){var a=goog.global.document,b=a.currentScript;
a=b?[b]:a.getElementsByTagName("SCRIPT");for(b=a.length-1;0<=b;--b){var c=a[b].src,d=c.lastIndexOf("?");d=-1==d?c.length:d;if("base.js"==c.substr(d-7,7)){goog.basePath=c.substr(0,d-7);break}}}},goog.findBasePath_(),goog.Transpiler=function(){this.requiresTranspilation_=null;this.transpilationTarget_=goog.TRANSPILE_TO_LANGUAGE},goog.Transpiler.prototype.createRequiresTranspilation_=function(){function a(a,b){e?d[a]=!0:b()?(c=a,d[a]=!1):e=d[a]=!0}function b(a){try{return!!eval(a)}catch(h){return!1}}
var c="es3",d={es3:!1},e=!1,f=goog.global.navigator&&goog.global.navigator.userAgent?goog.global.navigator.userAgent:"";a("es5",function(){return b("[1,].length==1")});a("es6",function(){return f.match(/Edge\/(\d+)(\.\d)*/i)?!1:b('(()=>{"use strict";class X{constructor(){if(new.target!=String)throw 1;this.x=42}}let q=Reflect.construct(X,[],String);if(q.x!=42||!(q instanceof String))throw 1;for(const a of[2,3]){if(a==2)continue;function f(z={a}){let a=0;return z.a}{function f(){return 0;}}return f()==3}})()')});
a("es7",function(){return b("2 ** 2 == 4")});a("es8",function(){return b("async () => 1, true")});a("es9",function(){return b("({...rest} = {}), true")});a("es_next",function(){return!1});return{target:c,map:d}},goog.Transpiler.prototype.needsTranspile=function(a,b){if("always"==goog.TRANSPILE)return!0;if("never"==goog.TRANSPILE)return!1;if(!this.requiresTranspilation_){var c=this.createRequiresTranspilation_();this.requiresTranspilation_=c.map;this.transpilationTarget_=this.transpilationTarget_||
c.target}if(a in this.requiresTranspilation_)return this.requiresTranspilation_[a]?!0:!goog.inHtmlDocument_()||"es6"!=b||"noModule"in goog.global.document.createElement("script")?!1:!0;throw Error("Unknown language mode: "+a);},goog.Transpiler.prototype.transpile=function(a,b){return goog.transpile_(a,b,this.transpilationTarget_)},goog.transpiler_=new goog.Transpiler,goog.protectScriptTag_=function(a){return a.replace(/<\/(SCRIPT)/ig,"\\x3c/$1")},goog.DebugLoader_=function(){this.dependencies_={};
this.idToPath_={};this.written_={};this.loadingDeps_=[];this.depsToLoad_=[];this.paused_=!1;this.factory_=new goog.DependencyFactory(goog.transpiler_);this.deferredCallbacks_={};this.deferredQueue_=[]},goog.DebugLoader_.prototype.bootstrap=function(a,b){function c(){d&&(goog.global.setTimeout(d,0),d=null)}var d=b;if(a.length){b=[];for(var e=0;e<a.length;e++){var f=this.getPathFromDeps_(a[e]);if(!f)throw Error("Unregonized namespace: "+a[e]);b.push(this.dependencies_[f])}f=goog.require;var g=0;for(e=
0;e<a.length;e++)f(a[e]),b[e].onLoad(function(){++g==a.length&&c()})}else c()},goog.DebugLoader_.prototype.loadClosureDeps=function(){this.depsToLoad_.push(this.factory_.createDependency(goog.normalizePath_(goog.basePath+"deps.js"),"deps.js",[],[],{},!1));this.loadDeps_()},goog.DebugLoader_.prototype.requested=function(a,b){(a=this.getPathFromDeps_(a))&&(b||this.areDepsLoaded_(this.dependencies_[a].requires))&&(b=this.deferredCallbacks_[a])&&(delete this.deferredCallbacks_[a],b())},goog.DebugLoader_.prototype.setDependencyFactory=
function(a){this.factory_=a},goog.DebugLoader_.prototype.load_=function(a){if(this.getPathFromDeps_(a)){var b=this,c=[],d=function(a){var e=b.getPathFromDeps_(a);if(!e)throw Error("Bad dependency path or symbol: "+a);if(!b.written_[e]){b.written_[e]=!0;a=b.dependencies_[e];for(e=0;e<a.requires.length;e++)goog.isProvided_(a.requires[e])||d(a.requires[e]);c.push(a)}};d(a);a=!!this.depsToLoad_.length;this.depsToLoad_=this.depsToLoad_.concat(c);this.paused_||a||this.loadDeps_()}else throw a="goog.require could not find: "+
a,goog.logToConsole_(a),Error(a);},goog.DebugLoader_.prototype.loadDeps_=function(){for(var a=this,b=this.paused_;this.depsToLoad_.length&&!b;)(function(){var c=!1,d=a.depsToLoad_.shift(),e=!1;a.loading_(d);var f={pause:function(){if(c)throw Error("Cannot call pause after the call to load.");b=!0},resume:function(){c?a.resume_():b=!1},loaded:function(){if(e)throw Error("Double call to loaded.");e=!0;a.loaded_(d)},pending:function(){for(var b=[],c=0;c<a.loadingDeps_.length;c++)b.push(a.loadingDeps_[c]);
return b},setModuleState:function(a){goog.moduleLoaderState_={type:a,moduleName:"",declareLegacyNamespace:!1}},registerEs6ModuleExports:function(a,b,c){c&&(goog.loadedModules_[c]={exports:b,type:goog.ModuleType.ES6,moduleId:c||""})},registerGoogModuleExports:function(a,b){goog.loadedModules_[a]={exports:b,type:goog.ModuleType.GOOG,moduleId:a}},clearModuleState:function(){goog.moduleLoaderState_=null},defer:function(b){if(c)throw Error("Cannot register with defer after the call to load.");a.defer_(d,
b)},areDepsLoaded:function(){return a.areDepsLoaded_(d.requires)}};try{d.load(f)}finally{c=!0}})();b&&this.pause_()},goog.DebugLoader_.prototype.pause_=function(){this.paused_=!0},goog.DebugLoader_.prototype.resume_=function(){this.paused_&&(this.paused_=!1,this.loadDeps_())},goog.DebugLoader_.prototype.loading_=function(a){this.loadingDeps_.push(a)},goog.DebugLoader_.prototype.loaded_=function(a){for(var b=0;b<this.loadingDeps_.length;b++)if(this.loadingDeps_[b]==a){this.loadingDeps_.splice(b,1);
break}for(b=0;b<this.deferredQueue_.length;b++)if(this.deferredQueue_[b]==a.path){this.deferredQueue_.splice(b,1);break}if(this.loadingDeps_.length==this.deferredQueue_.length&&!this.depsToLoad_.length)for(;this.deferredQueue_.length;)this.requested(this.deferredQueue_.shift(),!0);a.loaded()},goog.DebugLoader_.prototype.areDepsLoaded_=function(a){for(var b=0;b<a.length;b++){var c=this.getPathFromDeps_(a[b]);if(!c||!(c in this.deferredCallbacks_||goog.isProvided_(a[b])))return!1}return!0},goog.DebugLoader_.prototype.getPathFromDeps_=
function(a){return a in this.idToPath_?this.idToPath_[a]:a in this.dependencies_?a:null},goog.DebugLoader_.prototype.defer_=function(a,b){this.deferredCallbacks_[a.path]=b;this.deferredQueue_.push(a.path)},goog.LoadController=function(){},goog.LoadController.prototype.pause=function(){},goog.LoadController.prototype.resume=function(){},goog.LoadController.prototype.loaded=function(){},goog.LoadController.prototype.pending=function(){},goog.LoadController.prototype.registerEs6ModuleExports=function(a,
b,c){},goog.LoadController.prototype.setModuleState=function(a){},goog.LoadController.prototype.clearModuleState=function(){},goog.LoadController.prototype.defer=function(a){},goog.LoadController.prototype.areDepsLoaded=function(){},goog.Dependency=function(a,b,c,d,e){this.path=a;this.relativePath=b;this.provides=c;this.requires=d;this.loadFlags=e;this.loaded_=!1;this.loadCallbacks_=[]},goog.Dependency.prototype.getPathName=function(){var a=this.path,b=a.indexOf("://");0<=b&&(a=a.substring(b+3),b=
a.indexOf("/"),0<=b&&(a=a.substring(b+1)));return a},goog.Dependency.prototype.onLoad=function(a){this.loaded_?a():this.loadCallbacks_.push(a)},goog.Dependency.prototype.loaded=function(){this.loaded_=!0;var a=this.loadCallbacks_;this.loadCallbacks_=[];for(var b=0;b<a.length;b++)a[b]()},goog.Dependency.defer_=!1,goog.Dependency.callbackMap_={},goog.Dependency.registerCallback_=function(a){var b=Math.random().toString(32);goog.Dependency.callbackMap_[b]=a;return b},goog.Dependency.unregisterCallback_=
function(a){delete goog.Dependency.callbackMap_[a]},goog.Dependency.callback_=function(a,b){if(a in goog.Dependency.callbackMap_){for(var c=goog.Dependency.callbackMap_[a],d=[],e=1;e<arguments.length;e++)d.push(arguments[e]);c.apply(void 0,d)}else throw Error("Callback key "+a+" does not exist (was base.js loaded more than once?).");},goog.Dependency.prototype.load=function(a){if(goog.global.CLOSURE_IMPORT_SCRIPT)goog.global.CLOSURE_IMPORT_SCRIPT(this.path)?a.loaded():a.pause();else if(goog.inHtmlDocument_()){var b=
goog.global.document;if("complete"==b.readyState&&!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING){if(/\bdeps.js$/.test(this.path)){a.loaded();return}throw Error('Cannot write "'+this.path+'" after document load');}if(!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING&&goog.isDocumentLoading_()){var c=goog.Dependency.registerCallback_(function(b){goog.DebugLoader_.IS_OLD_IE_&&"complete"!=b.readyState||(goog.Dependency.unregisterCallback_(c),a.loaded())}),d=!goog.DebugLoader_.IS_OLD_IE_&&goog.getScriptNonce()?
' nonce="'+goog.getScriptNonce()+'"':"";d='<script src="'+this.path+'" '+(goog.DebugLoader_.IS_OLD_IE_?"onreadystatechange":"onload")+"=\"goog.Dependency.callback_('"+c+'\', this)" type="text/javascript" '+(goog.Dependency.defer_?"defer":"")+d+">\x3c/script>";b.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(d):d)}else{var e=b.createElement("script");e.defer=goog.Dependency.defer_;e.async=!1;e.type="text/javascript";(d=goog.getScriptNonce())&&e.setAttribute("nonce",d);goog.DebugLoader_.IS_OLD_IE_?
(a.pause(),e.onreadystatechange=function(){if("loaded"==e.readyState||"complete"==e.readyState)a.loaded(),a.resume()}):e.onload=function(){e.onload=null;a.loaded()};e.src=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScriptURL(this.path):this.path;b.head.appendChild(e)}}else goog.logToConsole_("Cannot use default debug loader outside of HTML documents."),"deps.js"==this.relativePath?(goog.logToConsole_("Consider setting CLOSURE_IMPORT_SCRIPT before loading base.js, or setting CLOSURE_NO_DEPS to true."),
a.loaded()):a.pause()},goog.Es6ModuleDependency=function(a,b,c,d,e){goog.Dependency.call(this,a,b,c,d,e)},goog.inherits(goog.Es6ModuleDependency,goog.Dependency),goog.Es6ModuleDependency.prototype.load=function(a){function b(a,b){a=b?'<script type="module" crossorigin>'+b+"\x3c/script>":'<script type="module" crossorigin src="'+a+'">\x3c/script>';d.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(a):a)}function c(a,b){var c=d.createElement("script");c.defer=!0;c.async=!1;c.type=
"module";c.setAttribute("crossorigin",!0);var e=goog.getScriptNonce();e&&c.setAttribute("nonce",e);b?c.textContent=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScript(b):b:c.src=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScriptURL(a):a;d.head.appendChild(c)}if(goog.global.CLOSURE_IMPORT_SCRIPT)goog.global.CLOSURE_IMPORT_SCRIPT(this.path)?a.loaded():a.pause();else if(goog.inHtmlDocument_()){var d=goog.global.document,e=this;if(goog.isDocumentLoading_()){var f=b;goog.Dependency.defer_=
!0}else f=c;var g=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(g);a.setModuleState(goog.ModuleType.ES6)});f(void 0,'goog.Dependency.callback_("'+g+'")');f(this.path,void 0);var h=goog.Dependency.registerCallback_(function(b){goog.Dependency.unregisterCallback_(h);a.registerEs6ModuleExports(e.path,b,goog.moduleLoaderState_.moduleName)});f(void 0,'import * as m from "'+this.path+'"; goog.Dependency.callback_("'+h+'", m)');var k=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(k);
a.clearModuleState();a.loaded()});f(void 0,'goog.Dependency.callback_("'+k+'")')}else goog.logToConsole_("Cannot use default debug loader outside of HTML documents."),a.pause()},goog.TransformedDependency=function(a,b,c,d,e){goog.Dependency.call(this,a,b,c,d,e);this.contents_=null;this.lazyFetch_=!goog.inHtmlDocument_()||!("noModule"in goog.global.document.createElement("script"))},goog.inherits(goog.TransformedDependency,goog.Dependency),goog.TransformedDependency.prototype.load=function(a){function b(){e.contents_=
goog.loadFileSync_(e.path);e.contents_&&(e.contents_=e.transform(e.contents_),e.contents_&&(e.contents_+="\n//# sourceURL="+e.path))}function c(){e.lazyFetch_&&b();if(e.contents_){f&&a.setModuleState(goog.ModuleType.ES6);try{var c=e.contents_;e.contents_=null;goog.globalEval(c);if(f)var d=goog.moduleLoaderState_.moduleName}finally{f&&a.clearModuleState()}f&&goog.global.$jscomp.require.ensure([e.getPathName()],function(){a.registerEs6ModuleExports(e.path,goog.global.$jscomp.require(e.getPathName()),
d)});a.loaded()}}function d(){var a=goog.global.document,b=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(b);c()}),d='<script type="text/javascript">'+goog.protectScriptTag_('goog.Dependency.callback_("'+b+'");')+"\x3c/script>";a.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(d):d)}var e=this;if(goog.global.CLOSURE_IMPORT_SCRIPT)b(),this.contents_&&goog.global.CLOSURE_IMPORT_SCRIPT("",this.contents_)?(this.contents_=null,a.loaded()):a.pause();
else{var f=this.loadFlags.module==goog.ModuleType.ES6;this.lazyFetch_||b();var g=1<a.pending().length,h=g&&goog.DebugLoader_.IS_OLD_IE_;g=goog.Dependency.defer_&&(g||goog.isDocumentLoading_());if(h||g)a.defer(function(){c()});else{var k=goog.global.document;h=goog.inHtmlDocument_()&&"ActiveXObject"in goog.global;if(f&&goog.inHtmlDocument_()&&goog.isDocumentLoading_()&&!h){goog.Dependency.defer_=!0;a.pause();var l=k.onreadystatechange;k.onreadystatechange=function(){"interactive"==k.readyState&&(k.onreadystatechange=
l,c(),a.resume());goog.isFunction(l)&&l.apply(void 0,arguments)}}else!goog.DebugLoader_.IS_OLD_IE_&&goog.inHtmlDocument_()&&goog.isDocumentLoading_()?d():c()}}},goog.TransformedDependency.prototype.transform=function(a){},goog.TranspiledDependency=function(a,b,c,d,e,f){goog.TransformedDependency.call(this,a,b,c,d,e);this.transpiler=f},goog.inherits(goog.TranspiledDependency,goog.TransformedDependency),goog.TranspiledDependency.prototype.transform=function(a){return this.transpiler.transpile(a,this.getPathName())},
goog.PreTranspiledEs6ModuleDependency=function(a,b,c,d,e){goog.TransformedDependency.call(this,a,b,c,d,e)},goog.inherits(goog.PreTranspiledEs6ModuleDependency,goog.TransformedDependency),goog.PreTranspiledEs6ModuleDependency.prototype.transform=function(a){return a},goog.GoogModuleDependency=function(a,b,c,d,e,f,g){goog.TransformedDependency.call(this,a,b,c,d,e);this.needsTranspile_=f;this.transpiler_=g},goog.inherits(goog.GoogModuleDependency,goog.TransformedDependency),goog.GoogModuleDependency.prototype.transform=
function(a){this.needsTranspile_&&(a=this.transpiler_.transpile(a,this.getPathName()));return goog.LOAD_MODULE_USING_EVAL&&goog.isDef(goog.global.JSON)?"goog.loadModule("+goog.global.JSON.stringify(a+"\n//# sourceURL="+this.path+"\n")+");":'goog.loadModule(function(exports) {"use strict";'+a+"\n;return exports});\n//# sourceURL="+this.path+"\n"},goog.DebugLoader_.IS_OLD_IE_=!(goog.global.atob||!goog.global.document||!goog.global.document.all),goog.DebugLoader_.prototype.addDependency=function(a,b,
c,d){b=b||[];a=a.replace(/\\/g,"/");var e=goog.normalizePath_(goog.basePath+a);d&&"boolean"!==typeof d||(d=d?{module:goog.ModuleType.GOOG}:{});c=this.factory_.createDependency(e,a,b,c,d,goog.transpiler_.needsTranspile(d.lang||"es3",d.module));this.dependencies_[e]=c;for(c=0;c<b.length;c++)this.idToPath_[b[c]]=e;this.idToPath_[a]=e},goog.DependencyFactory=function(a){this.transpiler=a},goog.DependencyFactory.prototype.createDependency=function(a,b,c,d,e,f){return e.module==goog.ModuleType.GOOG?new goog.GoogModuleDependency(a,
b,c,d,e,f,this.transpiler):f?new goog.TranspiledDependency(a,b,c,d,e,this.transpiler):e.module==goog.ModuleType.ES6?"never"==goog.TRANSPILE&&goog.ASSUME_ES_MODULES_TRANSPILED?new goog.PreTranspiledEs6ModuleDependency(a,b,c,d,e):new goog.Es6ModuleDependency(a,b,c,d,e):new goog.Dependency(a,b,c,d,e)},goog.debugLoader_=new goog.DebugLoader_,goog.loadClosureDeps=function(){goog.debugLoader_.loadClosureDeps()},goog.setDependencyFactory=function(a){goog.debugLoader_.setDependencyFactory(a)},goog.global.CLOSURE_NO_DEPS||
goog.debugLoader_.loadClosureDeps(),goog.bootstrap=function(a,b){goog.debugLoader_.bootstrap(a,b)});goog.TRUSTED_TYPES_POLICY_NAME="";goog.identity_=function(a){return a};goog.createTrustedTypesPolicy=function(a){var b=null;if("undefined"===typeof TrustedTypes||!TrustedTypes.createPolicy)return b;try{b=TrustedTypes.createPolicy(a,{createHTML:goog.identity_,createScript:goog.identity_,createScriptURL:goog.identity_,createURL:goog.identity_})}catch(c){goog.logToConsole_(c.message)}return b};
goog.TRUSTED_TYPES_POLICY_=goog.TRUSTED_TYPES_POLICY_NAME?goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME+"#base"):null;goog.object={};goog.object.is=function(a,b){return a===b?0!==a||1/a===1/b:a!==a&&b!==b};goog.object.forEach=function(a,b,c){for(var d in a)b.call(c,a[d],d,a)};goog.object.filter=function(a,b,c){var d={},e;for(e in a)b.call(c,a[e],e,a)&&(d[e]=a[e]);return d};goog.object.map=function(a,b,c){var d={},e;for(e in a)d[e]=b.call(c,a[e],e,a);return d};goog.object.some=function(a,b,c){for(var d in a)if(b.call(c,a[d],d,a))return!0;return!1};
goog.object.every=function(a,b,c){for(var d in a)if(!b.call(c,a[d],d,a))return!1;return!0};goog.object.getCount=function(a){var b=0,c;for(c in a)b++;return b};goog.object.getAnyKey=function(a){for(var b in a)return b};goog.object.getAnyValue=function(a){for(var b in a)return a[b]};goog.object.contains=function(a,b){return goog.object.containsValue(a,b)};goog.object.getValues=function(a){var b=[],c=0,d;for(d in a)b[c++]=a[d];return b};
goog.object.getKeys=function(a){var b=[],c=0,d;for(d in a)b[c++]=d;return b};goog.object.getValueByKeys=function(a,b){var c=goog.isArrayLike(b),d=c?b:arguments;for(c=c?0:1;c<d.length;c++){if(null==a)return;a=a[d[c]]}return a};goog.object.containsKey=function(a,b){return null!==a&&b in a};goog.object.containsValue=function(a,b){for(var c in a)if(a[c]==b)return!0;return!1};goog.object.findKey=function(a,b,c){for(var d in a)if(b.call(c,a[d],d,a))return d};
goog.object.findValue=function(a,b,c){return(b=goog.object.findKey(a,b,c))&&a[b]};goog.object.isEmpty=function(a){for(var b in a)return!1;return!0};goog.object.clear=function(a){for(var b in a)delete a[b]};goog.object.remove=function(a,b){var c;(c=b in a)&&delete a[b];return c};goog.object.add=function(a,b,c){if(null!==a&&b in a)throw Error('The object already contains the key "'+b+'"');goog.object.set(a,b,c)};goog.object.get=function(a,b,c){return null!==a&&b in a?a[b]:c};
goog.object.set=function(a,b,c){a[b]=c};goog.object.setIfUndefined=function(a,b,c){return b in a?a[b]:a[b]=c};goog.object.setWithReturnValueIfNotSet=function(a,b,c){if(b in a)return a[b];c=c();return a[b]=c};goog.object.equals=function(a,b){for(var c in a)if(!(c in b)||a[c]!==b[c])return!1;for(var d in b)if(!(d in a))return!1;return!0};goog.object.clone=function(a){var b={},c;for(c in a)b[c]=a[c];return b};
goog.object.unsafeClone=function(a){var b=goog.typeOf(a);if("object"==b||"array"==b){if(goog.isFunction(a.clone))return a.clone();b="array"==b?[]:{};for(var c in a)b[c]=goog.object.unsafeClone(a[c]);return b}return a};goog.object.transpose=function(a){var b={},c;for(c in a)b[a[c]]=c;return b};goog.object.PROTOTYPE_FIELDS_="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
goog.object.extend=function(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<goog.object.PROTOTYPE_FIELDS_.length;f++)c=goog.object.PROTOTYPE_FIELDS_[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};
goog.object.create=function(a){var b=arguments.length;if(1==b&&goog.isArray(arguments[0]))return goog.object.create.apply(null,arguments[0]);if(b%2)throw Error("Uneven number of arguments");for(var c={},d=0;d<b;d+=2)c[arguments[d]]=arguments[d+1];return c};goog.object.createSet=function(a){var b=arguments.length;if(1==b&&goog.isArray(arguments[0]))return goog.object.createSet.apply(null,arguments[0]);for(var c={},d=0;d<b;d++)c[arguments[d]]=!0;return c};
goog.object.createImmutableView=function(a){var b=a;Object.isFrozen&&!Object.isFrozen(a)&&(b=Object.create(a),Object.freeze(b));return b};goog.object.isImmutableView=function(a){return!!Object.isFrozen&&Object.isFrozen(a)};
goog.object.getAllPropertyNames=function(a,b,c){if(!a)return[];if(!Object.getOwnPropertyNames||!Object.getPrototypeOf)return goog.object.getKeys(a);for(var d={};a&&(a!==Object.prototype||b)&&(a!==Function.prototype||c);){for(var e=Object.getOwnPropertyNames(a),f=0;f<e.length;f++)d[e[f]]=!0;a=Object.getPrototypeOf(a)}return goog.object.getKeys(d)};goog.object.getSuperClass=function(a){return(a=Object.getPrototypeOf(a.prototype))&&a.constructor};goog.debug={};goog.debug.Error=function(a){if(Error.captureStackTrace)Error.captureStackTrace(this,goog.debug.Error);else{var b=Error().stack;b&&(this.stack=b)}a&&(this.message=String(a));this.reportErrorToServer=!0};goog.inherits(goog.debug.Error,Error);goog.debug.Error.prototype.name="CustomError";goog.dom={};goog.dom.NodeType={ELEMENT:1,ATTRIBUTE:2,TEXT:3,CDATA_SECTION:4,ENTITY_REFERENCE:5,ENTITY:6,PROCESSING_INSTRUCTION:7,COMMENT:8,DOCUMENT:9,DOCUMENT_TYPE:10,DOCUMENT_FRAGMENT:11,NOTATION:12};goog.asserts={};goog.asserts.ENABLE_ASSERTS=goog.DEBUG;goog.asserts.AssertionError=function(a,b){goog.debug.Error.call(this,goog.asserts.subs_(a,b));this.messagePattern=a};goog.inherits(goog.asserts.AssertionError,goog.debug.Error);goog.asserts.AssertionError.prototype.name="AssertionError";goog.asserts.DEFAULT_ERROR_HANDLER=function(a){throw a;};goog.asserts.errorHandler_=goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.subs_=function(a,b){a=a.split("%s");for(var c="",d=a.length-1,e=0;e<d;e++)c+=a[e]+(e<b.length?b[e]:"%s");return c+a[d]};goog.asserts.doAssertFailure_=function(a,b,c,d){var e="Assertion failed";if(c){e+=": "+c;var f=d}else a&&(e+=": "+a,f=b);a=new goog.asserts.AssertionError(""+e,f||[]);goog.asserts.errorHandler_(a)};goog.asserts.setErrorHandler=function(a){goog.asserts.ENABLE_ASSERTS&&(goog.asserts.errorHandler_=a)};
goog.asserts.assert=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!a&&goog.asserts.doAssertFailure_("",null,b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertExists=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&null==a&&goog.asserts.doAssertFailure_("Expected to exist: %s.",[a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.fail=function(a,b){goog.asserts.ENABLE_ASSERTS&&goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure"+(a?": "+a:""),Array.prototype.slice.call(arguments,1)))};goog.asserts.assertNumber=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isNumber(a)&&goog.asserts.doAssertFailure_("Expected number but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.assertString=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isString(a)&&goog.asserts.doAssertFailure_("Expected string but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertFunction=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isFunction(a)&&goog.asserts.doAssertFailure_("Expected function but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.assertObject=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isObject(a)&&goog.asserts.doAssertFailure_("Expected object but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertArray=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isArray(a)&&goog.asserts.doAssertFailure_("Expected array but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.assertBoolean=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isBoolean(a)&&goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertElement=function(a,b,c){!goog.asserts.ENABLE_ASSERTS||goog.isObject(a)&&a.nodeType==goog.dom.NodeType.ELEMENT||goog.asserts.doAssertFailure_("Expected Element but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.assertInstanceof=function(a,b,c,d){!goog.asserts.ENABLE_ASSERTS||a instanceof b||goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.",[goog.asserts.getType_(b),goog.asserts.getType_(a)],c,Array.prototype.slice.call(arguments,3));return a};goog.asserts.assertFinite=function(a,b,c){!goog.asserts.ENABLE_ASSERTS||"number"==typeof a&&isFinite(a)||goog.asserts.doAssertFailure_("Expected %s to be a finite number but it is not.",[a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.assertObjectPrototypeIsIntact=function(){for(var a in Object.prototype)goog.asserts.fail(a+" should not be enumerable in Object.prototype.")};goog.asserts.getType_=function(a){return a instanceof Function?a.displayName||a.name||"unknown type name":a instanceof Object?a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a):null===a?"null":typeof a};var jspb={BinaryConstants:{},ConstBinaryMessage:function(){},BinaryMessage:function(){}};jspb.BinaryConstants.FieldType={INVALID:-1,DOUBLE:1,FLOAT:2,INT64:3,UINT64:4,INT32:5,FIXED64:6,FIXED32:7,BOOL:8,STRING:9,GROUP:10,MESSAGE:11,BYTES:12,UINT32:13,ENUM:14,SFIXED32:15,SFIXED64:16,SINT32:17,SINT64:18,FHASH64:30,VHASH64:31};jspb.BinaryConstants.WireType={INVALID:-1,VARINT:0,FIXED64:1,DELIMITED:2,START_GROUP:3,END_GROUP:4,FIXED32:5};
jspb.BinaryConstants.FieldTypeToWireType=function(a){var b=jspb.BinaryConstants.FieldType,c=jspb.BinaryConstants.WireType;switch(a){case b.INT32:case b.INT64:case b.UINT32:case b.UINT64:case b.SINT32:case b.SINT64:case b.BOOL:case b.ENUM:case b.VHASH64:return c.VARINT;case b.DOUBLE:case b.FIXED64:case b.SFIXED64:case b.FHASH64:return c.FIXED64;case b.STRING:case b.MESSAGE:case b.BYTES:return c.DELIMITED;case b.FLOAT:case b.FIXED32:case b.SFIXED32:return c.FIXED32;default:return c.INVALID}};
jspb.BinaryConstants.INVALID_FIELD_NUMBER=-1;jspb.BinaryConstants.FLOAT32_EPS=1.401298464324817E-45;jspb.BinaryConstants.FLOAT32_MIN=1.1754943508222875E-38;jspb.BinaryConstants.FLOAT32_MAX=3.4028234663852886E38;jspb.BinaryConstants.FLOAT64_EPS=4.9E-324;jspb.BinaryConstants.FLOAT64_MIN=2.2250738585072014E-308;jspb.BinaryConstants.FLOAT64_MAX=1.7976931348623157E308;jspb.BinaryConstants.TWO_TO_20=1048576;jspb.BinaryConstants.TWO_TO_23=8388608;jspb.BinaryConstants.TWO_TO_31=2147483648;
jspb.BinaryConstants.TWO_TO_32=4294967296;jspb.BinaryConstants.TWO_TO_52=4503599627370496;jspb.BinaryConstants.TWO_TO_63=0x7fffffffffffffff;jspb.BinaryConstants.TWO_TO_64=1.8446744073709552E19;jspb.BinaryConstants.ZERO_HASH="\x00\x00\x00\x00\x00\x00\x00\x00";goog.array={};goog.NATIVE_ARRAY_PROTOTYPES=goog.TRUSTED_SITE;goog.array.ASSUME_NATIVE_FUNCTIONS=2012<goog.FEATURESET_YEAR;goog.array.peek=function(a){return a[a.length-1]};goog.array.last=goog.array.peek;
goog.array.indexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.indexOf)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.indexOf.call(a,b,c)}:function(a,b,c){c=null==c?0:0>c?Math.max(0,a.length+c):c;if(goog.isString(a))return goog.isString(b)&&1==b.length?a.indexOf(b,c):-1;for(;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1};
goog.array.lastIndexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.lastIndexOf)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.lastIndexOf.call(a,b,null==c?a.length-1:c)}:function(a,b,c){c=null==c?a.length-1:c;0>c&&(c=Math.max(0,a.length+c));if(goog.isString(a))return goog.isString(b)&&1==b.length?a.lastIndexOf(b,c):-1;for(;0<=c;c--)if(c in a&&a[c]===b)return c;return-1};
goog.array.forEach=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.forEach)?function(a,b,c){goog.asserts.assert(null!=a.length);Array.prototype.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)};goog.array.forEachRight=function(a,b,c){var d=a.length,e=goog.isString(a)?a.split(""):a;for(--d;0<=d;--d)d in e&&b.call(c,e[d],d,a)};
goog.array.filter=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.filter)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.filter.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=[],f=0,g=goog.isString(a)?a.split(""):a,h=0;h<d;h++)if(h in g){var k=g[h];b.call(c,k,h,a)&&(e[f++]=k)}return e};
goog.array.map=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.map)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.map.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=Array(d),f=goog.isString(a)?a.split(""):a,g=0;g<d;g++)g in f&&(e[g]=b.call(c,f[g],g,a));return e};
goog.array.reduce=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduce)?function(a,b,c,d){goog.asserts.assert(null!=a.length);d&&(b=goog.bind(b,d));return Array.prototype.reduce.call(a,b,c)}:function(a,b,c,d){var e=c;goog.array.forEach(a,function(c,g){e=b.call(d,e,c,g,a)});return e};
goog.array.reduceRight=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduceRight)?function(a,b,c,d){goog.asserts.assert(null!=a.length);goog.asserts.assert(null!=b);d&&(b=goog.bind(b,d));return Array.prototype.reduceRight.call(a,b,c)}:function(a,b,c,d){var e=c;goog.array.forEachRight(a,function(c,g){e=b.call(d,e,c,g,a)});return e};
goog.array.some=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.some)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.some.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return!0;return!1};
goog.array.every=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.every)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.every.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&!b.call(c,e[f],f,a))return!1;return!0};goog.array.count=function(a,b,c){var d=0;goog.array.forEach(a,function(a,f,g){b.call(c,a,f,g)&&++d},c);return d};
goog.array.find=function(a,b,c){b=goog.array.findIndex(a,b,c);return 0>b?null:goog.isString(a)?a.charAt(b):a[b]};goog.array.findIndex=function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return f;return-1};goog.array.findRight=function(a,b,c){b=goog.array.findIndexRight(a,b,c);return 0>b?null:goog.isString(a)?a.charAt(b):a[b]};
goog.array.findIndexRight=function(a,b,c){var d=a.length,e=goog.isString(a)?a.split(""):a;for(--d;0<=d;d--)if(d in e&&b.call(c,e[d],d,a))return d;return-1};goog.array.contains=function(a,b){return 0<=goog.array.indexOf(a,b)};goog.array.isEmpty=function(a){return 0==a.length};goog.array.clear=function(a){if(!goog.isArray(a))for(var b=a.length-1;0<=b;b--)delete a[b];a.length=0};goog.array.insert=function(a,b){goog.array.contains(a,b)||a.push(b)};
goog.array.insertAt=function(a,b,c){goog.array.splice(a,c,0,b)};goog.array.insertArrayAt=function(a,b,c){goog.partial(goog.array.splice,a,c,0).apply(null,b)};goog.array.insertBefore=function(a,b,c){var d;2==arguments.length||0>(d=goog.array.indexOf(a,c))?a.push(b):goog.array.insertAt(a,b,d)};goog.array.remove=function(a,b){b=goog.array.indexOf(a,b);var c;(c=0<=b)&&goog.array.removeAt(a,b);return c};
goog.array.removeLast=function(a,b){b=goog.array.lastIndexOf(a,b);return 0<=b?(goog.array.removeAt(a,b),!0):!1};goog.array.removeAt=function(a,b){goog.asserts.assert(null!=a.length);return 1==Array.prototype.splice.call(a,b,1).length};goog.array.removeIf=function(a,b,c){b=goog.array.findIndex(a,b,c);return 0<=b?(goog.array.removeAt(a,b),!0):!1};goog.array.removeAllIf=function(a,b,c){var d=0;goog.array.forEachRight(a,function(e,f){b.call(c,e,f,a)&&goog.array.removeAt(a,f)&&d++});return d};
goog.array.concat=function(a){return Array.prototype.concat.apply([],arguments)};goog.array.join=function(a){return Array.prototype.concat.apply([],arguments)};goog.array.toArray=function(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return[]};goog.array.clone=goog.array.toArray;goog.array.extend=function(a,b){for(var c=1;c<arguments.length;c++){var d=arguments[c];if(goog.isArrayLike(d)){var e=a.length||0,f=d.length||0;a.length=e+f;for(var g=0;g<f;g++)a[e+g]=d[g]}else a.push(d)}};
goog.array.splice=function(a,b,c,d){goog.asserts.assert(null!=a.length);return Array.prototype.splice.apply(a,goog.array.slice(arguments,1))};goog.array.slice=function(a,b,c){goog.asserts.assert(null!=a.length);return 2>=arguments.length?Array.prototype.slice.call(a,b):Array.prototype.slice.call(a,b,c)};
goog.array.removeDuplicates=function(a,b,c){b=b||a;var d=function(a){return goog.isObject(a)?"o"+goog.getUid(a):(typeof a).charAt(0)+a};c=c||d;d={};for(var e=0,f=0;f<a.length;){var g=a[f++],h=c(g);Object.prototype.hasOwnProperty.call(d,h)||(d[h]=!0,b[e++]=g)}b.length=e};goog.array.binarySearch=function(a,b,c){return goog.array.binarySearch_(a,c||goog.array.defaultCompare,!1,b)};goog.array.binarySelect=function(a,b,c){return goog.array.binarySearch_(a,b,!0,void 0,c)};
goog.array.binarySearch_=function(a,b,c,d,e){for(var f=0,g=a.length,h;f<g;){var k=f+g>>1;var l=c?b.call(e,a[k],k,a):b(d,a[k]);0<l?f=k+1:(g=k,h=!l)}return h?f:~f};goog.array.sort=function(a,b){a.sort(b||goog.array.defaultCompare)};goog.array.stableSort=function(a,b){for(var c=Array(a.length),d=0;d<a.length;d++)c[d]={index:d,value:a[d]};var e=b||goog.array.defaultCompare;goog.array.sort(c,function(a,b){return e(a.value,b.value)||a.index-b.index});for(d=0;d<a.length;d++)a[d]=c[d].value};
goog.array.sortByKey=function(a,b,c){var d=c||goog.array.defaultCompare;goog.array.sort(a,function(a,c){return d(b(a),b(c))})};goog.array.sortObjectsByKey=function(a,b,c){goog.array.sortByKey(a,function(a){return a[b]},c)};goog.array.isSorted=function(a,b,c){b=b||goog.array.defaultCompare;for(var d=1;d<a.length;d++){var e=b(a[d-1],a[d]);if(0<e||0==e&&c)return!1}return!0};
goog.array.equals=function(a,b,c){if(!goog.isArrayLike(a)||!goog.isArrayLike(b)||a.length!=b.length)return!1;var d=a.length;c=c||goog.array.defaultCompareEquality;for(var e=0;e<d;e++)if(!c(a[e],b[e]))return!1;return!0};goog.array.compare3=function(a,b,c){c=c||goog.array.defaultCompare;for(var d=Math.min(a.length,b.length),e=0;e<d;e++){var f=c(a[e],b[e]);if(0!=f)return f}return goog.array.defaultCompare(a.length,b.length)};goog.array.defaultCompare=function(a,b){return a>b?1:a<b?-1:0};
goog.array.inverseDefaultCompare=function(a,b){return-goog.array.defaultCompare(a,b)};goog.array.defaultCompareEquality=function(a,b){return a===b};goog.array.binaryInsert=function(a,b,c){c=goog.array.binarySearch(a,b,c);return 0>c?(goog.array.insertAt(a,b,-(c+1)),!0):!1};goog.array.binaryRemove=function(a,b,c){b=goog.array.binarySearch(a,b,c);return 0<=b?goog.array.removeAt(a,b):!1};
goog.array.bucket=function(a,b,c){for(var d={},e=0;e<a.length;e++){var f=a[e],g=b.call(c,f,e,a);goog.isDef(g)&&(d[g]||(d[g]=[])).push(f)}return d};goog.array.toObject=function(a,b,c){var d={};goog.array.forEach(a,function(e,f){d[b.call(c,e,f,a)]=e});return d};goog.array.range=function(a,b,c){var d=[],e=0,f=a;c=c||1;void 0!==b&&(e=a,f=b);if(0>c*(f-e))return[];if(0<c)for(a=e;a<f;a+=c)d.push(a);else for(a=e;a>f;a+=c)d.push(a);return d};
goog.array.repeat=function(a,b){for(var c=[],d=0;d<b;d++)c[d]=a;return c};goog.array.flatten=function(a){for(var b=[],c=0;c<arguments.length;c++){var d=arguments[c];if(goog.isArray(d))for(var e=0;e<d.length;e+=8192){var f=goog.array.slice(d,e,e+8192);f=goog.array.flatten.apply(null,f);for(var g=0;g<f.length;g++)b.push(f[g])}else b.push(d)}return b};
goog.array.rotate=function(a,b){goog.asserts.assert(null!=a.length);a.length&&(b%=a.length,0<b?Array.prototype.unshift.apply(a,a.splice(-b,b)):0>b&&Array.prototype.push.apply(a,a.splice(0,-b)));return a};goog.array.moveItem=function(a,b,c){goog.asserts.assert(0<=b&&b<a.length);goog.asserts.assert(0<=c&&c<a.length);b=Array.prototype.splice.call(a,b,1);Array.prototype.splice.call(a,c,0,b[0])};
goog.array.zip=function(a){if(!arguments.length)return[];for(var b=[],c=arguments[0].length,d=1;d<arguments.length;d++)arguments[d].length<c&&(c=arguments[d].length);for(d=0;d<c;d++){for(var e=[],f=0;f<arguments.length;f++)e.push(arguments[f][d]);b.push(e)}return b};goog.array.shuffle=function(a,b){b=b||Math.random;for(var c=a.length-1;0<c;c--){var d=Math.floor(b()*(c+1)),e=a[c];a[c]=a[d];a[d]=e}};goog.array.copyByIndex=function(a,b){var c=[];goog.array.forEach(b,function(b){c.push(a[b])});return c};
goog.array.concatMap=function(a,b,c){return goog.array.concat.apply([],goog.array.map(a,b,c))};goog.crypt={};goog.crypt.stringToByteArray=function(a){for(var b=[],c=0,d=0;d<a.length;d++){var e=a.charCodeAt(d);255<e&&(b[c++]=e&255,e>>=8);b[c++]=e}return b};goog.crypt.byteArrayToString=function(a){if(8192>=a.length)return String.fromCharCode.apply(null,a);for(var b="",c=0;c<a.length;c+=8192){var d=goog.array.slice(a,c,c+8192);b+=String.fromCharCode.apply(null,d)}return b};
goog.crypt.byteArrayToHex=function(a,b){return goog.array.map(a,function(a){a=a.toString(16);return 1<a.length?a:"0"+a}).join(b||"")};goog.crypt.hexToByteArray=function(a){goog.asserts.assert(0==a.length%2,"Key string length must be multiple of 2");for(var b=[],c=0;c<a.length;c+=2)b.push(parseInt(a.substring(c,c+2),16));return b};
goog.crypt.stringToUtf8ByteArray=function(a){for(var b=[],c=0,d=0;d<a.length;d++){var e=a.charCodeAt(d);128>e?b[c++]=e:(2048>e?b[c++]=e>>6|192:(55296==(e&64512)&&d+1<a.length&&56320==(a.charCodeAt(d+1)&64512)?(e=65536+((e&1023)<<10)+(a.charCodeAt(++d)&1023),b[c++]=e>>18|240,b[c++]=e>>12&63|128):b[c++]=e>>12|224,b[c++]=e>>6&63|128),b[c++]=e&63|128)}return b};
goog.crypt.utf8ByteArrayToString=function(a){for(var b=[],c=0,d=0;c<a.length;){var e=a[c++];if(128>e)b[d++]=String.fromCharCode(e);else if(191<e&&224>e){var f=a[c++];b[d++]=String.fromCharCode((e&31)<<6|f&63)}else if(239<e&&365>e){f=a[c++];var g=a[c++],h=a[c++];e=((e&7)<<18|(f&63)<<12|(g&63)<<6|h&63)-65536;b[d++]=String.fromCharCode(55296+(e>>10));b[d++]=String.fromCharCode(56320+(e&1023))}else f=a[c++],g=a[c++],b[d++]=String.fromCharCode((e&15)<<12|(f&63)<<6|g&63)}return b.join("")};
goog.crypt.xorByteArray=function(a,b){goog.asserts.assert(a.length==b.length,"XOR array lengths must match");for(var c=[],d=0;d<a.length;d++)c.push(a[d]^b[d]);return c};goog.dom.asserts={};goog.dom.asserts.assertIsLocation=function(a){if(goog.asserts.ENABLE_ASSERTS){var b=goog.dom.asserts.getWindow_(a);b&&(!a||!(a instanceof b.Location)&&a instanceof b.Element)&&goog.asserts.fail("Argument is not a Location (or a non-Element mock); got: %s",goog.dom.asserts.debugStringForType_(a))}return a};
goog.dom.asserts.assertIsElementType_=function(a,b){if(goog.asserts.ENABLE_ASSERTS){var c=goog.dom.asserts.getWindow_(a);c&&"undefined"!=typeof c[b]&&(a&&(a instanceof c[b]||!(a instanceof c.Location||a instanceof c.Element))||goog.asserts.fail("Argument is not a %s (or a non-Element, non-Location mock); got: %s",b,goog.dom.asserts.debugStringForType_(a)))}return a};goog.dom.asserts.assertIsHTMLAnchorElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLAnchorElement")};
goog.dom.asserts.assertIsHTMLButtonElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLButtonElement")};goog.dom.asserts.assertIsHTMLLinkElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLLinkElement")};goog.dom.asserts.assertIsHTMLImageElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLImageElement")};goog.dom.asserts.assertIsHTMLAudioElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLAudioElement")};
goog.dom.asserts.assertIsHTMLVideoElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLVideoElement")};goog.dom.asserts.assertIsHTMLInputElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLInputElement")};goog.dom.asserts.assertIsHTMLTextAreaElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLTextAreaElement")};goog.dom.asserts.assertIsHTMLCanvasElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLCanvasElement")};
goog.dom.asserts.assertIsHTMLEmbedElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLEmbedElement")};goog.dom.asserts.assertIsHTMLFormElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLFormElement")};goog.dom.asserts.assertIsHTMLFrameElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLFrameElement")};goog.dom.asserts.assertIsHTMLIFrameElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLIFrameElement")};
goog.dom.asserts.assertIsHTMLObjectElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLObjectElement")};goog.dom.asserts.assertIsHTMLScriptElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLScriptElement")};
goog.dom.asserts.debugStringForType_=function(a){if(goog.isObject(a))try{return a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a)}catch(b){return"<object could not be stringified>"}else return void 0===a?"undefined":null===a?"null":typeof a};goog.dom.asserts.getWindow_=function(a){try{var b=a&&a.ownerDocument,c=b&&(b.defaultView||b.parentWindow);c=c||goog.global;if(c.Element&&c.Location)return c}catch(d){}return null};goog.functions={};goog.functions.constant=function(a){return function(){return a}};goog.functions.FALSE=function(){return!1};goog.functions.TRUE=function(){return!0};goog.functions.NULL=function(){return null};goog.functions.identity=function(a,b){return a};goog.functions.error=function(a){return function(){throw Error(a);}};goog.functions.fail=function(a){return function(){throw a;}};
goog.functions.lock=function(a,b){b=b||0;return function(){return a.apply(this,Array.prototype.slice.call(arguments,0,b))}};goog.functions.nth=function(a){return function(){return arguments[a]}};goog.functions.partialRight=function(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=Array.prototype.slice.call(arguments);b.push.apply(b,c);return a.apply(this,b)}};goog.functions.withReturnValue=function(a,b){return goog.functions.sequence(a,goog.functions.constant(b))};
goog.functions.equalTo=function(a,b){return function(c){return b?a==c:a===c}};goog.functions.compose=function(a,b){var c=arguments,d=c.length;return function(){var a;d&&(a=c[d-1].apply(this,arguments));for(var b=d-2;0<=b;b--)a=c[b].call(this,a);return a}};goog.functions.sequence=function(a){var b=arguments,c=b.length;return function(){for(var a,e=0;e<c;e++)a=b[e].apply(this,arguments);return a}};
goog.functions.and=function(a){var b=arguments,c=b.length;return function(){for(var a=0;a<c;a++)if(!b[a].apply(this,arguments))return!1;return!0}};goog.functions.or=function(a){var b=arguments,c=b.length;return function(){for(var a=0;a<c;a++)if(b[a].apply(this,arguments))return!0;return!1}};goog.functions.not=function(a){return function(){return!a.apply(this,arguments)}};
goog.functions.create=function(a,b){var c=function(){};c.prototype=a.prototype;c=new c;a.apply(c,Array.prototype.slice.call(arguments,1));return c};goog.functions.CACHE_RETURN_VALUE=!0;goog.functions.cacheReturnValue=function(a){var b=!1,c;return function(){if(!goog.functions.CACHE_RETURN_VALUE)return a();b||(c=a(),b=!0);return c}};goog.functions.once=function(a){var b=a;return function(){if(b){var a=b;b=null;a()}}};
goog.functions.debounce=function(a,b,c){var d=0;return function(e){goog.global.clearTimeout(d);var f=arguments;d=goog.global.setTimeout(function(){a.apply(c,f)},b)}};goog.functions.throttle=function(a,b,c){var d=0,e=!1,f=[],g=function(){d=0;e&&(e=!1,h())},h=function(){d=goog.global.setTimeout(g,b);a.apply(c,f)};return function(a){f=arguments;d?e=!0:h()}};goog.functions.rateLimit=function(a,b,c){var d=0,e=function(){d=0};return function(f){d||(d=goog.global.setTimeout(e,b),a.apply(c,arguments))}};goog.dom.HtmlElement=function(){};goog.dom.TagName=function(a){this.tagName_=a};goog.dom.TagName.prototype.toString=function(){return this.tagName_};goog.dom.TagName.A=new goog.dom.TagName("A");goog.dom.TagName.ABBR=new goog.dom.TagName("ABBR");goog.dom.TagName.ACRONYM=new goog.dom.TagName("ACRONYM");goog.dom.TagName.ADDRESS=new goog.dom.TagName("ADDRESS");goog.dom.TagName.APPLET=new goog.dom.TagName("APPLET");goog.dom.TagName.AREA=new goog.dom.TagName("AREA");goog.dom.TagName.ARTICLE=new goog.dom.TagName("ARTICLE");
goog.dom.TagName.ASIDE=new goog.dom.TagName("ASIDE");goog.dom.TagName.AUDIO=new goog.dom.TagName("AUDIO");goog.dom.TagName.B=new goog.dom.TagName("B");goog.dom.TagName.BASE=new goog.dom.TagName("BASE");goog.dom.TagName.BASEFONT=new goog.dom.TagName("BASEFONT");goog.dom.TagName.BDI=new goog.dom.TagName("BDI");goog.dom.TagName.BDO=new goog.dom.TagName("BDO");goog.dom.TagName.BIG=new goog.dom.TagName("BIG");goog.dom.TagName.BLOCKQUOTE=new goog.dom.TagName("BLOCKQUOTE");goog.dom.TagName.BODY=new goog.dom.TagName("BODY");
goog.dom.TagName.BR=new goog.dom.TagName("BR");goog.dom.TagName.BUTTON=new goog.dom.TagName("BUTTON");goog.dom.TagName.CANVAS=new goog.dom.TagName("CANVAS");goog.dom.TagName.CAPTION=new goog.dom.TagName("CAPTION");goog.dom.TagName.CENTER=new goog.dom.TagName("CENTER");goog.dom.TagName.CITE=new goog.dom.TagName("CITE");goog.dom.TagName.CODE=new goog.dom.TagName("CODE");goog.dom.TagName.COL=new goog.dom.TagName("COL");goog.dom.TagName.COLGROUP=new goog.dom.TagName("COLGROUP");
goog.dom.TagName.COMMAND=new goog.dom.TagName("COMMAND");goog.dom.TagName.DATA=new goog.dom.TagName("DATA");goog.dom.TagName.DATALIST=new goog.dom.TagName("DATALIST");goog.dom.TagName.DD=new goog.dom.TagName("DD");goog.dom.TagName.DEL=new goog.dom.TagName("DEL");goog.dom.TagName.DETAILS=new goog.dom.TagName("DETAILS");goog.dom.TagName.DFN=new goog.dom.TagName("DFN");goog.dom.TagName.DIALOG=new goog.dom.TagName("DIALOG");goog.dom.TagName.DIR=new goog.dom.TagName("DIR");goog.dom.TagName.DIV=new goog.dom.TagName("DIV");
goog.dom.TagName.DL=new goog.dom.TagName("DL");goog.dom.TagName.DT=new goog.dom.TagName("DT");goog.dom.TagName.EM=new goog.dom.TagName("EM");goog.dom.TagName.EMBED=new goog.dom.TagName("EMBED");goog.dom.TagName.FIELDSET=new goog.dom.TagName("FIELDSET");goog.dom.TagName.FIGCAPTION=new goog.dom.TagName("FIGCAPTION");goog.dom.TagName.FIGURE=new goog.dom.TagName("FIGURE");goog.dom.TagName.FONT=new goog.dom.TagName("FONT");goog.dom.TagName.FOOTER=new goog.dom.TagName("FOOTER");goog.dom.TagName.FORM=new goog.dom.TagName("FORM");
goog.dom.TagName.FRAME=new goog.dom.TagName("FRAME");goog.dom.TagName.FRAMESET=new goog.dom.TagName("FRAMESET");goog.dom.TagName.H1=new goog.dom.TagName("H1");goog.dom.TagName.H2=new goog.dom.TagName("H2");goog.dom.TagName.H3=new goog.dom.TagName("H3");goog.dom.TagName.H4=new goog.dom.TagName("H4");goog.dom.TagName.H5=new goog.dom.TagName("H5");goog.dom.TagName.H6=new goog.dom.TagName("H6");goog.dom.TagName.HEAD=new goog.dom.TagName("HEAD");goog.dom.TagName.HEADER=new goog.dom.TagName("HEADER");
goog.dom.TagName.HGROUP=new goog.dom.TagName("HGROUP");goog.dom.TagName.HR=new goog.dom.TagName("HR");goog.dom.TagName.HTML=new goog.dom.TagName("HTML");goog.dom.TagName.I=new goog.dom.TagName("I");goog.dom.TagName.IFRAME=new goog.dom.TagName("IFRAME");goog.dom.TagName.IMG=new goog.dom.TagName("IMG");goog.dom.TagName.INPUT=new goog.dom.TagName("INPUT");goog.dom.TagName.INS=new goog.dom.TagName("INS");goog.dom.TagName.ISINDEX=new goog.dom.TagName("ISINDEX");goog.dom.TagName.KBD=new goog.dom.TagName("KBD");
goog.dom.TagName.KEYGEN=new goog.dom.TagName("KEYGEN");goog.dom.TagName.LABEL=new goog.dom.TagName("LABEL");goog.dom.TagName.LEGEND=new goog.dom.TagName("LEGEND");goog.dom.TagName.LI=new goog.dom.TagName("LI");goog.dom.TagName.LINK=new goog.dom.TagName("LINK");goog.dom.TagName.MAIN=new goog.dom.TagName("MAIN");goog.dom.TagName.MAP=new goog.dom.TagName("MAP");goog.dom.TagName.MARK=new goog.dom.TagName("MARK");goog.dom.TagName.MATH=new goog.dom.TagName("MATH");goog.dom.TagName.MENU=new goog.dom.TagName("MENU");
goog.dom.TagName.MENUITEM=new goog.dom.TagName("MENUITEM");goog.dom.TagName.META=new goog.dom.TagName("META");goog.dom.TagName.METER=new goog.dom.TagName("METER");goog.dom.TagName.NAV=new goog.dom.TagName("NAV");goog.dom.TagName.NOFRAMES=new goog.dom.TagName("NOFRAMES");goog.dom.TagName.NOSCRIPT=new goog.dom.TagName("NOSCRIPT");goog.dom.TagName.OBJECT=new goog.dom.TagName("OBJECT");goog.dom.TagName.OL=new goog.dom.TagName("OL");goog.dom.TagName.OPTGROUP=new goog.dom.TagName("OPTGROUP");
goog.dom.TagName.OPTION=new goog.dom.TagName("OPTION");goog.dom.TagName.OUTPUT=new goog.dom.TagName("OUTPUT");goog.dom.TagName.P=new goog.dom.TagName("P");goog.dom.TagName.PARAM=new goog.dom.TagName("PARAM");goog.dom.TagName.PICTURE=new goog.dom.TagName("PICTURE");goog.dom.TagName.PRE=new goog.dom.TagName("PRE");goog.dom.TagName.PROGRESS=new goog.dom.TagName("PROGRESS");goog.dom.TagName.Q=new goog.dom.TagName("Q");goog.dom.TagName.RP=new goog.dom.TagName("RP");goog.dom.TagName.RT=new goog.dom.TagName("RT");
goog.dom.TagName.RTC=new goog.dom.TagName("RTC");goog.dom.TagName.RUBY=new goog.dom.TagName("RUBY");goog.dom.TagName.S=new goog.dom.TagName("S");goog.dom.TagName.SAMP=new goog.dom.TagName("SAMP");goog.dom.TagName.SCRIPT=new goog.dom.TagName("SCRIPT");goog.dom.TagName.SECTION=new goog.dom.TagName("SECTION");goog.dom.TagName.SELECT=new goog.dom.TagName("SELECT");goog.dom.TagName.SMALL=new goog.dom.TagName("SMALL");goog.dom.TagName.SOURCE=new goog.dom.TagName("SOURCE");goog.dom.TagName.SPAN=new goog.dom.TagName("SPAN");
goog.dom.TagName.STRIKE=new goog.dom.TagName("STRIKE");goog.dom.TagName.STRONG=new goog.dom.TagName("STRONG");goog.dom.TagName.STYLE=new goog.dom.TagName("STYLE");goog.dom.TagName.SUB=new goog.dom.TagName("SUB");goog.dom.TagName.SUMMARY=new goog.dom.TagName("SUMMARY");goog.dom.TagName.SUP=new goog.dom.TagName("SUP");goog.dom.TagName.SVG=new goog.dom.TagName("SVG");goog.dom.TagName.TABLE=new goog.dom.TagName("TABLE");goog.dom.TagName.TBODY=new goog.dom.TagName("TBODY");goog.dom.TagName.TD=new goog.dom.TagName("TD");
goog.dom.TagName.TEMPLATE=new goog.dom.TagName("TEMPLATE");goog.dom.TagName.TEXTAREA=new goog.dom.TagName("TEXTAREA");goog.dom.TagName.TFOOT=new goog.dom.TagName("TFOOT");goog.dom.TagName.TH=new goog.dom.TagName("TH");goog.dom.TagName.THEAD=new goog.dom.TagName("THEAD");goog.dom.TagName.TIME=new goog.dom.TagName("TIME");goog.dom.TagName.TITLE=new goog.dom.TagName("TITLE");goog.dom.TagName.TR=new goog.dom.TagName("TR");goog.dom.TagName.TRACK=new goog.dom.TagName("TRACK");goog.dom.TagName.TT=new goog.dom.TagName("TT");
goog.dom.TagName.U=new goog.dom.TagName("U");goog.dom.TagName.UL=new goog.dom.TagName("UL");goog.dom.TagName.VAR=new goog.dom.TagName("VAR");goog.dom.TagName.VIDEO=new goog.dom.TagName("VIDEO");goog.dom.TagName.WBR=new goog.dom.TagName("WBR");goog.dom.tags={};goog.dom.tags.VOID_TAGS_={area:!0,base:!0,br:!0,col:!0,command:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0};goog.dom.tags.isVoidTag=function(a){return!0===goog.dom.tags.VOID_TAGS_[a]};goog.html={};goog.html.trustedtypes={};goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY=goog.TRUSTED_TYPES_POLICY_NAME?goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME+"#html"):null;goog.string={};goog.string.TypedString=function(){};goog.string.Const=function(a,b){this.stringConstValueWithSecurityContract__googStringSecurityPrivate_=a===goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_&&b||"";this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_=goog.string.Const.TYPE_MARKER_};goog.string.Const.prototype.implementsGoogStringTypedString=!0;goog.string.Const.prototype.getTypedStringValue=function(){return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_};
goog.string.Const.prototype.toString=function(){return"Const{"+this.stringConstValueWithSecurityContract__googStringSecurityPrivate_+"}"};goog.string.Const.unwrap=function(a){if(a instanceof goog.string.Const&&a.constructor===goog.string.Const&&a.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_===goog.string.Const.TYPE_MARKER_)return a.stringConstValueWithSecurityContract__googStringSecurityPrivate_;goog.asserts.fail("expected object of type Const, got '"+a+"'");return"type_error:Const"};
goog.string.Const.from=function(a){return new goog.string.Const(goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_,a)};goog.string.Const.TYPE_MARKER_={};goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_={};goog.string.Const.EMPTY=goog.string.Const.from("");goog.html.SafeScript=function(){this.privateDoNotAccessOrElseSafeScriptWrappedValue_="";this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.SafeScript.prototype.implementsGoogStringTypedString=!0;goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};goog.html.SafeScript.fromConstant=function(a){a=goog.string.Const.unwrap(a);return 0===a.length?goog.html.SafeScript.EMPTY:goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeScript.fromConstantAndArgs=function(a,b){for(var c=[],d=1;d<arguments.length;d++)c.push(goog.html.SafeScript.stringify_(arguments[d]));return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("("+goog.string.Const.unwrap(a)+")("+c.join(", ")+");")};goog.html.SafeScript.fromJson=function(a){return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(goog.html.SafeScript.stringify_(a))};goog.html.SafeScript.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeScriptWrappedValue_.toString()};
goog.DEBUG&&(goog.html.SafeScript.prototype.toString=function(){return"SafeScript{"+this.privateDoNotAccessOrElseSafeScriptWrappedValue_+"}"});goog.html.SafeScript.unwrap=function(a){return goog.html.SafeScript.unwrapTrustedScript(a).toString()};
goog.html.SafeScript.unwrapTrustedScript=function(a){if(a instanceof goog.html.SafeScript&&a.constructor===goog.html.SafeScript&&a.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeScriptWrappedValue_;goog.asserts.fail("expected object of type SafeScript, got '"+a+"' of type "+goog.typeOf(a));return"type_error:SafeScript"};
goog.html.SafeScript.stringify_=function(a){return JSON.stringify(a).replace(/</g,"\\x3c")};goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse=function(a){return(new goog.html.SafeScript).initSecurityPrivateDoNotAccessOrElse_(a)};
goog.html.SafeScript.prototype.initSecurityPrivateDoNotAccessOrElse_=function(a){this.privateDoNotAccessOrElseSafeScriptWrappedValue_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createScript(a):a;return this};goog.html.SafeScript.EMPTY=goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("");goog.fs={};goog.fs.url={};goog.fs.url.createObjectUrl=function(a){return goog.fs.url.getUrlObject_().createObjectURL(a)};goog.fs.url.revokeObjectUrl=function(a){goog.fs.url.getUrlObject_().revokeObjectURL(a)};goog.fs.url.getUrlObject_=function(){var a=goog.fs.url.findUrlObject_();if(null!=a)return a;throw Error("This browser doesn't seem to support blob URLs");};
goog.fs.url.findUrlObject_=function(){return goog.isDef(goog.global.URL)&&goog.isDef(goog.global.URL.createObjectURL)?goog.global.URL:goog.isDef(goog.global.webkitURL)&&goog.isDef(goog.global.webkitURL.createObjectURL)?goog.global.webkitURL:goog.isDef(goog.global.createObjectURL)?goog.global:null};goog.fs.url.browserSupportsObjectUrls=function(){return null!=goog.fs.url.findUrlObject_()};goog.i18n={};goog.i18n.bidi={};goog.i18n.bidi.FORCE_RTL=!1;
goog.i18n.bidi.IS_RTL=goog.i18n.bidi.FORCE_RTL||("ar"==goog.LOCALE.substring(0,2).toLowerCase()||"fa"==goog.LOCALE.substring(0,2).toLowerCase()||"he"==goog.LOCALE.substring(0,2).toLowerCase()||"iw"==goog.LOCALE.substring(0,2).toLowerCase()||"ps"==goog.LOCALE.substring(0,2).toLowerCase()||"sd"==goog.LOCALE.substring(0,2).toLowerCase()||"ug"==goog.LOCALE.substring(0,2).toLowerCase()||"ur"==goog.LOCALE.substring(0,2).toLowerCase()||"yi"==goog.LOCALE.substring(0,2).toLowerCase())&&(2==goog.LOCALE.length||
"-"==goog.LOCALE.substring(2,3)||"_"==goog.LOCALE.substring(2,3))||3<=goog.LOCALE.length&&"ckb"==goog.LOCALE.substring(0,3).toLowerCase()&&(3==goog.LOCALE.length||"-"==goog.LOCALE.substring(3,4)||"_"==goog.LOCALE.substring(3,4))||7<=goog.LOCALE.length&&("-"==goog.LOCALE.substring(2,3)||"_"==goog.LOCALE.substring(2,3))&&("adlm"==goog.LOCALE.substring(3,7).toLowerCase()||"arab"==goog.LOCALE.substring(3,7).toLowerCase()||"hebr"==goog.LOCALE.substring(3,7).toLowerCase()||"nkoo"==goog.LOCALE.substring(3,
7).toLowerCase()||"rohg"==goog.LOCALE.substring(3,7).toLowerCase()||"thaa"==goog.LOCALE.substring(3,7).toLowerCase())||8<=goog.LOCALE.length&&("-"==goog.LOCALE.substring(3,4)||"_"==goog.LOCALE.substring(3,4))&&("adlm"==goog.LOCALE.substring(4,8).toLowerCase()||"arab"==goog.LOCALE.substring(4,8).toLowerCase()||"hebr"==goog.LOCALE.substring(4,8).toLowerCase()||"nkoo"==goog.LOCALE.substring(4,8).toLowerCase()||"rohg"==goog.LOCALE.substring(4,8).toLowerCase()||"thaa"==goog.LOCALE.substring(4,8).toLowerCase());
goog.i18n.bidi.Format={LRE:"\u202a",RLE:"\u202b",PDF:"\u202c",LRM:"\u200e",RLM:"\u200f"};goog.i18n.bidi.Dir={LTR:1,RTL:-1,NEUTRAL:0};goog.i18n.bidi.RIGHT="right";goog.i18n.bidi.LEFT="left";goog.i18n.bidi.I18N_RIGHT=goog.i18n.bidi.IS_RTL?goog.i18n.bidi.LEFT:goog.i18n.bidi.RIGHT;goog.i18n.bidi.I18N_LEFT=goog.i18n.bidi.IS_RTL?goog.i18n.bidi.RIGHT:goog.i18n.bidi.LEFT;
goog.i18n.bidi.toDir=function(a,b){return"number"==typeof a?0<a?goog.i18n.bidi.Dir.LTR:0>a?goog.i18n.bidi.Dir.RTL:b?null:goog.i18n.bidi.Dir.NEUTRAL:null==a?null:a?goog.i18n.bidi.Dir.RTL:goog.i18n.bidi.Dir.LTR};goog.i18n.bidi.ltrChars_="A-Za-z\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u0300-\u0590\u0900-\u1fff\u200e\u2c00-\ud801\ud804-\ud839\ud83c-\udbff\uf900-\ufb1c\ufe00-\ufe6f\ufefd-\uffff";goog.i18n.bidi.rtlChars_="\u0591-\u06ef\u06fa-\u08ff\u200f\ud802-\ud803\ud83a-\ud83b\ufb1d-\ufdff\ufe70-\ufefc";
goog.i18n.bidi.htmlSkipReg_=/<[^>]*>|&[^;]+;/g;goog.i18n.bidi.stripHtmlIfNeeded_=function(a,b){return b?a.replace(goog.i18n.bidi.htmlSkipReg_,""):a};goog.i18n.bidi.rtlCharReg_=new RegExp("["+goog.i18n.bidi.rtlChars_+"]");goog.i18n.bidi.ltrCharReg_=new RegExp("["+goog.i18n.bidi.ltrChars_+"]");goog.i18n.bidi.hasAnyRtl=function(a,b){return goog.i18n.bidi.rtlCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.hasRtlChar=goog.i18n.bidi.hasAnyRtl;
goog.i18n.bidi.hasAnyLtr=function(a,b){return goog.i18n.bidi.ltrCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.ltrRe_=new RegExp("^["+goog.i18n.bidi.ltrChars_+"]");goog.i18n.bidi.rtlRe_=new RegExp("^["+goog.i18n.bidi.rtlChars_+"]");goog.i18n.bidi.isRtlChar=function(a){return goog.i18n.bidi.rtlRe_.test(a)};goog.i18n.bidi.isLtrChar=function(a){return goog.i18n.bidi.ltrRe_.test(a)};goog.i18n.bidi.isNeutralChar=function(a){return!goog.i18n.bidi.isLtrChar(a)&&!goog.i18n.bidi.isRtlChar(a)};
goog.i18n.bidi.ltrDirCheckRe_=new RegExp("^[^"+goog.i18n.bidi.rtlChars_+"]*["+goog.i18n.bidi.ltrChars_+"]");goog.i18n.bidi.rtlDirCheckRe_=new RegExp("^[^"+goog.i18n.bidi.ltrChars_+"]*["+goog.i18n.bidi.rtlChars_+"]");goog.i18n.bidi.startsWithRtl=function(a,b){return goog.i18n.bidi.rtlDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.isRtlText=goog.i18n.bidi.startsWithRtl;
goog.i18n.bidi.startsWithLtr=function(a,b){return goog.i18n.bidi.ltrDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.isLtrText=goog.i18n.bidi.startsWithLtr;goog.i18n.bidi.isRequiredLtrRe_=/^http:\/\/.*/;goog.i18n.bidi.isNeutralText=function(a,b){a=goog.i18n.bidi.stripHtmlIfNeeded_(a,b);return goog.i18n.bidi.isRequiredLtrRe_.test(a)||!goog.i18n.bidi.hasAnyLtr(a)&&!goog.i18n.bidi.hasAnyRtl(a)};
goog.i18n.bidi.ltrExitDirCheckRe_=new RegExp("["+goog.i18n.bidi.ltrChars_+"][^"+goog.i18n.bidi.rtlChars_+"]*$");goog.i18n.bidi.rtlExitDirCheckRe_=new RegExp("["+goog.i18n.bidi.rtlChars_+"][^"+goog.i18n.bidi.ltrChars_+"]*$");goog.i18n.bidi.endsWithLtr=function(a,b){return goog.i18n.bidi.ltrExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.isLtrExitText=goog.i18n.bidi.endsWithLtr;
goog.i18n.bidi.endsWithRtl=function(a,b){return goog.i18n.bidi.rtlExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.isRtlExitText=goog.i18n.bidi.endsWithRtl;goog.i18n.bidi.rtlLocalesRe_=/^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;goog.i18n.bidi.isRtlLanguage=function(a){return goog.i18n.bidi.rtlLocalesRe_.test(a)};goog.i18n.bidi.bracketGuardTextRe_=/(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(<.*?>+)/g;
goog.i18n.bidi.guardBracketInText=function(a,b){b=(void 0===b?goog.i18n.bidi.hasAnyRtl(a):b)?goog.i18n.bidi.Format.RLM:goog.i18n.bidi.Format.LRM;return a.replace(goog.i18n.bidi.bracketGuardTextRe_,b+"$&"+b)};goog.i18n.bidi.enforceRtlInHtml=function(a){return"<"==a.charAt(0)?a.replace(/<\w+/,"$& dir=rtl"):"\n<span dir=rtl>"+a+"</span>"};goog.i18n.bidi.enforceRtlInText=function(a){return goog.i18n.bidi.Format.RLE+a+goog.i18n.bidi.Format.PDF};
goog.i18n.bidi.enforceLtrInHtml=function(a){return"<"==a.charAt(0)?a.replace(/<\w+/,"$& dir=ltr"):"\n<span dir=ltr>"+a+"</span>"};goog.i18n.bidi.enforceLtrInText=function(a){return goog.i18n.bidi.Format.LRE+a+goog.i18n.bidi.Format.PDF};goog.i18n.bidi.dimensionsRe_=/:\s*([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)/g;goog.i18n.bidi.leftRe_=/left/gi;goog.i18n.bidi.rightRe_=/right/gi;goog.i18n.bidi.tempRe_=/%%%%/g;
goog.i18n.bidi.mirrorCSS=function(a){return a.replace(goog.i18n.bidi.dimensionsRe_,":$1 $4 $3 $2").replace(goog.i18n.bidi.leftRe_,"%%%%").replace(goog.i18n.bidi.rightRe_,goog.i18n.bidi.LEFT).replace(goog.i18n.bidi.tempRe_,goog.i18n.bidi.RIGHT)};goog.i18n.bidi.doubleQuoteSubstituteRe_=/([\u0591-\u05f2])"/g;goog.i18n.bidi.singleQuoteSubstituteRe_=/([\u0591-\u05f2])'/g;
goog.i18n.bidi.normalizeHebrewQuote=function(a){return a.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_,"$1\u05f4").replace(goog.i18n.bidi.singleQuoteSubstituteRe_,"$1\u05f3")};goog.i18n.bidi.wordSeparatorRe_=/\s+/;goog.i18n.bidi.hasNumeralsRe_=/[\d\u06f0-\u06f9]/;goog.i18n.bidi.rtlDetectionThreshold_=.4;
goog.i18n.bidi.estimateDirection=function(a,b){var c=0,d=0,e=!1;a=goog.i18n.bidi.stripHtmlIfNeeded_(a,b).split(goog.i18n.bidi.wordSeparatorRe_);for(b=0;b<a.length;b++){var f=a[b];goog.i18n.bidi.startsWithRtl(f)?(c++,d++):goog.i18n.bidi.isRequiredLtrRe_.test(f)?e=!0:goog.i18n.bidi.hasAnyLtr(f)?d++:goog.i18n.bidi.hasNumeralsRe_.test(f)&&(e=!0)}return 0==d?e?goog.i18n.bidi.Dir.LTR:goog.i18n.bidi.Dir.NEUTRAL:c/d>goog.i18n.bidi.rtlDetectionThreshold_?goog.i18n.bidi.Dir.RTL:goog.i18n.bidi.Dir.LTR};
goog.i18n.bidi.detectRtlDirectionality=function(a,b){return goog.i18n.bidi.estimateDirection(a,b)==goog.i18n.bidi.Dir.RTL};goog.i18n.bidi.setElementDirAndAlign=function(a,b){a&&(b=goog.i18n.bidi.toDir(b))&&(a.style.textAlign=b==goog.i18n.bidi.Dir.RTL?goog.i18n.bidi.RIGHT:goog.i18n.bidi.LEFT,a.dir=b==goog.i18n.bidi.Dir.RTL?"rtl":"ltr")};
goog.i18n.bidi.setElementDirByTextDirectionality=function(a,b){switch(goog.i18n.bidi.estimateDirection(b)){case goog.i18n.bidi.Dir.LTR:a.dir="ltr";break;case goog.i18n.bidi.Dir.RTL:a.dir="rtl";break;default:a.removeAttribute("dir")}};goog.i18n.bidi.DirectionalString=function(){};goog.html.TrustedResourceUrl=function(){this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_="";this.trustedURL_=null;this.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString=!0;goog.html.TrustedResourceUrl.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_.toString()};
goog.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString=!0;goog.html.TrustedResourceUrl.prototype.getDirection=function(){return goog.i18n.bidi.Dir.LTR};
goog.html.TrustedResourceUrl.prototype.cloneWithParams=function(a,b){var c=goog.html.TrustedResourceUrl.unwrap(this);c=goog.html.TrustedResourceUrl.URL_PARAM_PARSER_.exec(c);var d=c[3]||"";return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(c[1]+goog.html.TrustedResourceUrl.stringifyParams_("?",c[2]||"",a)+goog.html.TrustedResourceUrl.stringifyParams_("#",d,b))};
goog.DEBUG&&(goog.html.TrustedResourceUrl.prototype.toString=function(){return"TrustedResourceUrl{"+this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_+"}"});goog.html.TrustedResourceUrl.unwrap=function(a){return goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(a).toString()};
goog.html.TrustedResourceUrl.unwrapTrustedScriptURL=function(a){if(a instanceof goog.html.TrustedResourceUrl&&a.constructor===goog.html.TrustedResourceUrl&&a.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;goog.asserts.fail("expected object of type TrustedResourceUrl, got '"+a+"' of type "+goog.typeOf(a));return"type_error:TrustedResourceUrl"};
goog.html.TrustedResourceUrl.unwrapTrustedURL=function(a){return a.trustedURL_?a.trustedURL_:goog.html.TrustedResourceUrl.unwrap(a)};
goog.html.TrustedResourceUrl.format=function(a,b){var c=goog.string.Const.unwrap(a);if(!goog.html.TrustedResourceUrl.BASE_URL_.test(c))throw Error("Invalid TrustedResourceUrl format: "+c);a=c.replace(goog.html.TrustedResourceUrl.FORMAT_MARKER_,function(a,e){if(!Object.prototype.hasOwnProperty.call(b,e))throw Error('Found marker, "'+e+'", in format string, "'+c+'", but no valid label mapping found in args: '+JSON.stringify(b));a=b[e];return a instanceof goog.string.Const?goog.string.Const.unwrap(a):
encodeURIComponent(String(a))});return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.TrustedResourceUrl.FORMAT_MARKER_=/%{(\w+)}/g;goog.html.TrustedResourceUrl.BASE_URL_=/^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i;goog.html.TrustedResourceUrl.URL_PARAM_PARSER_=/^([^?#]*)(\?[^#]*)?(#[\s\S]*)?/;
goog.html.TrustedResourceUrl.formatWithParams=function(a,b,c,d){return goog.html.TrustedResourceUrl.format(a,b).cloneWithParams(c,d)};goog.html.TrustedResourceUrl.fromConstant=function(a){return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(a))};goog.html.TrustedResourceUrl.fromConstants=function(a){for(var b="",c=0;c<a.length;c++)b+=goog.string.Const.unwrap(a[c]);return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b)};
goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};
goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse=function(a){var b=new goog.html.TrustedResourceUrl;b.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createScriptURL(a):a;goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY&&(b.trustedURL_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createURL(a));return b};
goog.html.TrustedResourceUrl.stringifyParams_=function(a,b,c){if(null==c)return b;if(goog.isString(c))return c?a+encodeURIComponent(c):"";for(var d in c){var e=c[d];e=goog.isArray(e)?e:[e];for(var f=0;f<e.length;f++){var g=e[f];null!=g&&(b||(b=a),b+=(b.length>a.length?"&":"")+encodeURIComponent(d)+"="+encodeURIComponent(String(g)))}}return b};goog.string.internal={};goog.string.internal.startsWith=function(a,b){return 0==a.lastIndexOf(b,0)};goog.string.internal.endsWith=function(a,b){var c=a.length-b.length;return 0<=c&&a.indexOf(b,c)==c};goog.string.internal.caseInsensitiveStartsWith=function(a,b){return 0==goog.string.internal.caseInsensitiveCompare(b,a.substr(0,b.length))};goog.string.internal.caseInsensitiveEndsWith=function(a,b){return 0==goog.string.internal.caseInsensitiveCompare(b,a.substr(a.length-b.length,b.length))};
goog.string.internal.caseInsensitiveEquals=function(a,b){return a.toLowerCase()==b.toLowerCase()};goog.string.internal.isEmptyOrWhitespace=function(a){return/^[\s\xa0]*$/.test(a)};goog.string.internal.trim=goog.TRUSTED_SITE&&String.prototype.trim?function(a){return a.trim()}:function(a){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]};goog.string.internal.caseInsensitiveCompare=function(a,b){a=String(a).toLowerCase();b=String(b).toLowerCase();return a<b?-1:a==b?0:1};
goog.string.internal.newLineToBr=function(a,b){return a.replace(/(\r\n|\r|\n)/g,b?"<br />":"<br>")};
goog.string.internal.htmlEscape=function(a,b){if(b)a=a.replace(goog.string.internal.AMP_RE_,"&amp;").replace(goog.string.internal.LT_RE_,"&lt;").replace(goog.string.internal.GT_RE_,"&gt;").replace(goog.string.internal.QUOT_RE_,"&quot;").replace(goog.string.internal.SINGLE_QUOTE_RE_,"&#39;").replace(goog.string.internal.NULL_RE_,"&#0;");else{if(!goog.string.internal.ALL_RE_.test(a))return a;-1!=a.indexOf("&")&&(a=a.replace(goog.string.internal.AMP_RE_,"&amp;"));-1!=a.indexOf("<")&&(a=a.replace(goog.string.internal.LT_RE_,
"&lt;"));-1!=a.indexOf(">")&&(a=a.replace(goog.string.internal.GT_RE_,"&gt;"));-1!=a.indexOf('"')&&(a=a.replace(goog.string.internal.QUOT_RE_,"&quot;"));-1!=a.indexOf("'")&&(a=a.replace(goog.string.internal.SINGLE_QUOTE_RE_,"&#39;"));-1!=a.indexOf("\x00")&&(a=a.replace(goog.string.internal.NULL_RE_,"&#0;"))}return a};goog.string.internal.AMP_RE_=/&/g;goog.string.internal.LT_RE_=/</g;goog.string.internal.GT_RE_=/>/g;goog.string.internal.QUOT_RE_=/"/g;goog.string.internal.SINGLE_QUOTE_RE_=/'/g;
goog.string.internal.NULL_RE_=/\x00/g;goog.string.internal.ALL_RE_=/[\x00&<>"']/;goog.string.internal.whitespaceEscape=function(a,b){return goog.string.internal.newLineToBr(a.replace(/  /g," &#160;"),b)};goog.string.internal.contains=function(a,b){return-1!=a.indexOf(b)};goog.string.internal.caseInsensitiveContains=function(a,b){return goog.string.internal.contains(a.toLowerCase(),b.toLowerCase())};
goog.string.internal.compareVersions=function(a,b){var c=0;a=goog.string.internal.trim(String(a)).split(".");b=goog.string.internal.trim(String(b)).split(".");for(var d=Math.max(a.length,b.length),e=0;0==c&&e<d;e++){var f=a[e]||"",g=b[e]||"";do{f=/(\d*)(\D*)(.*)/.exec(f)||["","","",""];g=/(\d*)(\D*)(.*)/.exec(g)||["","","",""];if(0==f[0].length&&0==g[0].length)break;c=0==f[1].length?0:parseInt(f[1],10);var h=0==g[1].length?0:parseInt(g[1],10);c=goog.string.internal.compareElements_(c,h)||goog.string.internal.compareElements_(0==
f[2].length,0==g[2].length)||goog.string.internal.compareElements_(f[2],g[2]);f=f[3];g=g[3]}while(0==c)}return c};goog.string.internal.compareElements_=function(a,b){return a<b?-1:a>b?1:0};goog.html.SafeUrl=function(){this.privateDoNotAccessOrElseSafeUrlWrappedValue_="";this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.SafeUrl.INNOCUOUS_STRING="about:invalid#zClosurez";goog.html.SafeUrl.prototype.implementsGoogStringTypedString=!0;goog.html.SafeUrl.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeUrlWrappedValue_.toString()};
goog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString=!0;goog.html.SafeUrl.prototype.getDirection=function(){return goog.i18n.bidi.Dir.LTR};goog.DEBUG&&(goog.html.SafeUrl.prototype.toString=function(){return"SafeUrl{"+this.privateDoNotAccessOrElseSafeUrlWrappedValue_+"}"});goog.html.SafeUrl.unwrap=function(a){return goog.html.SafeUrl.unwrapTrustedURL(a).toString()};
goog.html.SafeUrl.unwrapTrustedURL=function(a){if(a instanceof goog.html.SafeUrl&&a.constructor===goog.html.SafeUrl&&a.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeUrlWrappedValue_;goog.asserts.fail("expected object of type SafeUrl, got '"+a+"' of type "+goog.typeOf(a));return"type_error:SafeUrl"};goog.html.SafeUrl.fromConstant=function(a){return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(a))};
goog.html.SAFE_MIME_TYPE_PATTERN_=/^(?:audio\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-wav|wav|webm)|image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|text\/csv|video\/(?:mpeg|mp4|ogg|webm|quicktime))(?:;\w+=(?:\w+|"[\w;=]+"))*$/i;goog.html.SafeUrl.isSafeMimeType=function(a){return goog.html.SAFE_MIME_TYPE_PATTERN_.test(a)};goog.html.SafeUrl.fromBlob=function(a){a=goog.html.SAFE_MIME_TYPE_PATTERN_.test(a.type)?goog.fs.url.createObjectUrl(a):goog.html.SafeUrl.INNOCUOUS_STRING;return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.DATA_URL_PATTERN_=/^data:([^,]*);base64,[a-z0-9+\/]+=*$/i;goog.html.SafeUrl.fromDataUrl=function(a){a=a.replace(/(%0A|%0D)/g,"");var b=a.match(goog.html.DATA_URL_PATTERN_);b=b&&goog.html.SAFE_MIME_TYPE_PATTERN_.test(b[1]);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b?a:goog.html.SafeUrl.INNOCUOUS_STRING)};goog.html.SafeUrl.fromTelUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"tel:")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SIP_URL_PATTERN_=/^sip[s]?:[+a-z0-9_.!$%&'*\/=^`{|}~-]+@([a-z0-9-]+\.)+[a-z0-9]{2,63}$/i;goog.html.SafeUrl.fromSipUrl=function(a){goog.html.SIP_URL_PATTERN_.test(decodeURIComponent(a))||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeUrl.fromFacebookMessengerUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"fb-messenger://share")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeUrl.fromWhatsAppUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"whatsapp://send")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeUrl.fromSmsUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"sms:")&&goog.html.SafeUrl.isSmsUrlBodyValid_(a)||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeUrl.isSmsUrlBodyValid_=function(a){var b=a.indexOf("#");0<b&&(a=a.substring(0,b));b=a.match(/[?&]body=/gi);if(!b)return!0;if(1<b.length)return!1;a=a.match(/[?&]body=([^&]*)/)[1];if(!a)return!0;try{decodeURIComponent(a)}catch(c){return!1}return/^(?:[a-z0-9\-_.~]|%[0-9a-f]{2})+$/i.test(a)};goog.html.SafeUrl.fromSshUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"ssh://")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeUrl.sanitizeChromeExtensionUrl=function(a,b){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^chrome-extension:\/\/([^\/]+)\//,a,b)};goog.html.SafeUrl.sanitizeFirefoxExtensionUrl=function(a,b){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^moz-extension:\/\/([^\/]+)\//,a,b)};goog.html.SafeUrl.sanitizeEdgeExtensionUrl=function(a,b){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^ms-browser-extension:\/\/([^\/]+)\//,a,b)};
goog.html.SafeUrl.sanitizeExtensionUrl_=function(a,b,c){(a=a.exec(b))?(a=a[1],-1==(c instanceof goog.string.Const?[goog.string.Const.unwrap(c)]:c.map(function(a){return goog.string.Const.unwrap(a)})).indexOf(a)&&(b=goog.html.SafeUrl.INNOCUOUS_STRING)):b=goog.html.SafeUrl.INNOCUOUS_STRING;return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b)};goog.html.SafeUrl.fromTrustedResourceUrl=function(a){return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.html.TrustedResourceUrl.unwrap(a))};
goog.html.SAFE_URL_PATTERN_=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;goog.html.SafeUrl.SAFE_URL_PATTERN=goog.html.SAFE_URL_PATTERN_;goog.html.SafeUrl.sanitize=function(a){if(a instanceof goog.html.SafeUrl)return a;a="object"==typeof a&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);goog.html.SAFE_URL_PATTERN_.test(a)||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeUrl.sanitizeAssertUnchanged=function(a,b){if(a instanceof goog.html.SafeUrl)return a;a="object"==typeof a&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);if(b&&/^data:/i.test(a)&&(b=goog.html.SafeUrl.fromDataUrl(a),b.getTypedStringValue()==a))return b;goog.asserts.assert(goog.html.SAFE_URL_PATTERN_.test(a),"%s does not match the safe URL pattern",a)||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse=function(a){var b=new goog.html.SafeUrl;b.privateDoNotAccessOrElseSafeUrlWrappedValue_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createURL(a):a;return b};goog.html.SafeUrl.ABOUT_BLANK=goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse("about:blank");goog.html.SafeStyle=function(){this.privateDoNotAccessOrElseSafeStyleWrappedValue_="";this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.SafeStyle.prototype.implementsGoogStringTypedString=!0;goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};
goog.html.SafeStyle.fromConstant=function(a){a=goog.string.Const.unwrap(a);if(0===a.length)return goog.html.SafeStyle.EMPTY;goog.asserts.assert(goog.string.internal.endsWith(a,";"),"Last character of style string is not ';': "+a);goog.asserts.assert(goog.string.internal.contains(a,":"),"Style string must contain at least one ':', to specify a \"name: value\" pair: "+a);return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeStyle.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeStyleWrappedValue_};goog.DEBUG&&(goog.html.SafeStyle.prototype.toString=function(){return"SafeStyle{"+this.privateDoNotAccessOrElseSafeStyleWrappedValue_+"}"});
goog.html.SafeStyle.unwrap=function(a){if(a instanceof goog.html.SafeStyle&&a.constructor===goog.html.SafeStyle&&a.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeStyleWrappedValue_;goog.asserts.fail("expected object of type SafeStyle, got '"+a+"' of type "+goog.typeOf(a));return"type_error:SafeStyle"};goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse=function(a){return(new goog.html.SafeStyle).initSecurityPrivateDoNotAccessOrElse_(a)};
goog.html.SafeStyle.prototype.initSecurityPrivateDoNotAccessOrElse_=function(a){this.privateDoNotAccessOrElseSafeStyleWrappedValue_=a;return this};goog.html.SafeStyle.EMPTY=goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse("");goog.html.SafeStyle.INNOCUOUS_STRING="zClosurez";
goog.html.SafeStyle.create=function(a){var b="",c;for(c in a){if(!/^[-_a-zA-Z0-9]+$/.test(c))throw Error("Name allows only [-_a-zA-Z0-9], got: "+c);var d=a[c];null!=d&&(d=goog.isArray(d)?goog.array.map(d,goog.html.SafeStyle.sanitizePropertyValue_).join(" "):goog.html.SafeStyle.sanitizePropertyValue_(d),b+=c+":"+d+";")}return b?goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b):goog.html.SafeStyle.EMPTY};
goog.html.SafeStyle.sanitizePropertyValue_=function(a){if(a instanceof goog.html.SafeUrl)return'url("'+goog.html.SafeUrl.unwrap(a).replace(/</g,"%3c").replace(/[\\"]/g,"\\$&")+'")';a=a instanceof goog.string.Const?goog.string.Const.unwrap(a):goog.html.SafeStyle.sanitizePropertyValueString_(String(a));if(/[{;}]/.test(a))throw new goog.asserts.AssertionError("Value does not allow [{;}], got: %s.",[a]);return a};
goog.html.SafeStyle.sanitizePropertyValueString_=function(a){var b=a.replace(goog.html.SafeStyle.FUNCTIONS_RE_,"$1").replace(goog.html.SafeStyle.FUNCTIONS_RE_,"$1").replace(goog.html.SafeStyle.URL_RE_,"url");if(goog.html.SafeStyle.VALUE_RE_.test(b)){if(goog.html.SafeStyle.COMMENT_RE_.test(a))return goog.asserts.fail("String value disallows comments, got: "+a),goog.html.SafeStyle.INNOCUOUS_STRING;if(!goog.html.SafeStyle.hasBalancedQuotes_(a))return goog.asserts.fail("String value requires balanced quotes, got: "+
a),goog.html.SafeStyle.INNOCUOUS_STRING;if(!goog.html.SafeStyle.hasBalancedSquareBrackets_(a))return goog.asserts.fail("String value requires balanced square brackets and one identifier per pair of brackets, got: "+a),goog.html.SafeStyle.INNOCUOUS_STRING}else return goog.asserts.fail("String value allows only "+goog.html.SafeStyle.VALUE_ALLOWED_CHARS_+" and simple functions, got: "+a),goog.html.SafeStyle.INNOCUOUS_STRING;return goog.html.SafeStyle.sanitizeUrl_(a)};
goog.html.SafeStyle.hasBalancedQuotes_=function(a){for(var b=!0,c=!0,d=0;d<a.length;d++){var e=a.charAt(d);"'"==e&&c?b=!b:'"'==e&&b&&(c=!c)}return b&&c};goog.html.SafeStyle.hasBalancedSquareBrackets_=function(a){for(var b=!0,c=/^[-_a-zA-Z0-9]$/,d=0;d<a.length;d++){var e=a.charAt(d);if("]"==e){if(b)return!1;b=!0}else if("["==e){if(!b)return!1;b=!1}else if(!b&&!c.test(e))return!1}return b};goog.html.SafeStyle.VALUE_ALLOWED_CHARS_="[-,.\"'%_!# a-zA-Z0-9\\[\\]]";
goog.html.SafeStyle.VALUE_RE_=new RegExp("^"+goog.html.SafeStyle.VALUE_ALLOWED_CHARS_+"+$");goog.html.SafeStyle.URL_RE_=/\b(url\([ \t\n]*)('[ -&(-\[\]-~]*'|"[ !#-\[\]-~]*"|[!#-&*-\[\]-~]*)([ \t\n]*\))/g;goog.html.SafeStyle.FUNCTIONS_RE_=/\b(hsl|hsla|rgb|rgba|matrix|calc|minmax|fit-content|repeat|(rotate|scale|translate)(X|Y|Z|3d)?)\([-+*/0-9a-z.%\[\], ]+\)/g;goog.html.SafeStyle.COMMENT_RE_=/\/\*/;
goog.html.SafeStyle.sanitizeUrl_=function(a){return a.replace(goog.html.SafeStyle.URL_RE_,function(a,c,d,e){var b="";d=d.replace(/^(['"])(.*)\1$/,function(a,c,d){b=c;return d});a=goog.html.SafeUrl.sanitize(d).getTypedStringValue();return c+b+a+b+e})};goog.html.SafeStyle.concat=function(a){var b="",c=function(a){goog.isArray(a)?goog.array.forEach(a,c):b+=goog.html.SafeStyle.unwrap(a)};goog.array.forEach(arguments,c);return b?goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b):goog.html.SafeStyle.EMPTY};goog.html.SafeStyleSheet=function(){this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_="";this.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.SafeStyleSheet.prototype.implementsGoogStringTypedString=!0;goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};
goog.html.SafeStyleSheet.createRule=function(a,b){if(goog.string.internal.contains(a,"<"))throw Error("Selector does not allow '<', got: "+a);var c=a.replace(/('|")((?!\1)[^\r\n\f\\]|\\[\s\S])*\1/g,"");if(!/^[-_a-zA-Z0-9#.:* ,>+~[\]()=^$|]+$/.test(c))throw Error("Selector allows only [-_a-zA-Z0-9#.:* ,>+~[\\]()=^$|] and strings, got: "+a);if(!goog.html.SafeStyleSheet.hasBalancedBrackets_(c))throw Error("() and [] in selector must be balanced, got: "+a);b instanceof goog.html.SafeStyle||(b=goog.html.SafeStyle.create(b));
a=a+"{"+goog.html.SafeStyle.unwrap(b).replace(/</g,"\\3C ")+"}";return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeStyleSheet.hasBalancedBrackets_=function(a){for(var b={"(":")","[":"]"},c=[],d=0;d<a.length;d++){var e=a[d];if(b[e])c.push(b[e]);else if(goog.object.contains(b,e)&&c.pop()!=e)return!1}return 0==c.length};
goog.html.SafeStyleSheet.concat=function(a){var b="",c=function(a){goog.isArray(a)?goog.array.forEach(a,c):b+=goog.html.SafeStyleSheet.unwrap(a)};goog.array.forEach(arguments,c);return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b)};
goog.html.SafeStyleSheet.fromConstant=function(a){a=goog.string.Const.unwrap(a);if(0===a.length)return goog.html.SafeStyleSheet.EMPTY;goog.asserts.assert(!goog.string.internal.contains(a,"<"),"Forbidden '<' character in style sheet string: "+a);return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeStyleSheet.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_};
goog.DEBUG&&(goog.html.SafeStyleSheet.prototype.toString=function(){return"SafeStyleSheet{"+this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_+"}"});
goog.html.SafeStyleSheet.unwrap=function(a){if(a instanceof goog.html.SafeStyleSheet&&a.constructor===goog.html.SafeStyleSheet&&a.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;goog.asserts.fail("expected object of type SafeStyleSheet, got '"+a+"' of type "+goog.typeOf(a));return"type_error:SafeStyleSheet"};
goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse=function(a){return(new goog.html.SafeStyleSheet).initSecurityPrivateDoNotAccessOrElse_(a)};goog.html.SafeStyleSheet.prototype.initSecurityPrivateDoNotAccessOrElse_=function(a){this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_=a;return this};goog.html.SafeStyleSheet.EMPTY=goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse("");goog.labs={};goog.labs.userAgent={};goog.labs.userAgent.util={};goog.labs.userAgent.util.getNativeUserAgentString_=function(){var a=goog.labs.userAgent.util.getNavigator_();return a&&(a=a.userAgent)?a:""};goog.labs.userAgent.util.getNavigator_=function(){return goog.global.navigator};goog.labs.userAgent.util.userAgent_=goog.labs.userAgent.util.getNativeUserAgentString_();goog.labs.userAgent.util.setUserAgent=function(a){goog.labs.userAgent.util.userAgent_=a||goog.labs.userAgent.util.getNativeUserAgentString_()};
goog.labs.userAgent.util.getUserAgent=function(){return goog.labs.userAgent.util.userAgent_};goog.labs.userAgent.util.matchUserAgent=function(a){var b=goog.labs.userAgent.util.getUserAgent();return goog.string.internal.contains(b,a)};goog.labs.userAgent.util.matchUserAgentIgnoreCase=function(a){var b=goog.labs.userAgent.util.getUserAgent();return goog.string.internal.caseInsensitiveContains(b,a)};
goog.labs.userAgent.util.extractVersionTuples=function(a){for(var b=/(\w[\w ]+)\/([^\s]+)\s*(?:\((.*?)\))?/g,c=[],d;d=b.exec(a);)c.push([d[1],d[2],d[3]||void 0]);return c};goog.labs.userAgent.browser={};goog.labs.userAgent.browser.matchOpera_=function(){return goog.labs.userAgent.util.matchUserAgent("Opera")};goog.labs.userAgent.browser.matchIE_=function(){return goog.labs.userAgent.util.matchUserAgent("Trident")||goog.labs.userAgent.util.matchUserAgent("MSIE")};goog.labs.userAgent.browser.matchEdgeHtml_=function(){return goog.labs.userAgent.util.matchUserAgent("Edge")};goog.labs.userAgent.browser.matchEdgeChromium_=function(){return goog.labs.userAgent.util.matchUserAgent("Edg/")};
goog.labs.userAgent.browser.matchOperaChromium_=function(){return goog.labs.userAgent.util.matchUserAgent("OPR")};goog.labs.userAgent.browser.matchFirefox_=function(){return goog.labs.userAgent.util.matchUserAgent("Firefox")||goog.labs.userAgent.util.matchUserAgent("FxiOS")};
goog.labs.userAgent.browser.matchSafari_=function(){return goog.labs.userAgent.util.matchUserAgent("Safari")&&!(goog.labs.userAgent.browser.matchChrome_()||goog.labs.userAgent.browser.matchCoast_()||goog.labs.userAgent.browser.matchOpera_()||goog.labs.userAgent.browser.matchEdgeHtml_()||goog.labs.userAgent.browser.matchEdgeChromium_()||goog.labs.userAgent.browser.matchOperaChromium_()||goog.labs.userAgent.browser.matchFirefox_()||goog.labs.userAgent.browser.isSilk()||goog.labs.userAgent.util.matchUserAgent("Android"))};
goog.labs.userAgent.browser.matchCoast_=function(){return goog.labs.userAgent.util.matchUserAgent("Coast")};goog.labs.userAgent.browser.matchIosWebview_=function(){return(goog.labs.userAgent.util.matchUserAgent("iPad")||goog.labs.userAgent.util.matchUserAgent("iPhone"))&&!goog.labs.userAgent.browser.matchSafari_()&&!goog.labs.userAgent.browser.matchChrome_()&&!goog.labs.userAgent.browser.matchCoast_()&&!goog.labs.userAgent.browser.matchFirefox_()&&goog.labs.userAgent.util.matchUserAgent("AppleWebKit")};
goog.labs.userAgent.browser.matchChrome_=function(){return(goog.labs.userAgent.util.matchUserAgent("Chrome")||goog.labs.userAgent.util.matchUserAgent("CriOS"))&&!goog.labs.userAgent.browser.matchEdgeHtml_()};goog.labs.userAgent.browser.matchAndroidBrowser_=function(){return goog.labs.userAgent.util.matchUserAgent("Android")&&!(goog.labs.userAgent.browser.isChrome()||goog.labs.userAgent.browser.isFirefox()||goog.labs.userAgent.browser.isOpera()||goog.labs.userAgent.browser.isSilk())};
goog.labs.userAgent.browser.isOpera=goog.labs.userAgent.browser.matchOpera_;goog.labs.userAgent.browser.isIE=goog.labs.userAgent.browser.matchIE_;goog.labs.userAgent.browser.isEdge=goog.labs.userAgent.browser.matchEdgeHtml_;goog.labs.userAgent.browser.isEdgeChromium=goog.labs.userAgent.browser.matchEdgeChromium_;goog.labs.userAgent.browser.isOperaChromium=goog.labs.userAgent.browser.matchOperaChromium_;goog.labs.userAgent.browser.isFirefox=goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari=goog.labs.userAgent.browser.matchSafari_;goog.labs.userAgent.browser.isCoast=goog.labs.userAgent.browser.matchCoast_;goog.labs.userAgent.browser.isIosWebview=goog.labs.userAgent.browser.matchIosWebview_;goog.labs.userAgent.browser.isChrome=goog.labs.userAgent.browser.matchChrome_;goog.labs.userAgent.browser.isAndroidBrowser=goog.labs.userAgent.browser.matchAndroidBrowser_;goog.labs.userAgent.browser.isSilk=function(){return goog.labs.userAgent.util.matchUserAgent("Silk")};
goog.labs.userAgent.browser.getVersion=function(){function a(a){a=goog.array.find(a,d);return c[a]||""}var b=goog.labs.userAgent.util.getUserAgent();if(goog.labs.userAgent.browser.isIE())return goog.labs.userAgent.browser.getIEVersion_(b);b=goog.labs.userAgent.util.extractVersionTuples(b);var c={};goog.array.forEach(b,function(a){c[a[0]]=a[1]});var d=goog.partial(goog.object.containsKey,c);return goog.labs.userAgent.browser.isOpera()?a(["Version","Opera"]):goog.labs.userAgent.browser.isEdge()?a(["Edge"]):
goog.labs.userAgent.browser.isEdgeChromium()?a(["Edg"]):goog.labs.userAgent.browser.isChrome()?a(["Chrome","CriOS"]):(b=b[2])&&b[1]||""};goog.labs.userAgent.browser.isVersionOrHigher=function(a){return 0<=goog.string.internal.compareVersions(goog.labs.userAgent.browser.getVersion(),a)};
goog.labs.userAgent.browser.getIEVersion_=function(a){var b=/rv: *([\d\.]*)/.exec(a);if(b&&b[1])return b[1];b="";var c=/MSIE +([\d\.]+)/.exec(a);if(c&&c[1])if(a=/Trident\/(\d.\d)/.exec(a),"7.0"==c[1])if(a&&a[1])switch(a[1]){case "4.0":b="8.0";break;case "5.0":b="9.0";break;case "6.0":b="10.0";break;case "7.0":b="11.0"}else b="7.0";else b=c[1];return b};goog.html.SafeHtml=function(){this.privateDoNotAccessOrElseSafeHtmlWrappedValue_="";this.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;this.dir_=null};goog.html.SafeHtml.prototype.implementsGoogI18nBidiDirectionalString=!0;goog.html.SafeHtml.prototype.getDirection=function(){return this.dir_};goog.html.SafeHtml.prototype.implementsGoogStringTypedString=!0;goog.html.SafeHtml.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_.toString()};
goog.DEBUG&&(goog.html.SafeHtml.prototype.toString=function(){return"SafeHtml{"+this.privateDoNotAccessOrElseSafeHtmlWrappedValue_+"}"});goog.html.SafeHtml.unwrap=function(a){return goog.html.SafeHtml.unwrapTrustedHTML(a).toString()};
goog.html.SafeHtml.unwrapTrustedHTML=function(a){if(a instanceof goog.html.SafeHtml&&a.constructor===goog.html.SafeHtml&&a.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeHtmlWrappedValue_;goog.asserts.fail("expected object of type SafeHtml, got '"+a+"' of type "+goog.typeOf(a));return"type_error:SafeHtml"};
goog.html.SafeHtml.htmlEscape=function(a){if(a instanceof goog.html.SafeHtml)return a;var b="object"==typeof a,c=null;b&&a.implementsGoogI18nBidiDirectionalString&&(c=a.getDirection());a=b&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.htmlEscape(a),c)};
goog.html.SafeHtml.htmlEscapePreservingNewlines=function(a){if(a instanceof goog.html.SafeHtml)return a;a=goog.html.SafeHtml.htmlEscape(a);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.newLineToBr(goog.html.SafeHtml.unwrap(a)),a.getDirection())};
goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces=function(a){if(a instanceof goog.html.SafeHtml)return a;a=goog.html.SafeHtml.htmlEscape(a);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.whitespaceEscape(goog.html.SafeHtml.unwrap(a)),a.getDirection())};goog.html.SafeHtml.from=goog.html.SafeHtml.htmlEscape;goog.html.SafeHtml.VALID_NAMES_IN_TAG_=/^[a-zA-Z0-9-]+$/;
goog.html.SafeHtml.URL_ATTRIBUTES_={action:!0,cite:!0,data:!0,formaction:!0,href:!0,manifest:!0,poster:!0,src:!0};goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_={APPLET:!0,BASE:!0,EMBED:!0,IFRAME:!0,LINK:!0,MATH:!0,META:!0,OBJECT:!0,SCRIPT:!0,STYLE:!0,SVG:!0,TEMPLATE:!0};goog.html.SafeHtml.create=function(a,b,c){goog.html.SafeHtml.verifyTagName(String(a));return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(String(a),b,c)};
goog.html.SafeHtml.verifyTagName=function(a){if(!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(a))throw Error("Invalid tag name <"+a+">.");if(a.toUpperCase()in goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_)throw Error("Tag name <"+a+"> is not allowed for SafeHtml.");};
goog.html.SafeHtml.createIframe=function(a,b,c,d){a&&goog.html.TrustedResourceUrl.unwrap(a);var e={};e.src=a||null;e.srcdoc=b&&goog.html.SafeHtml.unwrap(b);a=goog.html.SafeHtml.combineAttributes(e,{sandbox:""},c);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe",a,d)};
goog.html.SafeHtml.createSandboxIframe=function(a,b,c,d){if(!goog.html.SafeHtml.canUseSandboxIframe())throw Error("The browser does not support sandboxed iframes.");var e={};e.src=a?goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(a)):null;e.srcdoc=b||null;e.sandbox="";a=goog.html.SafeHtml.combineAttributes(e,{},c);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe",a,d)};
goog.html.SafeHtml.canUseSandboxIframe=function(){return goog.global.HTMLIFrameElement&&"sandbox"in goog.global.HTMLIFrameElement.prototype};goog.html.SafeHtml.createScriptSrc=function(a,b){goog.html.TrustedResourceUrl.unwrap(a);a=goog.html.SafeHtml.combineAttributes({src:a},{},b);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script",a)};
goog.html.SafeHtml.createScript=function(a,b){for(var c in b){var d=c.toLowerCase();if("language"==d||"src"==d||"text"==d||"type"==d)throw Error('Cannot set "'+d+'" attribute');}c="";a=goog.array.concat(a);for(d=0;d<a.length;d++)c+=goog.html.SafeScript.unwrap(a[d]);a=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c,goog.i18n.bidi.Dir.NEUTRAL);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script",b,a)};
goog.html.SafeHtml.createStyle=function(a,b){b=goog.html.SafeHtml.combineAttributes({type:"text/css"},{},b);var c="";a=goog.array.concat(a);for(var d=0;d<a.length;d++)c+=goog.html.SafeStyleSheet.unwrap(a[d]);a=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c,goog.i18n.bidi.Dir.NEUTRAL);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("style",b,a)};
goog.html.SafeHtml.createMetaRefresh=function(a,b){a=goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(a));(goog.labs.userAgent.browser.isIE()||goog.labs.userAgent.browser.isEdge())&&goog.string.internal.contains(a,";")&&(a="'"+a.replace(/'/g,"%27")+"'");return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("meta",{"http-equiv":"refresh",content:(b||0)+"; url="+a})};
goog.html.SafeHtml.getAttrNameAndValue_=function(a,b,c){if(c instanceof goog.string.Const)c=goog.string.Const.unwrap(c);else if("style"==b.toLowerCase())c=goog.html.SafeHtml.getStyleValue_(c);else{if(/^on/i.test(b))throw Error('Attribute "'+b+'" requires goog.string.Const value, "'+c+'" given.');if(b.toLowerCase()in goog.html.SafeHtml.URL_ATTRIBUTES_)if(c instanceof goog.html.TrustedResourceUrl)c=goog.html.TrustedResourceUrl.unwrap(c);else if(c instanceof goog.html.SafeUrl)c=goog.html.SafeUrl.unwrap(c);
else if(goog.isString(c))c=goog.html.SafeUrl.sanitize(c).getTypedStringValue();else throw Error('Attribute "'+b+'" on tag "'+a+'" requires goog.html.SafeUrl, goog.string.Const, or string, value "'+c+'" given.');}c.implementsGoogStringTypedString&&(c=c.getTypedStringValue());goog.asserts.assert(goog.isString(c)||goog.isNumber(c),"String or number value expected, got "+typeof c+" with value: "+c);return b+'="'+goog.string.internal.htmlEscape(String(c))+'"'};
goog.html.SafeHtml.getStyleValue_=function(a){if(!goog.isObject(a))throw Error('The "style" attribute requires goog.html.SafeStyle or map of style properties, '+typeof a+" given: "+a);a instanceof goog.html.SafeStyle||(a=goog.html.SafeStyle.create(a));return goog.html.SafeStyle.unwrap(a)};goog.html.SafeHtml.createWithDir=function(a,b,c,d){b=goog.html.SafeHtml.create(b,c,d);b.dir_=a;return b};
goog.html.SafeHtml.join=function(a,b){a=goog.html.SafeHtml.htmlEscape(a);var c=a.getDirection(),d=[],e=function(a){goog.isArray(a)?goog.array.forEach(a,e):(a=goog.html.SafeHtml.htmlEscape(a),d.push(goog.html.SafeHtml.unwrap(a)),a=a.getDirection(),c==goog.i18n.bidi.Dir.NEUTRAL?c=a:a!=goog.i18n.bidi.Dir.NEUTRAL&&c!=a&&(c=null))};goog.array.forEach(b,e);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(d.join(goog.html.SafeHtml.unwrap(a)),c)};
goog.html.SafeHtml.concat=function(a){return goog.html.SafeHtml.join(goog.html.SafeHtml.EMPTY,Array.prototype.slice.call(arguments))};goog.html.SafeHtml.concatWithDir=function(a,b){var c=goog.html.SafeHtml.concat(goog.array.slice(arguments,1));c.dir_=a;return c};goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse=function(a,b){return(new goog.html.SafeHtml).initSecurityPrivateDoNotAccessOrElse_(a,b)};
goog.html.SafeHtml.prototype.initSecurityPrivateDoNotAccessOrElse_=function(a,b){this.privateDoNotAccessOrElseSafeHtmlWrappedValue_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createHTML(a):a;this.dir_=b;return this};
goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse=function(a,b,c){var d=null;var e="<"+a+goog.html.SafeHtml.stringifyAttributes(a,b);goog.isDefAndNotNull(c)?goog.isArray(c)||(c=[c]):c=[];goog.dom.tags.isVoidTag(a.toLowerCase())?(goog.asserts.assert(!c.length,"Void tag <"+a+"> does not allow content."),e+=">"):(d=goog.html.SafeHtml.concat(c),e+=">"+goog.html.SafeHtml.unwrap(d)+"</"+a+">",d=d.getDirection());(a=b&&b.dir)&&(d=/^(ltr|rtl|auto)$/i.test(a)?goog.i18n.bidi.Dir.NEUTRAL:
null);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(e,d)};goog.html.SafeHtml.stringifyAttributes=function(a,b){var c="";if(b)for(var d in b){if(!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(d))throw Error('Invalid attribute name "'+d+'".');var e=b[d];goog.isDefAndNotNull(e)&&(c+=" "+goog.html.SafeHtml.getAttrNameAndValue_(a,d,e))}return c};
goog.html.SafeHtml.combineAttributes=function(a,b,c){var d={},e;for(e in a)goog.asserts.assert(e.toLowerCase()==e,"Must be lower case"),d[e]=a[e];for(e in b)goog.asserts.assert(e.toLowerCase()==e,"Must be lower case"),d[e]=b[e];for(e in c){var f=e.toLowerCase();if(f in a)throw Error('Cannot override "'+f+'" attribute, got "'+e+'" with value "'+c[e]+'"');f in b&&delete d[f];d[e]=c[e]}return d};
goog.html.SafeHtml.DOCTYPE_HTML=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("<!DOCTYPE html>",goog.i18n.bidi.Dir.NEUTRAL);goog.html.SafeHtml.EMPTY=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("",goog.i18n.bidi.Dir.NEUTRAL);goog.html.SafeHtml.BR=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("<br>",goog.i18n.bidi.Dir.NEUTRAL);goog.html.uncheckedconversions={};goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract=function(a,b,c){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(b,c||null)};
goog.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(b)};
goog.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b)};
goog.html.uncheckedconversions.safeStyleSheetFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b)};
goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b)};
goog.html.uncheckedconversions.trustedResourceUrlFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b)};goog.dom.safe={};goog.dom.safe.InsertAdjacentHtmlPosition={AFTERBEGIN:"afterbegin",AFTEREND:"afterend",BEFOREBEGIN:"beforebegin",BEFOREEND:"beforeend"};goog.dom.safe.insertAdjacentHtml=function(a,b,c){a.insertAdjacentHTML(b,goog.html.SafeHtml.unwrapTrustedHTML(c))};goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_={MATH:!0,SCRIPT:!0,STYLE:!0,SVG:!0,TEMPLATE:!0};
goog.dom.safe.isInnerHtmlCleanupRecursive_=goog.functions.cacheReturnValue(function(){if(goog.DEBUG&&"undefined"===typeof document)return!1;var a=document.createElement("div"),b=document.createElement("div");b.appendChild(document.createElement("div"));a.appendChild(b);if(goog.DEBUG&&!a.firstChild)return!1;b=a.firstChild.firstChild;a.innerHTML=goog.html.SafeHtml.unwrapTrustedHTML(goog.html.SafeHtml.EMPTY);return!b.parentElement});
goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse=function(a,b){if(goog.dom.safe.isInnerHtmlCleanupRecursive_())for(;a.lastChild;)a.removeChild(a.lastChild);a.innerHTML=goog.html.SafeHtml.unwrapTrustedHTML(b)};
goog.dom.safe.setInnerHtml=function(a,b){if(goog.asserts.ENABLE_ASSERTS){var c=a.tagName.toUpperCase();if(goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_[c])throw Error("goog.dom.safe.setInnerHtml cannot be used to set content of "+a.tagName+".");}goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse(a,b)};goog.dom.safe.setOuterHtml=function(a,b){a.outerHTML=goog.html.SafeHtml.unwrapTrustedHTML(b)};
goog.dom.safe.setFormElementAction=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);goog.dom.asserts.assertIsHTMLFormElement(a).action=goog.html.SafeUrl.unwrapTrustedURL(b)};goog.dom.safe.setButtonFormAction=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);goog.dom.asserts.assertIsHTMLButtonElement(a).formAction=goog.html.SafeUrl.unwrapTrustedURL(b)};
goog.dom.safe.setInputFormAction=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);goog.dom.asserts.assertIsHTMLInputElement(a).formAction=goog.html.SafeUrl.unwrapTrustedURL(b)};goog.dom.safe.setStyle=function(a,b){a.style.cssText=goog.html.SafeStyle.unwrap(b)};goog.dom.safe.documentWrite=function(a,b){a.write(goog.html.SafeHtml.unwrapTrustedHTML(b))};
goog.dom.safe.setAnchorHref=function(a,b){goog.dom.asserts.assertIsHTMLAnchorElement(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.href=goog.html.SafeUrl.unwrapTrustedURL(b)};goog.dom.safe.setImageSrc=function(a,b){goog.dom.asserts.assertIsHTMLImageElement(a);if(!(b instanceof goog.html.SafeUrl)){var c=/^data:image\//i.test(b);b=goog.html.SafeUrl.sanitizeAssertUnchanged(b,c)}a.src=goog.html.SafeUrl.unwrapTrustedURL(b)};
goog.dom.safe.setAudioSrc=function(a,b){goog.dom.asserts.assertIsHTMLAudioElement(a);if(!(b instanceof goog.html.SafeUrl)){var c=/^data:audio\//i.test(b);b=goog.html.SafeUrl.sanitizeAssertUnchanged(b,c)}a.src=goog.html.SafeUrl.unwrapTrustedURL(b)};goog.dom.safe.setVideoSrc=function(a,b){goog.dom.asserts.assertIsHTMLVideoElement(a);if(!(b instanceof goog.html.SafeUrl)){var c=/^data:video\//i.test(b);b=goog.html.SafeUrl.sanitizeAssertUnchanged(b,c)}a.src=goog.html.SafeUrl.unwrapTrustedURL(b)};
goog.dom.safe.setEmbedSrc=function(a,b){goog.dom.asserts.assertIsHTMLEmbedElement(a);a.src=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b)};goog.dom.safe.setFrameSrc=function(a,b){goog.dom.asserts.assertIsHTMLFrameElement(a);a.src=goog.html.TrustedResourceUrl.unwrapTrustedURL(b)};goog.dom.safe.setIframeSrc=function(a,b){goog.dom.asserts.assertIsHTMLIFrameElement(a);a.src=goog.html.TrustedResourceUrl.unwrapTrustedURL(b)};
goog.dom.safe.setIframeSrcdoc=function(a,b){goog.dom.asserts.assertIsHTMLIFrameElement(a);a.srcdoc=goog.html.SafeHtml.unwrapTrustedHTML(b)};
goog.dom.safe.setLinkHrefAndRel=function(a,b,c){goog.dom.asserts.assertIsHTMLLinkElement(a);a.rel=c;goog.string.internal.caseInsensitiveContains(c,"stylesheet")?(goog.asserts.assert(b instanceof goog.html.TrustedResourceUrl,'URL must be TrustedResourceUrl because "rel" contains "stylesheet"'),a.href=goog.html.TrustedResourceUrl.unwrapTrustedURL(b)):a.href=b instanceof goog.html.TrustedResourceUrl?goog.html.TrustedResourceUrl.unwrapTrustedURL(b):b instanceof goog.html.SafeUrl?goog.html.SafeUrl.unwrapTrustedURL(b):
goog.html.SafeUrl.unwrapTrustedURL(goog.html.SafeUrl.sanitizeAssertUnchanged(b))};goog.dom.safe.setObjectData=function(a,b){goog.dom.asserts.assertIsHTMLObjectElement(a);a.data=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b)};goog.dom.safe.setScriptSrc=function(a,b){goog.dom.asserts.assertIsHTMLScriptElement(a);a.src=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b);(b=goog.getScriptNonce())&&a.setAttribute("nonce",b)};
goog.dom.safe.setScriptContent=function(a,b){goog.dom.asserts.assertIsHTMLScriptElement(a);a.text=goog.html.SafeScript.unwrapTrustedScript(b);(b=goog.getScriptNonce())&&a.setAttribute("nonce",b)};goog.dom.safe.setLocationHref=function(a,b){goog.dom.asserts.assertIsLocation(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.href=goog.html.SafeUrl.unwrapTrustedURL(b)};
goog.dom.safe.assignLocation=function(a,b){goog.dom.asserts.assertIsLocation(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.assign(goog.html.SafeUrl.unwrapTrustedURL(b))};goog.dom.safe.replaceLocation=function(a,b){goog.dom.asserts.assertIsLocation(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.replace(goog.html.SafeUrl.unwrapTrustedURL(b))};
goog.dom.safe.openInWindow=function(a,b,c,d,e){a=a instanceof goog.html.SafeUrl?a:goog.html.SafeUrl.sanitizeAssertUnchanged(a);return(b||goog.global).open(goog.html.SafeUrl.unwrapTrustedURL(a),c?goog.string.Const.unwrap(c):"",d,e)};goog.dom.safe.parseFromStringHtml=function(a,b){return goog.dom.safe.parseFromString(a,b,"text/html")};goog.dom.safe.parseFromString=function(a,b,c){return a.parseFromString(goog.html.SafeHtml.unwrapTrustedHTML(b),c)};
goog.dom.safe.createImageFromBlob=function(a){if(!/^image\/.*/g.test(a.type))throw Error("goog.dom.safe.createImageFromBlob only accepts MIME type image/.*.");var b=goog.global.URL.createObjectURL(a);a=new goog.global.Image;a.onload=function(){goog.global.URL.revokeObjectURL(b)};goog.dom.safe.setImageSrc(a,goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Image blob URL."),b));return a};goog.string.DETECT_DOUBLE_ESCAPING=!1;goog.string.FORCE_NON_DOM_HTML_UNESCAPING=!1;goog.string.Unicode={NBSP:"\u00a0"};goog.string.startsWith=goog.string.internal.startsWith;goog.string.endsWith=goog.string.internal.endsWith;goog.string.caseInsensitiveStartsWith=goog.string.internal.caseInsensitiveStartsWith;goog.string.caseInsensitiveEndsWith=goog.string.internal.caseInsensitiveEndsWith;goog.string.caseInsensitiveEquals=goog.string.internal.caseInsensitiveEquals;
goog.string.subs=function(a,b){for(var c=a.split("%s"),d="",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join("%s")};goog.string.collapseWhitespace=function(a){return a.replace(/[\s\xa0]+/g," ").replace(/^\s+|\s+$/g,"")};goog.string.isEmptyOrWhitespace=goog.string.internal.isEmptyOrWhitespace;goog.string.isEmptyString=function(a){return 0==a.length};goog.string.isEmpty=goog.string.isEmptyOrWhitespace;goog.string.isEmptyOrWhitespaceSafe=function(a){return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(a))};
goog.string.isEmptySafe=goog.string.isEmptyOrWhitespaceSafe;goog.string.isBreakingWhitespace=function(a){return!/[^\t\n\r ]/.test(a)};goog.string.isAlpha=function(a){return!/[^a-zA-Z]/.test(a)};goog.string.isNumeric=function(a){return!/[^0-9]/.test(a)};goog.string.isAlphaNumeric=function(a){return!/[^a-zA-Z0-9]/.test(a)};goog.string.isSpace=function(a){return" "==a};goog.string.isUnicodeChar=function(a){return 1==a.length&&" "<=a&&"~">=a||"\u0080"<=a&&"\ufffd">=a};
goog.string.stripNewlines=function(a){return a.replace(/(\r\n|\r|\n)+/g," ")};goog.string.canonicalizeNewlines=function(a){return a.replace(/(\r\n|\r|\n)/g,"\n")};goog.string.normalizeWhitespace=function(a){return a.replace(/\xa0|\s/g," ")};goog.string.normalizeSpaces=function(a){return a.replace(/\xa0|[ \t]+/g," ")};goog.string.collapseBreakingSpaces=function(a){return a.replace(/[\t\r\n ]+/g," ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g,"")};goog.string.trim=goog.string.internal.trim;
goog.string.trimLeft=function(a){return a.replace(/^[\s\xa0]+/,"")};goog.string.trimRight=function(a){return a.replace(/[\s\xa0]+$/,"")};goog.string.caseInsensitiveCompare=goog.string.internal.caseInsensitiveCompare;
goog.string.numberAwareCompare_=function(a,b,c){if(a==b)return 0;if(!a)return-1;if(!b)return 1;for(var d=a.toLowerCase().match(c),e=b.toLowerCase().match(c),f=Math.min(d.length,e.length),g=0;g<f;g++){c=d[g];var h=e[g];if(c!=h)return a=parseInt(c,10),!isNaN(a)&&(b=parseInt(h,10),!isNaN(b)&&a-b)?a-b:c<h?-1:1}return d.length!=e.length?d.length-e.length:a<b?-1:1};goog.string.intAwareCompare=function(a,b){return goog.string.numberAwareCompare_(a,b,/\d+|\D+/g)};
goog.string.floatAwareCompare=function(a,b){return goog.string.numberAwareCompare_(a,b,/\d+|\.\d+|\D+/g)};goog.string.numerateCompare=goog.string.floatAwareCompare;goog.string.urlEncode=function(a){return encodeURIComponent(String(a))};goog.string.urlDecode=function(a){return decodeURIComponent(a.replace(/\+/g," "))};goog.string.newLineToBr=goog.string.internal.newLineToBr;
goog.string.htmlEscape=function(a,b){a=goog.string.internal.htmlEscape(a,b);goog.string.DETECT_DOUBLE_ESCAPING&&(a=a.replace(goog.string.E_RE_,"&#101;"));return a};goog.string.E_RE_=/e/g;goog.string.unescapeEntities=function(a){return goog.string.contains(a,"&")?!goog.string.FORCE_NON_DOM_HTML_UNESCAPING&&"document"in goog.global?goog.string.unescapeEntitiesUsingDom_(a):goog.string.unescapePureXmlEntities_(a):a};
goog.string.unescapeEntitiesWithDocument=function(a,b){return goog.string.contains(a,"&")?goog.string.unescapeEntitiesUsingDom_(a,b):a};
goog.string.unescapeEntitiesUsingDom_=function(a,b){var c={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"'};var d=b?b.createElement("div"):goog.global.document.createElement("div");return a.replace(goog.string.HTML_ENTITY_PATTERN_,function(a,b){var e=c[a];if(e)return e;"#"==b.charAt(0)&&(b=Number("0"+b.substr(1)),isNaN(b)||(e=String.fromCharCode(b)));e||(goog.dom.safe.setInnerHtml(d,goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Single HTML entity."),
a+" ")),e=d.firstChild.nodeValue.slice(0,-1));return c[a]=e})};goog.string.unescapePureXmlEntities_=function(a){return a.replace(/&([^;]+);/g,function(a,c){switch(c){case "amp":return"&";case "lt":return"<";case "gt":return">";case "quot":return'"';default:return"#"!=c.charAt(0)||(c=Number("0"+c.substr(1)),isNaN(c))?a:String.fromCharCode(c)}})};goog.string.HTML_ENTITY_PATTERN_=/&([^;\s<&]+);?/g;goog.string.whitespaceEscape=function(a,b){return goog.string.newLineToBr(a.replace(/  /g," &#160;"),b)};
goog.string.preserveSpaces=function(a){return a.replace(/(^|[\n ]) /g,"$1"+goog.string.Unicode.NBSP)};goog.string.stripQuotes=function(a,b){for(var c=b.length,d=0;d<c;d++){var e=1==c?b:b.charAt(d);if(a.charAt(0)==e&&a.charAt(a.length-1)==e)return a.substring(1,a.length-1)}return a};goog.string.truncate=function(a,b,c){c&&(a=goog.string.unescapeEntities(a));a.length>b&&(a=a.substring(0,b-3)+"...");c&&(a=goog.string.htmlEscape(a));return a};
goog.string.truncateMiddle=function(a,b,c,d){c&&(a=goog.string.unescapeEntities(a));if(d&&a.length>b){d>b&&(d=b);var e=a.length-d;a=a.substring(0,b-d)+"..."+a.substring(e)}else a.length>b&&(d=Math.floor(b/2),e=a.length-d,a=a.substring(0,d+b%2)+"..."+a.substring(e));c&&(a=goog.string.htmlEscape(a));return a};goog.string.specialEscapeChars_={"\x00":"\\0","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\x0B":"\\x0B",'"':'\\"',"\\":"\\\\","<":"\\u003C"};goog.string.jsEscapeCache_={"'":"\\'"};
goog.string.quote=function(a){a=String(a);for(var b=['"'],c=0;c<a.length;c++){var d=a.charAt(c),e=d.charCodeAt(0);b[c+1]=goog.string.specialEscapeChars_[d]||(31<e&&127>e?d:goog.string.escapeChar(d))}b.push('"');return b.join("")};goog.string.escapeString=function(a){for(var b=[],c=0;c<a.length;c++)b[c]=goog.string.escapeChar(a.charAt(c));return b.join("")};
goog.string.escapeChar=function(a){if(a in goog.string.jsEscapeCache_)return goog.string.jsEscapeCache_[a];if(a in goog.string.specialEscapeChars_)return goog.string.jsEscapeCache_[a]=goog.string.specialEscapeChars_[a];var b=a.charCodeAt(0);if(31<b&&127>b)var c=a;else{if(256>b){if(c="\\x",16>b||256<b)c+="0"}else c="\\u",4096>b&&(c+="0");c+=b.toString(16).toUpperCase()}return goog.string.jsEscapeCache_[a]=c};goog.string.contains=goog.string.internal.contains;goog.string.caseInsensitiveContains=goog.string.internal.caseInsensitiveContains;
goog.string.countOf=function(a,b){return a&&b?a.split(b).length-1:0};goog.string.removeAt=function(a,b,c){var d=a;0<=b&&b<a.length&&0<c&&(d=a.substr(0,b)+a.substr(b+c,a.length-b-c));return d};goog.string.remove=function(a,b){return a.replace(b,"")};goog.string.removeAll=function(a,b){b=new RegExp(goog.string.regExpEscape(b),"g");return a.replace(b,"")};goog.string.replaceAll=function(a,b,c){b=new RegExp(goog.string.regExpEscape(b),"g");return a.replace(b,c.replace(/\$/g,"$$$$"))};
goog.string.regExpEscape=function(a){return String(a).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")};goog.string.repeat=String.prototype.repeat?function(a,b){return a.repeat(b)}:function(a,b){return Array(b+1).join(a)};goog.string.padNumber=function(a,b,c){a=goog.isDef(c)?a.toFixed(c):String(a);c=a.indexOf(".");-1==c&&(c=a.length);return goog.string.repeat("0",Math.max(0,b-c))+a};goog.string.makeSafe=function(a){return null==a?"":String(a)};
goog.string.buildString=function(a){return Array.prototype.join.call(arguments,"")};goog.string.getRandomString=function(){return Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^goog.now()).toString(36)};goog.string.compareVersions=goog.string.internal.compareVersions;goog.string.hashCode=function(a){for(var b=0,c=0;c<a.length;++c)b=31*b+a.charCodeAt(c)>>>0;return b};goog.string.uniqueStringCounter_=2147483648*Math.random()|0;
goog.string.createUniqueString=function(){return"goog_"+goog.string.uniqueStringCounter_++};goog.string.toNumber=function(a){var b=Number(a);return 0==b&&goog.string.isEmptyOrWhitespace(a)?NaN:b};goog.string.isLowerCamelCase=function(a){return/^[a-z]+([A-Z][a-z]*)*$/.test(a)};goog.string.isUpperCamelCase=function(a){return/^([A-Z][a-z]*)+$/.test(a)};goog.string.toCamelCase=function(a){return String(a).replace(/\-([a-z])/g,function(a,c){return c.toUpperCase()})};
goog.string.toSelectorCase=function(a){return String(a).replace(/([A-Z])/g,"-$1").toLowerCase()};goog.string.toTitleCase=function(a,b){b=goog.isString(b)?goog.string.regExpEscape(b):"\\s";return a.replace(new RegExp("(^"+(b?"|["+b+"]+":"")+")([a-z])","g"),function(a,b,e){return b+e.toUpperCase()})};goog.string.capitalize=function(a){return String(a.charAt(0)).toUpperCase()+String(a.substr(1)).toLowerCase()};
goog.string.parseInt=function(a){isFinite(a)&&(a=String(a));return goog.isString(a)?/^\s*-?0x/i.test(a)?parseInt(a,16):parseInt(a,10):NaN};goog.string.splitLimit=function(a,b,c){a=a.split(b);for(var d=[];0<c&&a.length;)d.push(a.shift()),c--;a.length&&d.push(a.join(b));return d};goog.string.lastComponent=function(a,b){if(b)"string"==typeof b&&(b=[b]);else return a;for(var c=-1,d=0;d<b.length;d++)if(""!=b[d]){var e=a.lastIndexOf(b[d]);e>c&&(c=e)}return-1==c?a:a.slice(c+1)};
goog.string.editDistance=function(a,b){var c=[],d=[];if(a==b)return 0;if(!a.length||!b.length)return Math.max(a.length,b.length);for(var e=0;e<b.length+1;e++)c[e]=e;for(e=0;e<a.length;e++){d[0]=e+1;for(var f=0;f<b.length;f++)d[f+1]=Math.min(d[f]+1,c[f+1]+1,c[f]+Number(a[e]!=b[f]));for(f=0;f<c.length;f++)c[f]=d[f]}return d[b.length]};goog.labs.userAgent.engine={};goog.labs.userAgent.engine.isPresto=function(){return goog.labs.userAgent.util.matchUserAgent("Presto")};goog.labs.userAgent.engine.isTrident=function(){return goog.labs.userAgent.util.matchUserAgent("Trident")||goog.labs.userAgent.util.matchUserAgent("MSIE")};goog.labs.userAgent.engine.isEdge=function(){return goog.labs.userAgent.util.matchUserAgent("Edge")};
goog.labs.userAgent.engine.isWebKit=function(){return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit")&&!goog.labs.userAgent.engine.isEdge()};goog.labs.userAgent.engine.isGecko=function(){return goog.labs.userAgent.util.matchUserAgent("Gecko")&&!goog.labs.userAgent.engine.isWebKit()&&!goog.labs.userAgent.engine.isTrident()&&!goog.labs.userAgent.engine.isEdge()};
goog.labs.userAgent.engine.getVersion=function(){var a=goog.labs.userAgent.util.getUserAgent();if(a){a=goog.labs.userAgent.util.extractVersionTuples(a);var b=goog.labs.userAgent.engine.getEngineTuple_(a);if(b)return"Gecko"==b[0]?goog.labs.userAgent.engine.getVersionForKey_(a,"Firefox"):b[1];a=a[0];var c;if(a&&(c=a[2])&&(c=/Trident\/([^\s;]+)/.exec(c)))return c[1]}return""};
goog.labs.userAgent.engine.getEngineTuple_=function(a){if(!goog.labs.userAgent.engine.isEdge())return a[1];for(var b=0;b<a.length;b++){var c=a[b];if("Edge"==c[0])return c}};goog.labs.userAgent.engine.isVersionOrHigher=function(a){return 0<=goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(),a)};goog.labs.userAgent.engine.getVersionForKey_=function(a,b){return(a=goog.array.find(a,function(a){return b==a[0]}))&&a[1]||""};goog.labs.userAgent.platform={};goog.labs.userAgent.platform.isAndroid=function(){return goog.labs.userAgent.util.matchUserAgent("Android")};goog.labs.userAgent.platform.isIpod=function(){return goog.labs.userAgent.util.matchUserAgent("iPod")};goog.labs.userAgent.platform.isIphone=function(){return goog.labs.userAgent.util.matchUserAgent("iPhone")&&!goog.labs.userAgent.util.matchUserAgent("iPod")&&!goog.labs.userAgent.util.matchUserAgent("iPad")};goog.labs.userAgent.platform.isIpad=function(){return goog.labs.userAgent.util.matchUserAgent("iPad")};
goog.labs.userAgent.platform.isIos=function(){return goog.labs.userAgent.platform.isIphone()||goog.labs.userAgent.platform.isIpad()||goog.labs.userAgent.platform.isIpod()};goog.labs.userAgent.platform.isMacintosh=function(){return goog.labs.userAgent.util.matchUserAgent("Macintosh")};goog.labs.userAgent.platform.isLinux=function(){return goog.labs.userAgent.util.matchUserAgent("Linux")};goog.labs.userAgent.platform.isWindows=function(){return goog.labs.userAgent.util.matchUserAgent("Windows")};
goog.labs.userAgent.platform.isChromeOS=function(){return goog.labs.userAgent.util.matchUserAgent("CrOS")};goog.labs.userAgent.platform.isChromecast=function(){return goog.labs.userAgent.util.matchUserAgent("CrKey")};goog.labs.userAgent.platform.isKaiOS=function(){return goog.labs.userAgent.util.matchUserAgentIgnoreCase("KaiOS")};goog.labs.userAgent.platform.isGo2Phone=function(){return goog.labs.userAgent.util.matchUserAgentIgnoreCase("GAFP")};
goog.labs.userAgent.platform.getVersion=function(){var a=goog.labs.userAgent.util.getUserAgent(),b="";goog.labs.userAgent.platform.isWindows()?(b=/Windows (?:NT|Phone) ([0-9.]+)/,b=(a=b.exec(a))?a[1]:"0.0"):goog.labs.userAgent.platform.isIos()?(b=/(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/,b=(a=b.exec(a))&&a[1].replace(/_/g,".")):goog.labs.userAgent.platform.isMacintosh()?(b=/Mac OS X ([0-9_.]+)/,b=(a=b.exec(a))?a[1].replace(/_/g,"."):"10"):goog.labs.userAgent.platform.isKaiOS()?(b=/(?:KaiOS)\/(\S+)/i,
b=(a=b.exec(a))&&a[1]):goog.labs.userAgent.platform.isAndroid()?(b=/Android\s+([^\);]+)(\)|;)/,b=(a=b.exec(a))&&a[1]):goog.labs.userAgent.platform.isChromeOS()&&(b=/(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/,b=(a=b.exec(a))&&a[1]);return b||""};goog.labs.userAgent.platform.isVersionOrHigher=function(a){return 0<=goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(),a)};goog.reflect={};goog.reflect.object=function(a,b){return b};goog.reflect.objectProperty=function(a,b){return a};goog.reflect.sinkValue=function(a){goog.reflect.sinkValue[" "](a);return a};goog.reflect.sinkValue[" "]=goog.nullFunction;goog.reflect.canAccessProperty=function(a,b){try{return goog.reflect.sinkValue(a[b]),!0}catch(c){}return!1};goog.reflect.cache=function(a,b,c,d){d=d?d(b):b;return Object.prototype.hasOwnProperty.call(a,d)?a[d]:a[d]=c(b)};goog.userAgent={};goog.userAgent.ASSUME_IE=!1;goog.userAgent.ASSUME_EDGE=!1;goog.userAgent.ASSUME_GECKO=!1;goog.userAgent.ASSUME_WEBKIT=!1;goog.userAgent.ASSUME_MOBILE_WEBKIT=!1;goog.userAgent.ASSUME_OPERA=!1;goog.userAgent.ASSUME_ANY_VERSION=!1;goog.userAgent.BROWSER_KNOWN_=goog.userAgent.ASSUME_IE||goog.userAgent.ASSUME_EDGE||goog.userAgent.ASSUME_GECKO||goog.userAgent.ASSUME_MOBILE_WEBKIT||goog.userAgent.ASSUME_WEBKIT||goog.userAgent.ASSUME_OPERA;goog.userAgent.getUserAgentString=function(){return goog.labs.userAgent.util.getUserAgent()};
goog.userAgent.getNavigatorTyped=function(){return goog.global.navigator||null};goog.userAgent.getNavigator=function(){return goog.userAgent.getNavigatorTyped()};goog.userAgent.OPERA=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_OPERA:goog.labs.userAgent.browser.isOpera();goog.userAgent.IE=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_IE:goog.labs.userAgent.browser.isIE();goog.userAgent.EDGE=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_EDGE:goog.labs.userAgent.engine.isEdge();
goog.userAgent.EDGE_OR_IE=goog.userAgent.EDGE||goog.userAgent.IE;goog.userAgent.GECKO=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_GECKO:goog.labs.userAgent.engine.isGecko();goog.userAgent.WEBKIT=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_WEBKIT||goog.userAgent.ASSUME_MOBILE_WEBKIT:goog.labs.userAgent.engine.isWebKit();goog.userAgent.isMobile_=function(){return goog.userAgent.WEBKIT&&goog.labs.userAgent.util.matchUserAgent("Mobile")};
goog.userAgent.MOBILE=goog.userAgent.ASSUME_MOBILE_WEBKIT||goog.userAgent.isMobile_();goog.userAgent.SAFARI=goog.userAgent.WEBKIT;goog.userAgent.determinePlatform_=function(){var a=goog.userAgent.getNavigatorTyped();return a&&a.platform||""};goog.userAgent.PLATFORM=goog.userAgent.determinePlatform_();goog.userAgent.ASSUME_MAC=!1;goog.userAgent.ASSUME_WINDOWS=!1;goog.userAgent.ASSUME_LINUX=!1;goog.userAgent.ASSUME_X11=!1;goog.userAgent.ASSUME_ANDROID=!1;goog.userAgent.ASSUME_IPHONE=!1;
goog.userAgent.ASSUME_IPAD=!1;goog.userAgent.ASSUME_IPOD=!1;goog.userAgent.ASSUME_KAIOS=!1;goog.userAgent.ASSUME_GO2PHONE=!1;goog.userAgent.PLATFORM_KNOWN_=goog.userAgent.ASSUME_MAC||goog.userAgent.ASSUME_WINDOWS||goog.userAgent.ASSUME_LINUX||goog.userAgent.ASSUME_X11||goog.userAgent.ASSUME_ANDROID||goog.userAgent.ASSUME_IPHONE||goog.userAgent.ASSUME_IPAD||goog.userAgent.ASSUME_IPOD;goog.userAgent.MAC=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_MAC:goog.labs.userAgent.platform.isMacintosh();
goog.userAgent.WINDOWS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_WINDOWS:goog.labs.userAgent.platform.isWindows();goog.userAgent.isLegacyLinux_=function(){return goog.labs.userAgent.platform.isLinux()||goog.labs.userAgent.platform.isChromeOS()};goog.userAgent.LINUX=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_LINUX:goog.userAgent.isLegacyLinux_();goog.userAgent.isX11_=function(){var a=goog.userAgent.getNavigatorTyped();return!!a&&goog.string.contains(a.appVersion||"","X11")};
goog.userAgent.X11=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_X11:goog.userAgent.isX11_();goog.userAgent.ANDROID=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_ANDROID:goog.labs.userAgent.platform.isAndroid();goog.userAgent.IPHONE=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPHONE:goog.labs.userAgent.platform.isIphone();goog.userAgent.IPAD=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPAD:goog.labs.userAgent.platform.isIpad();
goog.userAgent.IPOD=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPOD:goog.labs.userAgent.platform.isIpod();goog.userAgent.IOS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPHONE||goog.userAgent.ASSUME_IPAD||goog.userAgent.ASSUME_IPOD:goog.labs.userAgent.platform.isIos();goog.userAgent.KAIOS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_KAIOS:goog.labs.userAgent.platform.isKaiOS();goog.userAgent.GO2PHONE=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_GO2PHONE:goog.labs.userAgent.platform.isGo2Phone();
goog.userAgent.determineVersion_=function(){var a="",b=goog.userAgent.getVersionRegexResult_();b&&(a=b?b[1]:"");return goog.userAgent.IE&&(b=goog.userAgent.getDocumentMode_(),null!=b&&b>parseFloat(a))?String(b):a};
goog.userAgent.getVersionRegexResult_=function(){var a=goog.userAgent.getUserAgentString();if(goog.userAgent.GECKO)return/rv:([^\);]+)(\)|;)/.exec(a);if(goog.userAgent.EDGE)return/Edge\/([\d\.]+)/.exec(a);if(goog.userAgent.IE)return/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(goog.userAgent.WEBKIT)return/WebKit\/(\S+)/.exec(a);if(goog.userAgent.OPERA)return/(?:Version)[ \/]?(\S+)/.exec(a)};goog.userAgent.getDocumentMode_=function(){var a=goog.global.document;return a?a.documentMode:void 0};
goog.userAgent.VERSION=goog.userAgent.determineVersion_();goog.userAgent.compare=function(a,b){return goog.string.compareVersions(a,b)};goog.userAgent.isVersionOrHigherCache_={};goog.userAgent.isVersionOrHigher=function(a){return goog.userAgent.ASSUME_ANY_VERSION||goog.reflect.cache(goog.userAgent.isVersionOrHigherCache_,a,function(){return 0<=goog.string.compareVersions(goog.userAgent.VERSION,a)})};goog.userAgent.isVersion=goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher=function(a){return Number(goog.userAgent.DOCUMENT_MODE)>=a};goog.userAgent.isDocumentMode=goog.userAgent.isDocumentModeOrHigher;goog.userAgent.DOCUMENT_MODE=function(){if(goog.global.document&&goog.userAgent.IE)return goog.userAgent.getDocumentMode_()}();goog.userAgent.product={};goog.userAgent.product.ASSUME_FIREFOX=!1;goog.userAgent.product.ASSUME_IPHONE=!1;goog.userAgent.product.ASSUME_IPAD=!1;goog.userAgent.product.ASSUME_ANDROID=!1;goog.userAgent.product.ASSUME_CHROME=!1;goog.userAgent.product.ASSUME_SAFARI=!1;
goog.userAgent.product.PRODUCT_KNOWN_=goog.userAgent.ASSUME_IE||goog.userAgent.ASSUME_EDGE||goog.userAgent.ASSUME_OPERA||goog.userAgent.product.ASSUME_FIREFOX||goog.userAgent.product.ASSUME_IPHONE||goog.userAgent.product.ASSUME_IPAD||goog.userAgent.product.ASSUME_ANDROID||goog.userAgent.product.ASSUME_CHROME||goog.userAgent.product.ASSUME_SAFARI;goog.userAgent.product.OPERA=goog.userAgent.OPERA;goog.userAgent.product.IE=goog.userAgent.IE;goog.userAgent.product.EDGE=goog.userAgent.EDGE;
goog.userAgent.product.FIREFOX=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_FIREFOX:goog.labs.userAgent.browser.isFirefox();goog.userAgent.product.isIphoneOrIpod_=function(){return goog.labs.userAgent.platform.isIphone()||goog.labs.userAgent.platform.isIpod()};goog.userAgent.product.IPHONE=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_IPHONE:goog.userAgent.product.isIphoneOrIpod_();
goog.userAgent.product.IPAD=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_IPAD:goog.labs.userAgent.platform.isIpad();goog.userAgent.product.ANDROID=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_ANDROID:goog.labs.userAgent.browser.isAndroidBrowser();goog.userAgent.product.CHROME=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_CHROME:goog.labs.userAgent.browser.isChrome();
goog.userAgent.product.isSafariDesktop_=function(){return goog.labs.userAgent.browser.isSafari()&&!goog.labs.userAgent.platform.isIos()};goog.userAgent.product.SAFARI=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_SAFARI:goog.userAgent.product.isSafariDesktop_();goog.crypt.base64={};goog.crypt.base64.DEFAULT_ALPHABET_COMMON_="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";goog.crypt.base64.ENCODED_VALS=goog.crypt.base64.DEFAULT_ALPHABET_COMMON_+"+/=";goog.crypt.base64.ENCODED_VALS_WEBSAFE=goog.crypt.base64.DEFAULT_ALPHABET_COMMON_+"-_.";goog.crypt.base64.Alphabet={DEFAULT:0,NO_PADDING:1,WEBSAFE:2,WEBSAFE_DOT_PADDING:3,WEBSAFE_NO_PADDING:4};goog.crypt.base64.paddingChars_="=.";
goog.crypt.base64.isPadding_=function(a){return goog.string.contains(goog.crypt.base64.paddingChars_,a)};goog.crypt.base64.byteToCharMaps_={};goog.crypt.base64.charToByteMap_=null;goog.crypt.base64.ASSUME_NATIVE_SUPPORT_=goog.userAgent.GECKO||goog.userAgent.WEBKIT&&!goog.userAgent.product.SAFARI||goog.userAgent.OPERA;goog.crypt.base64.HAS_NATIVE_ENCODE_=goog.crypt.base64.ASSUME_NATIVE_SUPPORT_||"function"==typeof goog.global.btoa;
goog.crypt.base64.HAS_NATIVE_DECODE_=goog.crypt.base64.ASSUME_NATIVE_SUPPORT_||!goog.userAgent.product.SAFARI&&!goog.userAgent.IE&&"function"==typeof goog.global.atob;
goog.crypt.base64.encodeByteArray=function(a,b){goog.asserts.assert(goog.isArrayLike(a),"encodeByteArray takes an array as a parameter");void 0===b&&(b=goog.crypt.base64.Alphabet.DEFAULT);goog.crypt.base64.init_();b=goog.crypt.base64.byteToCharMaps_[b];for(var c=[],d=0;d<a.length;d+=3){var e=a[d],f=d+1<a.length,g=f?a[d+1]:0,h=d+2<a.length,k=h?a[d+2]:0,l=e>>2;e=(e&3)<<4|g>>4;g=(g&15)<<2|k>>6;k&=63;h||(k=64,f||(g=64));c.push(b[l],b[e],b[g]||"",b[k]||"")}return c.join("")};
goog.crypt.base64.encodeString=function(a,b){return goog.crypt.base64.HAS_NATIVE_ENCODE_&&!b?goog.global.btoa(a):goog.crypt.base64.encodeByteArray(goog.crypt.stringToByteArray(a),b)};goog.crypt.base64.decodeString=function(a,b){if(goog.crypt.base64.HAS_NATIVE_DECODE_&&!b)return goog.global.atob(a);var c="";goog.crypt.base64.decodeStringInternal_(a,function(a){c+=String.fromCharCode(a)});return c};
goog.crypt.base64.decodeStringToByteArray=function(a,b){var c=[];goog.crypt.base64.decodeStringInternal_(a,function(a){c.push(a)});return c};
goog.crypt.base64.decodeStringToUint8Array=function(a){goog.asserts.assert(!goog.userAgent.IE||goog.userAgent.isVersionOrHigher("10"),"Browser does not support typed arrays");var b=a.length,c=3*b/4;c%3?c=Math.floor(c):goog.crypt.base64.isPadding_(a[b-1])&&(c=goog.crypt.base64.isPadding_(a[b-2])?c-2:c-1);var d=new Uint8Array(c),e=0;goog.crypt.base64.decodeStringInternal_(a,function(a){d[e++]=a});return d.subarray(0,e)};
goog.crypt.base64.decodeStringInternal_=function(a,b){function c(b){for(;d<a.length;){var c=a.charAt(d++),e=goog.crypt.base64.charToByteMap_[c];if(null!=e)return e;if(!goog.string.isEmptyOrWhitespace(c))throw Error("Unknown base64 encoding at char: "+c);}return b}goog.crypt.base64.init_();for(var d=0;;){var e=c(-1),f=c(0),g=c(64),h=c(64);if(64===h&&-1===e)break;b(e<<2|f>>4);64!=g&&(b(f<<4&240|g>>2),64!=h&&b(g<<6&192|h))}};
goog.crypt.base64.init_=function(){if(!goog.crypt.base64.charToByteMap_){goog.crypt.base64.charToByteMap_={};for(var a=goog.crypt.base64.DEFAULT_ALPHABET_COMMON_.split(""),b=["+/=","+/","-_=","-_.","-_"],c=0;5>c;c++){var d=a.concat(b[c].split(""));goog.crypt.base64.byteToCharMaps_[c]=d;for(var e=0;e<d.length;e++){var f=d[e],g=goog.crypt.base64.charToByteMap_[f];void 0===g?goog.crypt.base64.charToByteMap_[f]=e:goog.asserts.assert(g===e)}}}};jspb.utils={};jspb.utils.split64Low=0;jspb.utils.split64High=0;jspb.utils.splitUint64=function(a){var b=a>>>0;a=Math.floor((a-b)/jspb.BinaryConstants.TWO_TO_32)>>>0;jspb.utils.split64Low=b;jspb.utils.split64High=a};jspb.utils.splitInt64=function(a){var b=0>a;a=Math.abs(a);var c=a>>>0;a=Math.floor((a-c)/jspb.BinaryConstants.TWO_TO_32);a>>>=0;b&&(a=~a>>>0,c=(~c>>>0)+1,4294967295<c&&(c=0,a++,4294967295<a&&(a=0)));jspb.utils.split64Low=c;jspb.utils.split64High=a};
jspb.utils.splitZigzag64=function(a){var b=0>a;a=2*Math.abs(a);jspb.utils.splitUint64(a);a=jspb.utils.split64Low;var c=jspb.utils.split64High;b&&(0==a?0==c?c=a=4294967295:(c--,a=4294967295):a--);jspb.utils.split64Low=a;jspb.utils.split64High=c};
jspb.utils.splitFloat32=function(a){var b=0>a?1:0;a=b?-a:a;if(0===a)0<1/a?(jspb.utils.split64High=0,jspb.utils.split64Low=0):(jspb.utils.split64High=0,jspb.utils.split64Low=2147483648);else if(isNaN(a))jspb.utils.split64High=0,jspb.utils.split64Low=2147483647;else if(a>jspb.BinaryConstants.FLOAT32_MAX)jspb.utils.split64High=0,jspb.utils.split64Low=(b<<31|2139095040)>>>0;else if(a<jspb.BinaryConstants.FLOAT32_MIN)a=Math.round(a/Math.pow(2,-149)),jspb.utils.split64High=0,jspb.utils.split64Low=(b<<31|
a)>>>0;else{var c=Math.floor(Math.log(a)/Math.LN2);a*=Math.pow(2,-c);a=Math.round(a*jspb.BinaryConstants.TWO_TO_23)&8388607;jspb.utils.split64High=0;jspb.utils.split64Low=(b<<31|c+127<<23|a)>>>0}};
jspb.utils.splitFloat64=function(a){var b=0>a?1:0;a=b?-a:a;if(0===a)jspb.utils.split64High=0<1/a?0:2147483648,jspb.utils.split64Low=0;else if(isNaN(a))jspb.utils.split64High=2147483647,jspb.utils.split64Low=4294967295;else if(a>jspb.BinaryConstants.FLOAT64_MAX)jspb.utils.split64High=(b<<31|2146435072)>>>0,jspb.utils.split64Low=0;else if(a<jspb.BinaryConstants.FLOAT64_MIN){var c=a/Math.pow(2,-1074);a=c/jspb.BinaryConstants.TWO_TO_32;jspb.utils.split64High=(b<<31|a)>>>0;jspb.utils.split64Low=c>>>0}else{c=
a;var d=0;if(2<=c)for(;2<=c&&1023>d;)d++,c/=2;else for(;1>c&&-1022<d;)c*=2,d--;c=a*Math.pow(2,-d);a=c*jspb.BinaryConstants.TWO_TO_20&1048575;c=c*jspb.BinaryConstants.TWO_TO_52>>>0;jspb.utils.split64High=(b<<31|d+1023<<20|a)>>>0;jspb.utils.split64Low=c}};
jspb.utils.splitHash64=function(a){var b=a.charCodeAt(0),c=a.charCodeAt(1),d=a.charCodeAt(2),e=a.charCodeAt(3),f=a.charCodeAt(4),g=a.charCodeAt(5),h=a.charCodeAt(6);a=a.charCodeAt(7);jspb.utils.split64Low=b+(c<<8)+(d<<16)+(e<<24)>>>0;jspb.utils.split64High=f+(g<<8)+(h<<16)+(a<<24)>>>0};jspb.utils.joinUint64=function(a,b){return b*jspb.BinaryConstants.TWO_TO_32+(a>>>0)};
jspb.utils.joinInt64=function(a,b){var c=b&2147483648;c&&(a=~a+1>>>0,b=~b>>>0,0==a&&(b=b+1>>>0));a=jspb.utils.joinUint64(a,b);return c?-a:a};jspb.utils.toZigzag64=function(a,b,c){var d=b>>31;return c(a<<1^d,(b<<1|a>>>31)^d)};jspb.utils.joinZigzag64=function(a,b){return jspb.utils.fromZigzag64(a,b,jspb.utils.joinInt64)};jspb.utils.fromZigzag64=function(a,b,c){var d=-(a&1);return c((a>>>1|b<<31)^d,b>>>1^d)};
jspb.utils.joinFloat32=function(a,b){b=2*(a>>31)+1;var c=a>>>23&255;a&=8388607;return 255==c?a?NaN:Infinity*b:0==c?b*Math.pow(2,-149)*a:b*Math.pow(2,c-150)*(a+Math.pow(2,23))};jspb.utils.joinFloat64=function(a,b){var c=2*(b>>31)+1,d=b>>>20&2047;a=jspb.BinaryConstants.TWO_TO_32*(b&1048575)+a;return 2047==d?a?NaN:Infinity*c:0==d?c*Math.pow(2,-1074)*a:c*Math.pow(2,d-1075)*(a+jspb.BinaryConstants.TWO_TO_52)};
jspb.utils.joinHash64=function(a,b){return String.fromCharCode(a>>>0&255,a>>>8&255,a>>>16&255,a>>>24&255,b>>>0&255,b>>>8&255,b>>>16&255,b>>>24&255)};jspb.utils.DIGITS="0123456789abcdef".split("");jspb.utils.ZERO_CHAR_CODE_=48;jspb.utils.A_CHAR_CODE_=97;
jspb.utils.joinUnsignedDecimalString=function(a,b){function c(a,b){a=a?String(a):"";return b?"0000000".slice(a.length)+a:a}if(2097151>=b)return""+jspb.utils.joinUint64(a,b);var d=(a>>>24|b<<8)>>>0&16777215;b=b>>16&65535;a=(a&16777215)+6777216*d+6710656*b;d+=8147497*b;b*=2;1E7<=a&&(d+=Math.floor(a/1E7),a%=1E7);1E7<=d&&(b+=Math.floor(d/1E7),d%=1E7);return c(b,0)+c(d,b)+c(a,1)};
jspb.utils.joinSignedDecimalString=function(a,b){var c=b&2147483648;c&&(a=~a+1>>>0,b=~b+(0==a?1:0)>>>0);a=jspb.utils.joinUnsignedDecimalString(a,b);return c?"-"+a:a};jspb.utils.hash64ToDecimalString=function(a,b){jspb.utils.splitHash64(a);a=jspb.utils.split64Low;var c=jspb.utils.split64High;return b?jspb.utils.joinSignedDecimalString(a,c):jspb.utils.joinUnsignedDecimalString(a,c)};
jspb.utils.hash64ArrayToDecimalStrings=function(a,b){for(var c=Array(a.length),d=0;d<a.length;d++)c[d]=jspb.utils.hash64ToDecimalString(a[d],b);return c};
jspb.utils.decimalStringToHash64=function(a){function b(a,b){for(var c=0;8>c&&(1!==a||0<b);c++)b=a*e[c]+b,e[c]=b&255,b>>>=8}function c(){for(var a=0;8>a;a++)e[a]=~e[a]&255}goog.asserts.assert(0<a.length);var d=!1;"-"===a[0]&&(d=!0,a=a.slice(1));for(var e=[0,0,0,0,0,0,0,0],f=0;f<a.length;f++)b(10,a.charCodeAt(f)-jspb.utils.ZERO_CHAR_CODE_);d&&(c(),b(1,1));return goog.crypt.byteArrayToString(e)};jspb.utils.splitDecimalString=function(a){jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(a))};
jspb.utils.toHexDigit_=function(a){return String.fromCharCode(10>a?jspb.utils.ZERO_CHAR_CODE_+a:jspb.utils.A_CHAR_CODE_-10+a)};jspb.utils.fromHexCharCode_=function(a){return a>=jspb.utils.A_CHAR_CODE_?a-jspb.utils.A_CHAR_CODE_+10:a-jspb.utils.ZERO_CHAR_CODE_};jspb.utils.hash64ToHexString=function(a){var b=Array(18);b[0]="0";b[1]="x";for(var c=0;8>c;c++){var d=a.charCodeAt(7-c);b[2*c+2]=jspb.utils.toHexDigit_(d>>4);b[2*c+3]=jspb.utils.toHexDigit_(d&15)}return b.join("")};
jspb.utils.hexStringToHash64=function(a){a=a.toLowerCase();goog.asserts.assert(18==a.length);goog.asserts.assert("0"==a[0]);goog.asserts.assert("x"==a[1]);for(var b="",c=0;8>c;c++){var d=jspb.utils.fromHexCharCode_(a.charCodeAt(2*c+2)),e=jspb.utils.fromHexCharCode_(a.charCodeAt(2*c+3));b=String.fromCharCode(16*d+e)+b}return b};
jspb.utils.hash64ToNumber=function(a,b){jspb.utils.splitHash64(a);a=jspb.utils.split64Low;var c=jspb.utils.split64High;return b?jspb.utils.joinInt64(a,c):jspb.utils.joinUint64(a,c)};jspb.utils.numberToHash64=function(a){jspb.utils.splitInt64(a);return jspb.utils.joinHash64(jspb.utils.split64Low,jspb.utils.split64High)};jspb.utils.countVarints=function(a,b,c){for(var d=0,e=b;e<c;e++)d+=a[e]>>7;return c-b-d};
jspb.utils.countVarintFields=function(a,b,c,d){var e=0;d=8*d+jspb.BinaryConstants.WireType.VARINT;if(128>d)for(;b<c&&a[b++]==d;)for(e++;;){var f=a[b++];if(0==(f&128))break}else for(;b<c;){for(f=d;128<f;){if(a[b]!=(f&127|128))return e;b++;f>>=7}if(a[b++]!=f)break;for(e++;f=a[b++],0!=(f&128););}return e};jspb.utils.countFixedFields_=function(a,b,c,d,e){var f=0;if(128>d)for(;b<c&&a[b++]==d;)f++,b+=e;else for(;b<c;){for(var g=d;128<g;){if(a[b++]!=(g&127|128))return f;g>>=7}if(a[b++]!=g)break;f++;b+=e}return f};
jspb.utils.countFixed32Fields=function(a,b,c,d){return jspb.utils.countFixedFields_(a,b,c,8*d+jspb.BinaryConstants.WireType.FIXED32,4)};jspb.utils.countFixed64Fields=function(a,b,c,d){return jspb.utils.countFixedFields_(a,b,c,8*d+jspb.BinaryConstants.WireType.FIXED64,8)};
jspb.utils.countDelimitedFields=function(a,b,c,d){var e=0;for(d=8*d+jspb.BinaryConstants.WireType.DELIMITED;b<c;){for(var f=d;128<f;){if(a[b++]!=(f&127|128))return e;f>>=7}if(a[b++]!=f)break;e++;for(var g=0,h=1;f=a[b++],g+=(f&127)*h,h*=128,0!=(f&128););b+=g}return e};jspb.utils.debugBytesToTextFormat=function(a){var b='"';if(a){a=jspb.utils.byteSourceToUint8Array(a);for(var c=0;c<a.length;c++)b+="\\x",16>a[c]&&(b+="0"),b+=a[c].toString(16)}return b+'"'};
jspb.utils.debugScalarToTextFormat=function(a){return"string"===typeof a?goog.string.quote(a):a.toString()};jspb.utils.stringToByteArray=function(a){for(var b=new Uint8Array(a.length),c=0;c<a.length;c++){var d=a.charCodeAt(c);if(255<d)throw Error("Conversion error: string contains codepoint outside of byte range");b[c]=d}return b};
jspb.utils.byteSourceToUint8Array=function(a){if(a.constructor===Uint8Array)return a;if(a.constructor===ArrayBuffer||"undefined"!=typeof Buffer&&a.constructor===Buffer||a.constructor===Array)return new Uint8Array(a);if(a.constructor===String)return goog.crypt.base64.decodeStringToUint8Array(a);goog.asserts.fail("Type not convertible to Uint8Array.");return new Uint8Array(0)};jspb.BinaryDecoder=function(a,b,c){this.bytes_=null;this.cursor_=this.end_=this.start_=0;this.error_=!1;a&&this.setBlock(a,b,c)};jspb.BinaryDecoder.instanceCache_=[];jspb.BinaryDecoder.alloc=function(a,b,c){if(jspb.BinaryDecoder.instanceCache_.length){var d=jspb.BinaryDecoder.instanceCache_.pop();a&&d.setBlock(a,b,c);return d}return new jspb.BinaryDecoder(a,b,c)};jspb.BinaryDecoder.prototype.free=function(){this.clear();100>jspb.BinaryDecoder.instanceCache_.length&&jspb.BinaryDecoder.instanceCache_.push(this)};
jspb.BinaryDecoder.prototype.clone=function(){return jspb.BinaryDecoder.alloc(this.bytes_,this.start_,this.end_-this.start_)};jspb.BinaryDecoder.prototype.clear=function(){this.bytes_=null;this.cursor_=this.end_=this.start_=0;this.error_=!1};jspb.BinaryDecoder.prototype.getBuffer=function(){return this.bytes_};
jspb.BinaryDecoder.prototype.setBlock=function(a,b,c){this.bytes_=jspb.utils.byteSourceToUint8Array(a);this.start_=void 0!==b?b:0;this.end_=void 0!==c?this.start_+c:this.bytes_.length;this.cursor_=this.start_};jspb.BinaryDecoder.prototype.getEnd=function(){return this.end_};jspb.BinaryDecoder.prototype.setEnd=function(a){this.end_=a};jspb.BinaryDecoder.prototype.reset=function(){this.cursor_=this.start_};jspb.BinaryDecoder.prototype.getCursor=function(){return this.cursor_};
jspb.BinaryDecoder.prototype.setCursor=function(a){this.cursor_=a};jspb.BinaryDecoder.prototype.advance=function(a){this.cursor_+=a;goog.asserts.assert(this.cursor_<=this.end_)};jspb.BinaryDecoder.prototype.atEnd=function(){return this.cursor_==this.end_};jspb.BinaryDecoder.prototype.pastEnd=function(){return this.cursor_>this.end_};jspb.BinaryDecoder.prototype.getError=function(){return this.error_||0>this.cursor_||this.cursor_>this.end_};
jspb.BinaryDecoder.prototype.readSplitVarint64=function(a){for(var b=128,c=0,d=0,e=0;4>e&&128<=b;e++)b=this.bytes_[this.cursor_++],c|=(b&127)<<7*e;128<=b&&(b=this.bytes_[this.cursor_++],c|=(b&127)<<28,d|=(b&127)>>4);if(128<=b)for(e=0;5>e&&128<=b;e++)b=this.bytes_[this.cursor_++],d|=(b&127)<<7*e+3;if(128>b)return a(c>>>0,d>>>0);goog.asserts.fail("Failed to read varint, encoding is invalid.");this.error_=!0};
jspb.BinaryDecoder.prototype.readSplitZigzagVarint64=function(a){return this.readSplitVarint64(function(b,c){return jspb.utils.fromZigzag64(b,c,a)})};jspb.BinaryDecoder.prototype.readSplitFixed64=function(a){var b=this.bytes_,c=this.cursor_;this.cursor_+=8;for(var d=0,e=0,f=c+7;f>=c;f--)d=d<<8|b[f],e=e<<8|b[f+4];return a(d,e)};jspb.BinaryDecoder.prototype.skipVarint=function(){for(;this.bytes_[this.cursor_]&128;)this.cursor_++;this.cursor_++};
jspb.BinaryDecoder.prototype.unskipVarint=function(a){for(;128<a;)this.cursor_--,a>>>=7;this.cursor_--};
jspb.BinaryDecoder.prototype.readUnsignedVarint32=function(){var a=this.bytes_;var b=a[this.cursor_+0];var c=b&127;if(128>b)return this.cursor_+=1,goog.asserts.assert(this.cursor_<=this.end_),c;b=a[this.cursor_+1];c|=(b&127)<<7;if(128>b)return this.cursor_+=2,goog.asserts.assert(this.cursor_<=this.end_),c;b=a[this.cursor_+2];c|=(b&127)<<14;if(128>b)return this.cursor_+=3,goog.asserts.assert(this.cursor_<=this.end_),c;b=a[this.cursor_+3];c|=(b&127)<<21;if(128>b)return this.cursor_+=4,goog.asserts.assert(this.cursor_<=
this.end_),c;b=a[this.cursor_+4];c|=(b&15)<<28;if(128>b)return this.cursor_+=5,goog.asserts.assert(this.cursor_<=this.end_),c>>>0;this.cursor_+=5;128<=a[this.cursor_++]&&128<=a[this.cursor_++]&&128<=a[this.cursor_++]&&128<=a[this.cursor_++]&&128<=a[this.cursor_++]&&goog.asserts.assert(!1);goog.asserts.assert(this.cursor_<=this.end_);return c};jspb.BinaryDecoder.prototype.readSignedVarint32=jspb.BinaryDecoder.prototype.readUnsignedVarint32;jspb.BinaryDecoder.prototype.readUnsignedVarint32String=function(){return this.readUnsignedVarint32().toString()};
jspb.BinaryDecoder.prototype.readSignedVarint32String=function(){return this.readSignedVarint32().toString()};jspb.BinaryDecoder.prototype.readZigzagVarint32=function(){var a=this.readUnsignedVarint32();return a>>>1^-(a&1)};jspb.BinaryDecoder.prototype.readUnsignedVarint64=function(){return this.readSplitVarint64(jspb.utils.joinUint64)};jspb.BinaryDecoder.prototype.readUnsignedVarint64String=function(){return this.readSplitVarint64(jspb.utils.joinUnsignedDecimalString)};
jspb.BinaryDecoder.prototype.readSignedVarint64=function(){return this.readSplitVarint64(jspb.utils.joinInt64)};jspb.BinaryDecoder.prototype.readSignedVarint64String=function(){return this.readSplitVarint64(jspb.utils.joinSignedDecimalString)};jspb.BinaryDecoder.prototype.readZigzagVarint64=function(){return this.readSplitVarint64(jspb.utils.joinZigzag64)};jspb.BinaryDecoder.prototype.readZigzagVarintHash64=function(){return this.readSplitZigzagVarint64(jspb.utils.joinHash64)};
jspb.BinaryDecoder.prototype.readZigzagVarint64String=function(){return this.readSplitZigzagVarint64(jspb.utils.joinSignedDecimalString)};jspb.BinaryDecoder.prototype.readUint8=function(){var a=this.bytes_[this.cursor_+0];this.cursor_+=1;goog.asserts.assert(this.cursor_<=this.end_);return a};jspb.BinaryDecoder.prototype.readUint16=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1];this.cursor_+=2;goog.asserts.assert(this.cursor_<=this.end_);return a<<0|b<<8};
jspb.BinaryDecoder.prototype.readUint32=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1],c=this.bytes_[this.cursor_+2],d=this.bytes_[this.cursor_+3];this.cursor_+=4;goog.asserts.assert(this.cursor_<=this.end_);return(a<<0|b<<8|c<<16|d<<24)>>>0};jspb.BinaryDecoder.prototype.readUint64=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinUint64(a,b)};
jspb.BinaryDecoder.prototype.readUint64String=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinUnsignedDecimalString(a,b)};jspb.BinaryDecoder.prototype.readInt8=function(){var a=this.bytes_[this.cursor_+0];this.cursor_+=1;goog.asserts.assert(this.cursor_<=this.end_);return a<<24>>24};
jspb.BinaryDecoder.prototype.readInt16=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1];this.cursor_+=2;goog.asserts.assert(this.cursor_<=this.end_);return(a<<0|b<<8)<<16>>16};jspb.BinaryDecoder.prototype.readInt32=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1],c=this.bytes_[this.cursor_+2],d=this.bytes_[this.cursor_+3];this.cursor_+=4;goog.asserts.assert(this.cursor_<=this.end_);return a<<0|b<<8|c<<16|d<<24};
jspb.BinaryDecoder.prototype.readInt64=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinInt64(a,b)};jspb.BinaryDecoder.prototype.readInt64String=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinSignedDecimalString(a,b)};jspb.BinaryDecoder.prototype.readFloat=function(){var a=this.readUint32();return jspb.utils.joinFloat32(a,0)};
jspb.BinaryDecoder.prototype.readDouble=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinFloat64(a,b)};jspb.BinaryDecoder.prototype.readBool=function(){return!!this.bytes_[this.cursor_++]};jspb.BinaryDecoder.prototype.readEnum=function(){return this.readSignedVarint32()};
jspb.BinaryDecoder.prototype.readString=function(a){var b=this.bytes_,c=this.cursor_;a=c+a;for(var d=[],e="";c<a;){var f=b[c++];if(128>f)d.push(f);else if(192>f)continue;else if(224>f){var g=b[c++];d.push((f&31)<<6|g&63)}else if(240>f){g=b[c++];var h=b[c++];d.push((f&15)<<12|(g&63)<<6|h&63)}else if(248>f){g=b[c++];h=b[c++];var k=b[c++];f=(f&7)<<18|(g&63)<<12|(h&63)<<6|k&63;f-=65536;d.push((f>>10&1023)+55296,(f&1023)+56320)}8192<=d.length&&(e+=String.fromCharCode.apply(null,d),d.length=0)}e+=goog.crypt.byteArrayToString(d);
this.cursor_=c;return e};jspb.BinaryDecoder.prototype.readStringWithLength=function(){var a=this.readUnsignedVarint32();return this.readString(a)};jspb.BinaryDecoder.prototype.readBytes=function(a){if(0>a||this.cursor_+a>this.bytes_.length)return this.error_=!0,goog.asserts.fail("Invalid byte length!"),new Uint8Array(0);var b=this.bytes_.subarray(this.cursor_,this.cursor_+a);this.cursor_+=a;goog.asserts.assert(this.cursor_<=this.end_);return b};jspb.BinaryDecoder.prototype.readVarintHash64=function(){return this.readSplitVarint64(jspb.utils.joinHash64)};
jspb.BinaryDecoder.prototype.readFixedHash64=function(){var a=this.bytes_,b=this.cursor_,c=a[b+0],d=a[b+1],e=a[b+2],f=a[b+3],g=a[b+4],h=a[b+5],k=a[b+6];a=a[b+7];this.cursor_+=8;return String.fromCharCode(c,d,e,f,g,h,k,a)};jspb.BinaryReader=function(a,b,c){this.decoder_=jspb.BinaryDecoder.alloc(a,b,c);this.fieldCursor_=this.decoder_.getCursor();this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID;this.error_=!1;this.readCallbacks_=null};jspb.BinaryReader.instanceCache_=[];
jspb.BinaryReader.alloc=function(a,b,c){if(jspb.BinaryReader.instanceCache_.length){var d=jspb.BinaryReader.instanceCache_.pop();a&&d.decoder_.setBlock(a,b,c);return d}return new jspb.BinaryReader(a,b,c)};jspb.BinaryReader.prototype.alloc=jspb.BinaryReader.alloc;
jspb.BinaryReader.prototype.free=function(){this.decoder_.clear();this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID;this.error_=!1;this.readCallbacks_=null;100>jspb.BinaryReader.instanceCache_.length&&jspb.BinaryReader.instanceCache_.push(this)};jspb.BinaryReader.prototype.getFieldCursor=function(){return this.fieldCursor_};jspb.BinaryReader.prototype.getCursor=function(){return this.decoder_.getCursor()};
jspb.BinaryReader.prototype.getBuffer=function(){return this.decoder_.getBuffer()};jspb.BinaryReader.prototype.getFieldNumber=function(){return this.nextField_};jspb.BinaryReader.prototype.getWireType=function(){return this.nextWireType_};jspb.BinaryReader.prototype.isDelimited=function(){return this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED};jspb.BinaryReader.prototype.isEndGroup=function(){return this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP};
jspb.BinaryReader.prototype.getError=function(){return this.error_||this.decoder_.getError()};jspb.BinaryReader.prototype.setBlock=function(a,b,c){this.decoder_.setBlock(a,b,c);this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID};jspb.BinaryReader.prototype.reset=function(){this.decoder_.reset();this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID};
jspb.BinaryReader.prototype.advance=function(a){this.decoder_.advance(a)};
jspb.BinaryReader.prototype.nextField=function(){if(this.decoder_.atEnd())return!1;if(this.getError())return goog.asserts.fail("Decoder hit an error"),!1;this.fieldCursor_=this.decoder_.getCursor();var a=this.decoder_.readUnsignedVarint32(),b=a>>>3;a&=7;if(a!=jspb.BinaryConstants.WireType.VARINT&&a!=jspb.BinaryConstants.WireType.FIXED32&&a!=jspb.BinaryConstants.WireType.FIXED64&&a!=jspb.BinaryConstants.WireType.DELIMITED&&a!=jspb.BinaryConstants.WireType.START_GROUP&&a!=jspb.BinaryConstants.WireType.END_GROUP)return goog.asserts.fail("Invalid wire type: %s (at position %s)",
a,this.fieldCursor_),this.error_=!0,!1;this.nextField_=b;this.nextWireType_=a;return!0};jspb.BinaryReader.prototype.unskipHeader=function(){this.decoder_.unskipVarint(this.nextField_<<3|this.nextWireType_)};jspb.BinaryReader.prototype.skipMatchingFields=function(){var a=this.nextField_;for(this.unskipHeader();this.nextField()&&this.getFieldNumber()==a;)this.skipField();this.decoder_.atEnd()||this.unskipHeader()};
jspb.BinaryReader.prototype.skipVarintField=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.VARINT?(goog.asserts.fail("Invalid wire type for skipVarintField"),this.skipField()):this.decoder_.skipVarint()};jspb.BinaryReader.prototype.skipDelimitedField=function(){if(this.nextWireType_!=jspb.BinaryConstants.WireType.DELIMITED)goog.asserts.fail("Invalid wire type for skipDelimitedField"),this.skipField();else{var a=this.decoder_.readUnsignedVarint32();this.decoder_.advance(a)}};
jspb.BinaryReader.prototype.skipFixed32Field=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.FIXED32?(goog.asserts.fail("Invalid wire type for skipFixed32Field"),this.skipField()):this.decoder_.advance(4)};jspb.BinaryReader.prototype.skipFixed64Field=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.FIXED64?(goog.asserts.fail("Invalid wire type for skipFixed64Field"),this.skipField()):this.decoder_.advance(8)};
jspb.BinaryReader.prototype.skipGroup=function(){var a=this.nextField_;do{if(!this.nextField()){goog.asserts.fail("Unmatched start-group tag: stream EOF");this.error_=!0;break}if(this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP){this.nextField_!=a&&(goog.asserts.fail("Unmatched end-group tag"),this.error_=!0);break}this.skipField()}while(1)};
jspb.BinaryReader.prototype.skipField=function(){switch(this.nextWireType_){case jspb.BinaryConstants.WireType.VARINT:this.skipVarintField();break;case jspb.BinaryConstants.WireType.FIXED64:this.skipFixed64Field();break;case jspb.BinaryConstants.WireType.DELIMITED:this.skipDelimitedField();break;case jspb.BinaryConstants.WireType.FIXED32:this.skipFixed32Field();break;case jspb.BinaryConstants.WireType.START_GROUP:this.skipGroup();break;default:goog.asserts.fail("Invalid wire encoding for field.")}};
jspb.BinaryReader.prototype.registerReadCallback=function(a,b){null===this.readCallbacks_&&(this.readCallbacks_={});goog.asserts.assert(!this.readCallbacks_[a]);this.readCallbacks_[a]=b};jspb.BinaryReader.prototype.runReadCallback=function(a){goog.asserts.assert(null!==this.readCallbacks_);a=this.readCallbacks_[a];goog.asserts.assert(a);return a(this)};
jspb.BinaryReader.prototype.readAny=function(a){this.nextWireType_=jspb.BinaryConstants.FieldTypeToWireType(a);var b=jspb.BinaryConstants.FieldType;switch(a){case b.DOUBLE:return this.readDouble();case b.FLOAT:return this.readFloat();case b.INT64:return this.readInt64();case b.UINT64:return this.readUint64();case b.INT32:return this.readInt32();case b.FIXED64:return this.readFixed64();case b.FIXED32:return this.readFixed32();case b.BOOL:return this.readBool();case b.STRING:return this.readString();
case b.GROUP:goog.asserts.fail("Group field type not supported in readAny()");case b.MESSAGE:goog.asserts.fail("Message field type not supported in readAny()");case b.BYTES:return this.readBytes();case b.UINT32:return this.readUint32();case b.ENUM:return this.readEnum();case b.SFIXED32:return this.readSfixed32();case b.SFIXED64:return this.readSfixed64();case b.SINT32:return this.readSint32();case b.SINT64:return this.readSint64();case b.FHASH64:return this.readFixedHash64();case b.VHASH64:return this.readVarintHash64();
default:goog.asserts.fail("Invalid field type in readAny()")}return 0};jspb.BinaryReader.prototype.readMessage=function(a,b){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var c=this.decoder_.getEnd(),d=this.decoder_.readUnsignedVarint32();d=this.decoder_.getCursor()+d;this.decoder_.setEnd(d);b(a,this);this.decoder_.setCursor(d);this.decoder_.setEnd(c)};
jspb.BinaryReader.prototype.readGroup=function(a,b,c){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.START_GROUP);goog.asserts.assert(this.nextField_==a);c(b,this);this.error_||this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP||(goog.asserts.fail("Group submessage did not end with an END_GROUP tag"),this.error_=!0)};
jspb.BinaryReader.prototype.getFieldDecoder=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var a=this.decoder_.readUnsignedVarint32(),b=this.decoder_.getCursor(),c=b+a;a=jspb.BinaryDecoder.alloc(this.decoder_.getBuffer(),b,a);this.decoder_.setCursor(c);return a};jspb.BinaryReader.prototype.readInt32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint32()};
jspb.BinaryReader.prototype.readInt32String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint32String()};jspb.BinaryReader.prototype.readInt64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint64()};jspb.BinaryReader.prototype.readInt64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint64String()};
jspb.BinaryReader.prototype.readUint32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint32()};jspb.BinaryReader.prototype.readUint32String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint32String()};jspb.BinaryReader.prototype.readUint64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint64()};
jspb.BinaryReader.prototype.readUint64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint64String()};jspb.BinaryReader.prototype.readSint32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarint32()};jspb.BinaryReader.prototype.readSint64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarint64()};
jspb.BinaryReader.prototype.readSint64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarint64String()};jspb.BinaryReader.prototype.readFixed32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readUint32()};jspb.BinaryReader.prototype.readFixed64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readUint64()};
jspb.BinaryReader.prototype.readFixed64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readUint64String()};jspb.BinaryReader.prototype.readSfixed32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readInt32()};jspb.BinaryReader.prototype.readSfixed32String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readInt32().toString()};
jspb.BinaryReader.prototype.readSfixed64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readInt64()};jspb.BinaryReader.prototype.readSfixed64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readInt64String()};jspb.BinaryReader.prototype.readFloat=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readFloat()};
jspb.BinaryReader.prototype.readDouble=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readDouble()};jspb.BinaryReader.prototype.readBool=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return!!this.decoder_.readUnsignedVarint32()};jspb.BinaryReader.prototype.readEnum=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint64()};
jspb.BinaryReader.prototype.readString=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var a=this.decoder_.readUnsignedVarint32();return this.decoder_.readString(a)};jspb.BinaryReader.prototype.readBytes=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var a=this.decoder_.readUnsignedVarint32();return this.decoder_.readBytes(a)};
jspb.BinaryReader.prototype.readVarintHash64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readVarintHash64()};jspb.BinaryReader.prototype.readSintHash64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarintHash64()};jspb.BinaryReader.prototype.readSplitVarint64=function(a){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSplitVarint64(a)};
jspb.BinaryReader.prototype.readSplitZigzagVarint64=function(a){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSplitVarint64(function(b,c){return jspb.utils.fromZigzag64(b,c,a)})};jspb.BinaryReader.prototype.readFixedHash64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readFixedHash64()};
jspb.BinaryReader.prototype.readSplitFixed64=function(a){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readSplitFixed64(a)};jspb.BinaryReader.prototype.readPackedField_=function(a){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var b=this.decoder_.readUnsignedVarint32();b=this.decoder_.getCursor()+b;for(var c=[];this.decoder_.getCursor()<b;)c.push(a.call(this.decoder_));return c};
jspb.BinaryReader.prototype.readPackedInt32=function(){return this.readPackedField_(this.decoder_.readSignedVarint32)};jspb.BinaryReader.prototype.readPackedInt32String=function(){return this.readPackedField_(this.decoder_.readSignedVarint32String)};jspb.BinaryReader.prototype.readPackedInt64=function(){return this.readPackedField_(this.decoder_.readSignedVarint64)};jspb.BinaryReader.prototype.readPackedInt64String=function(){return this.readPackedField_(this.decoder_.readSignedVarint64String)};
jspb.BinaryReader.prototype.readPackedUint32=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint32)};jspb.BinaryReader.prototype.readPackedUint32String=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint32String)};jspb.BinaryReader.prototype.readPackedUint64=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint64)};jspb.BinaryReader.prototype.readPackedUint64String=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint64String)};
jspb.BinaryReader.prototype.readPackedSint32=function(){return this.readPackedField_(this.decoder_.readZigzagVarint32)};jspb.BinaryReader.prototype.readPackedSint64=function(){return this.readPackedField_(this.decoder_.readZigzagVarint64)};jspb.BinaryReader.prototype.readPackedSint64String=function(){return this.readPackedField_(this.decoder_.readZigzagVarint64String)};jspb.BinaryReader.prototype.readPackedFixed32=function(){return this.readPackedField_(this.decoder_.readUint32)};
jspb.BinaryReader.prototype.readPackedFixed64=function(){return this.readPackedField_(this.decoder_.readUint64)};jspb.BinaryReader.prototype.readPackedFixed64String=function(){return this.readPackedField_(this.decoder_.readUint64String)};jspb.BinaryReader.prototype.readPackedSfixed32=function(){return this.readPackedField_(this.decoder_.readInt32)};jspb.BinaryReader.prototype.readPackedSfixed64=function(){return this.readPackedField_(this.decoder_.readInt64)};
jspb.BinaryReader.prototype.readPackedSfixed64String=function(){return this.readPackedField_(this.decoder_.readInt64String)};jspb.BinaryReader.prototype.readPackedFloat=function(){return this.readPackedField_(this.decoder_.readFloat)};jspb.BinaryReader.prototype.readPackedDouble=function(){return this.readPackedField_(this.decoder_.readDouble)};jspb.BinaryReader.prototype.readPackedBool=function(){return this.readPackedField_(this.decoder_.readBool)};jspb.BinaryReader.prototype.readPackedEnum=function(){return this.readPackedField_(this.decoder_.readEnum)};
jspb.BinaryReader.prototype.readPackedVarintHash64=function(){return this.readPackedField_(this.decoder_.readVarintHash64)};jspb.BinaryReader.prototype.readPackedFixedHash64=function(){return this.readPackedField_(this.decoder_.readFixedHash64)};jspb.BinaryEncoder=function(){this.buffer_=[]};jspb.BinaryEncoder.prototype.length=function(){return this.buffer_.length};jspb.BinaryEncoder.prototype.end=function(){var a=this.buffer_;this.buffer_=[];return a};
jspb.BinaryEncoder.prototype.writeSplitVarint64=function(a,b){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(b==Math.floor(b));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);for(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32);0<b||127<a;)this.buffer_.push(a&127|128),a=(a>>>7|b<<25)>>>0,b>>>=7;this.buffer_.push(a)};
jspb.BinaryEncoder.prototype.writeSplitFixed64=function(a,b){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(b==Math.floor(b));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32);this.writeUint32(a);this.writeUint32(b)};
jspb.BinaryEncoder.prototype.writeUnsignedVarint32=function(a){goog.asserts.assert(a==Math.floor(a));for(goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);127<a;)this.buffer_.push(a&127|128),a>>>=7;this.buffer_.push(a)};
jspb.BinaryEncoder.prototype.writeSignedVarint32=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);if(0<=a)this.writeUnsignedVarint32(a);else{for(var b=0;9>b;b++)this.buffer_.push(a&127|128),a>>=7;this.buffer_.push(1)}};
jspb.BinaryEncoder.prototype.writeUnsignedVarint64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_64);jspb.utils.splitInt64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeSignedVarint64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_63&&a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitInt64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeZigzagVarint32=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);this.writeUnsignedVarint32((a<<1^a>>31)>>>0)};jspb.BinaryEncoder.prototype.writeZigzagVarint64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_63&&a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitZigzag64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeZigzagVarint64String=function(a){this.writeZigzagVarintHash64(jspb.utils.decimalStringToHash64(a))};jspb.BinaryEncoder.prototype.writeZigzagVarintHash64=function(a){var b=this;jspb.utils.splitHash64(a);jspb.utils.toZigzag64(jspb.utils.split64Low,jspb.utils.split64High,function(a,d){b.writeSplitVarint64(a>>>0,d>>>0)})};
jspb.BinaryEncoder.prototype.writeUint8=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&256>a);this.buffer_.push(a>>>0&255)};jspb.BinaryEncoder.prototype.writeUint16=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&65536>a);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255)};
jspb.BinaryEncoder.prototype.writeUint32=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255);this.buffer_.push(a>>>16&255);this.buffer_.push(a>>>24&255)};jspb.BinaryEncoder.prototype.writeUint64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_64);jspb.utils.splitUint64(a);this.writeUint32(jspb.utils.split64Low);this.writeUint32(jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeInt8=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(-128<=a&&128>a);this.buffer_.push(a>>>0&255)};jspb.BinaryEncoder.prototype.writeInt16=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(-32768<=a&&32768>a);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255)};
jspb.BinaryEncoder.prototype.writeInt32=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255);this.buffer_.push(a>>>16&255);this.buffer_.push(a>>>24&255)};
jspb.BinaryEncoder.prototype.writeInt64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_63&&a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitInt64(a);this.writeSplitFixed64(jspb.utils.split64Low,jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeInt64String=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(+a>=-jspb.BinaryConstants.TWO_TO_63&&+a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(a));this.writeSplitFixed64(jspb.utils.split64Low,jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeFloat=function(a){goog.asserts.assert(Infinity===a||-Infinity===a||isNaN(a)||a>=-jspb.BinaryConstants.FLOAT32_MAX&&a<=jspb.BinaryConstants.FLOAT32_MAX);jspb.utils.splitFloat32(a);this.writeUint32(jspb.utils.split64Low)};
jspb.BinaryEncoder.prototype.writeDouble=function(a){goog.asserts.assert(Infinity===a||-Infinity===a||isNaN(a)||a>=-jspb.BinaryConstants.FLOAT64_MAX&&a<=jspb.BinaryConstants.FLOAT64_MAX);jspb.utils.splitFloat64(a);this.writeUint32(jspb.utils.split64Low);this.writeUint32(jspb.utils.split64High)};jspb.BinaryEncoder.prototype.writeBool=function(a){goog.asserts.assert("boolean"===typeof a||"number"===typeof a);this.buffer_.push(a?1:0)};
jspb.BinaryEncoder.prototype.writeEnum=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);this.writeSignedVarint32(a)};jspb.BinaryEncoder.prototype.writeBytes=function(a){this.buffer_.push.apply(this.buffer_,a)};jspb.BinaryEncoder.prototype.writeVarintHash64=function(a){jspb.utils.splitHash64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeFixedHash64=function(a){jspb.utils.splitHash64(a);this.writeUint32(jspb.utils.split64Low);this.writeUint32(jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeString=function(a){for(var b=this.buffer_.length,c=0;c<a.length;c++){var d=a.charCodeAt(c);if(128>d)this.buffer_.push(d);else if(2048>d)this.buffer_.push(d>>6|192),this.buffer_.push(d&63|128);else if(65536>d)if(55296<=d&&56319>=d&&c+1<a.length){var e=a.charCodeAt(c+1);56320<=e&&57343>=e&&(d=1024*(d-55296)+e-56320+65536,this.buffer_.push(d>>18|240),this.buffer_.push(d>>12&63|128),this.buffer_.push(d>>6&63|128),this.buffer_.push(d&63|128),c++)}else this.buffer_.push(d>>
12|224),this.buffer_.push(d>>6&63|128),this.buffer_.push(d&63|128)}return this.buffer_.length-b};jspb.arith={};jspb.arith.UInt64=function(a,b){this.lo=a;this.hi=b};jspb.arith.UInt64.prototype.cmp=function(a){return this.hi<a.hi||this.hi==a.hi&&this.lo<a.lo?-1:this.hi==a.hi&&this.lo==a.lo?0:1};jspb.arith.UInt64.prototype.rightShift=function(){return new jspb.arith.UInt64((this.lo>>>1|(this.hi&1)<<31)>>>0,this.hi>>>1>>>0)};jspb.arith.UInt64.prototype.leftShift=function(){return new jspb.arith.UInt64(this.lo<<1>>>0,(this.hi<<1|this.lo>>>31)>>>0)};
jspb.arith.UInt64.prototype.msb=function(){return!!(this.hi&2147483648)};jspb.arith.UInt64.prototype.lsb=function(){return!!(this.lo&1)};jspb.arith.UInt64.prototype.zero=function(){return 0==this.lo&&0==this.hi};jspb.arith.UInt64.prototype.add=function(a){return new jspb.arith.UInt64((this.lo+a.lo&4294967295)>>>0>>>0,((this.hi+a.hi&4294967295)>>>0)+(4294967296<=this.lo+a.lo?1:0)>>>0)};
jspb.arith.UInt64.prototype.sub=function(a){return new jspb.arith.UInt64((this.lo-a.lo&4294967295)>>>0>>>0,((this.hi-a.hi&4294967295)>>>0)-(0>this.lo-a.lo?1:0)>>>0)};jspb.arith.UInt64.mul32x32=function(a,b){var c=a&65535;a>>>=16;var d=b&65535,e=b>>>16;b=c*d+65536*(c*e&65535)+65536*(a*d&65535);for(c=a*e+(c*e>>>16)+(a*d>>>16);4294967296<=b;)b-=4294967296,c+=1;return new jspb.arith.UInt64(b>>>0,c>>>0)};
jspb.arith.UInt64.prototype.mul=function(a){var b=jspb.arith.UInt64.mul32x32(this.lo,a);a=jspb.arith.UInt64.mul32x32(this.hi,a);a.hi=a.lo;a.lo=0;return b.add(a)};
jspb.arith.UInt64.prototype.div=function(a){if(0==a)return[];var b=new jspb.arith.UInt64(0,0),c=new jspb.arith.UInt64(this.lo,this.hi);a=new jspb.arith.UInt64(a,0);for(var d=new jspb.arith.UInt64(1,0);!a.msb();)a=a.leftShift(),d=d.leftShift();for(;!d.zero();)0>=a.cmp(c)&&(b=b.add(d),c=c.sub(a)),a=a.rightShift(),d=d.rightShift();return[b,c]};jspb.arith.UInt64.prototype.toString=function(){for(var a="",b=this;!b.zero();){b=b.div(10);var c=b[0];a=b[1].lo+a;b=c}""==a&&(a="0");return a};
jspb.arith.UInt64.fromString=function(a){for(var b=new jspb.arith.UInt64(0,0),c=new jspb.arith.UInt64(0,0),d=0;d<a.length;d++){if("0">a[d]||"9"<a[d])return null;var e=parseInt(a[d],10);c.lo=e;b=b.mul(10).add(c)}return b};jspb.arith.UInt64.prototype.clone=function(){return new jspb.arith.UInt64(this.lo,this.hi)};jspb.arith.Int64=function(a,b){this.lo=a;this.hi=b};
jspb.arith.Int64.prototype.add=function(a){return new jspb.arith.Int64((this.lo+a.lo&4294967295)>>>0>>>0,((this.hi+a.hi&4294967295)>>>0)+(4294967296<=this.lo+a.lo?1:0)>>>0)};jspb.arith.Int64.prototype.sub=function(a){return new jspb.arith.Int64((this.lo-a.lo&4294967295)>>>0>>>0,((this.hi-a.hi&4294967295)>>>0)-(0>this.lo-a.lo?1:0)>>>0)};jspb.arith.Int64.prototype.clone=function(){return new jspb.arith.Int64(this.lo,this.hi)};
jspb.arith.Int64.prototype.toString=function(){var a=0!=(this.hi&2147483648),b=new jspb.arith.UInt64(this.lo,this.hi);a&&(b=(new jspb.arith.UInt64(0,0)).sub(b));return(a?"-":"")+b.toString()};jspb.arith.Int64.fromString=function(a){var b=0<a.length&&"-"==a[0];b&&(a=a.substring(1));a=jspb.arith.UInt64.fromString(a);if(null===a)return null;b&&(a=(new jspb.arith.UInt64(0,0)).sub(a));return new jspb.arith.Int64(a.lo,a.hi)};jspb.BinaryWriter=function(){this.blocks_=[];this.totalLength_=0;this.encoder_=new jspb.BinaryEncoder;this.bookmarks_=[]};jspb.BinaryWriter.prototype.appendUint8Array_=function(a){var b=this.encoder_.end();this.blocks_.push(b);this.blocks_.push(a);this.totalLength_+=b.length+a.length};
jspb.BinaryWriter.prototype.beginDelimited_=function(a){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);a=this.encoder_.end();this.blocks_.push(a);this.totalLength_+=a.length;a.push(this.totalLength_);return a};jspb.BinaryWriter.prototype.endDelimited_=function(a){var b=a.pop();b=this.totalLength_+this.encoder_.length()-b;for(goog.asserts.assert(0<=b);127<b;)a.push(b&127|128),b>>>=7,this.totalLength_++;a.push(b);this.totalLength_++};
jspb.BinaryWriter.prototype.writeSerializedMessage=function(a,b,c){this.appendUint8Array_(a.subarray(b,c))};jspb.BinaryWriter.prototype.maybeWriteSerializedMessage=function(a,b,c){null!=a&&null!=b&&null!=c&&this.writeSerializedMessage(a,b,c)};jspb.BinaryWriter.prototype.reset=function(){this.blocks_=[];this.encoder_.end();this.totalLength_=0;this.bookmarks_=[]};
jspb.BinaryWriter.prototype.getResultBuffer=function(){goog.asserts.assert(0==this.bookmarks_.length);for(var a=new Uint8Array(this.totalLength_+this.encoder_.length()),b=this.blocks_,c=b.length,d=0,e=0;e<c;e++){var f=b[e];a.set(f,d);d+=f.length}b=this.encoder_.end();a.set(b,d);d+=b.length;goog.asserts.assert(d==a.length);this.blocks_=[a];return a};jspb.BinaryWriter.prototype.getResultBase64String=function(a){return goog.crypt.base64.encodeByteArray(this.getResultBuffer(),a)};
jspb.BinaryWriter.prototype.beginSubMessage=function(a){this.bookmarks_.push(this.beginDelimited_(a))};jspb.BinaryWriter.prototype.endSubMessage=function(){goog.asserts.assert(0<=this.bookmarks_.length);this.endDelimited_(this.bookmarks_.pop())};jspb.BinaryWriter.prototype.writeFieldHeader_=function(a,b){goog.asserts.assert(1<=a&&a==Math.floor(a));this.encoder_.writeUnsignedVarint32(8*a+b)};
jspb.BinaryWriter.prototype.writeAny=function(a,b,c){var d=jspb.BinaryConstants.FieldType;switch(a){case d.DOUBLE:this.writeDouble(b,c);break;case d.FLOAT:this.writeFloat(b,c);break;case d.INT64:this.writeInt64(b,c);break;case d.UINT64:this.writeUint64(b,c);break;case d.INT32:this.writeInt32(b,c);break;case d.FIXED64:this.writeFixed64(b,c);break;case d.FIXED32:this.writeFixed32(b,c);break;case d.BOOL:this.writeBool(b,c);break;case d.STRING:this.writeString(b,c);break;case d.GROUP:goog.asserts.fail("Group field type not supported in writeAny()");
break;case d.MESSAGE:goog.asserts.fail("Message field type not supported in writeAny()");break;case d.BYTES:this.writeBytes(b,c);break;case d.UINT32:this.writeUint32(b,c);break;case d.ENUM:this.writeEnum(b,c);break;case d.SFIXED32:this.writeSfixed32(b,c);break;case d.SFIXED64:this.writeSfixed64(b,c);break;case d.SINT32:this.writeSint32(b,c);break;case d.SINT64:this.writeSint64(b,c);break;case d.FHASH64:this.writeFixedHash64(b,c);break;case d.VHASH64:this.writeVarintHash64(b,c);break;default:goog.asserts.fail("Invalid field type in writeAny()")}};
jspb.BinaryWriter.prototype.writeUnsignedVarint32_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeUnsignedVarint32(b))};jspb.BinaryWriter.prototype.writeSignedVarint32_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(b))};jspb.BinaryWriter.prototype.writeUnsignedVarint64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeUnsignedVarint64(b))};
jspb.BinaryWriter.prototype.writeSignedVarint64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint64(b))};jspb.BinaryWriter.prototype.writeZigzagVarint32_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint32(b))};jspb.BinaryWriter.prototype.writeZigzagVarint64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint64(b))};
jspb.BinaryWriter.prototype.writeZigzagVarint64String_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint64String(b))};jspb.BinaryWriter.prototype.writeZigzagVarintHash64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarintHash64(b))};
jspb.BinaryWriter.prototype.writeInt32=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeSignedVarint32_(a,b))};jspb.BinaryWriter.prototype.writeInt32String=function(a,b){null!=b&&(b=parseInt(b,10),goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeSignedVarint32_(a,b))};
jspb.BinaryWriter.prototype.writeInt64=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_63&&b<jspb.BinaryConstants.TWO_TO_63),this.writeSignedVarint64_(a,b))};jspb.BinaryWriter.prototype.writeInt64String=function(a,b){null!=b&&(b=jspb.arith.Int64.fromString(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSplitVarint64(b.lo,b.hi))};
jspb.BinaryWriter.prototype.writeUint32=function(a,b){null!=b&&(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32),this.writeUnsignedVarint32_(a,b))};jspb.BinaryWriter.prototype.writeUint32String=function(a,b){null!=b&&(b=parseInt(b,10),goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32),this.writeUnsignedVarint32_(a,b))};jspb.BinaryWriter.prototype.writeUint64=function(a,b){null!=b&&(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_64),this.writeUnsignedVarint64_(a,b))};
jspb.BinaryWriter.prototype.writeUint64String=function(a,b){null!=b&&(b=jspb.arith.UInt64.fromString(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSplitVarint64(b.lo,b.hi))};jspb.BinaryWriter.prototype.writeSint32=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeZigzagVarint32_(a,b))};
jspb.BinaryWriter.prototype.writeSint64=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_63&&b<jspb.BinaryConstants.TWO_TO_63),this.writeZigzagVarint64_(a,b))};jspb.BinaryWriter.prototype.writeSintHash64=function(a,b){null!=b&&this.writeZigzagVarintHash64_(a,b)};jspb.BinaryWriter.prototype.writeSint64String=function(a,b){null!=b&&this.writeZigzagVarint64String_(a,b)};
jspb.BinaryWriter.prototype.writeFixed32=function(a,b){null!=b&&(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeUint32(b))};jspb.BinaryWriter.prototype.writeFixed64=function(a,b){null!=b&&(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_64),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeUint64(b))};
jspb.BinaryWriter.prototype.writeFixed64String=function(a,b){null!=b&&(b=jspb.arith.UInt64.fromString(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeSplitFixed64(b.lo,b.hi))};jspb.BinaryWriter.prototype.writeSfixed32=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeInt32(b))};
jspb.BinaryWriter.prototype.writeSfixed64=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_63&&b<jspb.BinaryConstants.TWO_TO_63),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeInt64(b))};jspb.BinaryWriter.prototype.writeSfixed64String=function(a,b){null!=b&&(b=jspb.arith.Int64.fromString(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeSplitFixed64(b.lo,b.hi))};
jspb.BinaryWriter.prototype.writeFloat=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeFloat(b))};jspb.BinaryWriter.prototype.writeDouble=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeDouble(b))};
jspb.BinaryWriter.prototype.writeBool=function(a,b){null!=b&&(goog.asserts.assert("boolean"===typeof b||"number"===typeof b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeBool(b))};jspb.BinaryWriter.prototype.writeEnum=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(b))};
jspb.BinaryWriter.prototype.writeString=function(a,b){null!=b&&(a=this.beginDelimited_(a),this.encoder_.writeString(b),this.endDelimited_(a))};jspb.BinaryWriter.prototype.writeBytes=function(a,b){null!=b&&(b=jspb.utils.byteSourceToUint8Array(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(b.length),this.appendUint8Array_(b))};jspb.BinaryWriter.prototype.writeMessage=function(a,b,c){null!=b&&(a=this.beginDelimited_(a),c(b,this),this.endDelimited_(a))};
jspb.BinaryWriter.prototype.writeMessageSet=function(a,b,c){null!=b&&(this.writeFieldHeader_(1,jspb.BinaryConstants.WireType.START_GROUP),this.writeFieldHeader_(2,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(a),a=this.beginDelimited_(3),c(b,this),this.endDelimited_(a),this.writeFieldHeader_(1,jspb.BinaryConstants.WireType.END_GROUP))};
jspb.BinaryWriter.prototype.writeGroup=function(a,b,c){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.START_GROUP),c(b,this),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.END_GROUP))};jspb.BinaryWriter.prototype.writeFixedHash64=function(a,b){null!=b&&(goog.asserts.assert(8==b.length),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeFixedHash64(b))};
jspb.BinaryWriter.prototype.writeVarintHash64=function(a,b){null!=b&&(goog.asserts.assert(8==b.length),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeVarintHash64(b))};jspb.BinaryWriter.prototype.writeSplitFixed64=function(a,b,c){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64);this.encoder_.writeSplitFixed64(b,c)};
jspb.BinaryWriter.prototype.writeSplitVarint64=function(a,b,c){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT);this.encoder_.writeSplitVarint64(b,c)};jspb.BinaryWriter.prototype.writeSplitZigzagVarint64=function(a,b,c){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT);var d=this.encoder_;jspb.utils.toZigzag64(b,c,function(a,b){d.writeSplitVarint64(a>>>0,b>>>0)})};
jspb.BinaryWriter.prototype.writeRepeatedInt32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSignedVarint32_(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedInt32String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeInt32String(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedInt64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSignedVarint64_(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedSplitFixed64=function(a,b,c,d){if(null!=b)for(var e=0;e<b.length;e++)this.writeSplitFixed64(a,c(b[e]),d(b[e]))};jspb.BinaryWriter.prototype.writeRepeatedSplitVarint64=function(a,b,c,d){if(null!=b)for(var e=0;e<b.length;e++)this.writeSplitVarint64(a,c(b[e]),d(b[e]))};jspb.BinaryWriter.prototype.writeRepeatedSplitZigzagVarint64=function(a,b,c,d){if(null!=b)for(var e=0;e<b.length;e++)this.writeSplitZigzagVarint64(a,c(b[e]),d(b[e]))};
jspb.BinaryWriter.prototype.writeRepeatedInt64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeInt64String(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedUint32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUnsignedVarint32_(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedUint32String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUint32String(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedUint64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUnsignedVarint64_(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedUint64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUint64String(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedSint32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarint32_(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedSint64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarint64_(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedSint64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarint64String_(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedSintHash64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarintHash64_(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedFixed32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixed32(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedFixed64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixed64(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedFixed64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixed64String(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedSfixed32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSfixed32(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedSfixed64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSfixed64(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedSfixed64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSfixed64String(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedFloat=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFloat(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedDouble=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeDouble(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedBool=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeBool(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedEnum=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeEnum(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedString=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeString(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedBytes=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeBytes(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedMessage=function(a,b,c){if(null!=b)for(var d=0;d<b.length;d++){var e=this.beginDelimited_(a);c(b[d],this);this.endDelimited_(e)}};
jspb.BinaryWriter.prototype.writeRepeatedGroup=function(a,b,c){if(null!=b)for(var d=0;d<b.length;d++)this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.START_GROUP),c(b[d],this),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.END_GROUP)};jspb.BinaryWriter.prototype.writeRepeatedFixedHash64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixedHash64(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedVarintHash64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeVarintHash64(a,b[c])};jspb.BinaryWriter.prototype.writePackedInt32=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeSignedVarint32(b[c]);this.endDelimited_(a)}};
jspb.BinaryWriter.prototype.writePackedInt32String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeSignedVarint32(parseInt(b[c],10));this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedInt64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeSignedVarint64(b[c]);this.endDelimited_(a)}};
jspb.BinaryWriter.prototype.writePackedSplitFixed64=function(a,b,c,d){if(null!=b){a=this.beginDelimited_(a);for(var e=0;e<b.length;e++)this.encoder_.writeSplitFixed64(c(b[e]),d(b[e]));this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedSplitVarint64=function(a,b,c,d){if(null!=b){a=this.beginDelimited_(a);for(var e=0;e<b.length;e++)this.encoder_.writeSplitVarint64(c(b[e]),d(b[e]));this.endDelimited_(a)}};
jspb.BinaryWriter.prototype.writePackedSplitZigzagVarint64=function(a,b,c,d){if(null!=b){a=this.beginDelimited_(a);for(var e=this.encoder_,f=0;f<b.length;f++)jspb.utils.toZigzag64(c(b[f]),d(b[f]),function(a,b){e.writeSplitVarint64(a>>>0,b>>>0)});this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedInt64String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++){var d=jspb.arith.Int64.fromString(b[c]);this.encoder_.writeSplitVarint64(d.lo,d.hi)}this.endDelimited_(a)}};
jspb.BinaryWriter.prototype.writePackedUint32=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeUnsignedVarint32(b[c]);this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedUint32String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeUnsignedVarint32(parseInt(b[c],10));this.endDelimited_(a)}};
jspb.BinaryWriter.prototype.writePackedUint64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeUnsignedVarint64(b[c]);this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedUint64String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++){var d=jspb.arith.UInt64.fromString(b[c]);this.encoder_.writeSplitVarint64(d.lo,d.hi)}this.endDelimited_(a)}};
jspb.BinaryWriter.prototype.writePackedSint32=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeZigzagVarint32(b[c]);this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedSint64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeZigzagVarint64(b[c]);this.endDelimited_(a)}};
jspb.BinaryWriter.prototype.writePackedSint64String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeZigzagVarintHash64(jspb.utils.decimalStringToHash64(b[c]));this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedSintHash64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeZigzagVarintHash64(b[c]);this.endDelimited_(a)}};
jspb.BinaryWriter.prototype.writePackedFixed32=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(4*b.length),a=0;a<b.length;a++)this.encoder_.writeUint32(b[a])};jspb.BinaryWriter.prototype.writePackedFixed64=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeUint64(b[a])};
jspb.BinaryWriter.prototype.writePackedFixed64String=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++){var c=jspb.arith.UInt64.fromString(b[a]);this.encoder_.writeSplitFixed64(c.lo,c.hi)}};
jspb.BinaryWriter.prototype.writePackedSfixed32=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(4*b.length),a=0;a<b.length;a++)this.encoder_.writeInt32(b[a])};jspb.BinaryWriter.prototype.writePackedSfixed64=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeInt64(b[a])};
jspb.BinaryWriter.prototype.writePackedSfixed64String=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeInt64String(b[a])};jspb.BinaryWriter.prototype.writePackedFloat=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(4*b.length),a=0;a<b.length;a++)this.encoder_.writeFloat(b[a])};
jspb.BinaryWriter.prototype.writePackedDouble=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeDouble(b[a])};jspb.BinaryWriter.prototype.writePackedBool=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(b.length),a=0;a<b.length;a++)this.encoder_.writeBool(b[a])};
jspb.BinaryWriter.prototype.writePackedEnum=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeEnum(b[c]);this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedFixedHash64=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeFixedHash64(b[a])};
jspb.BinaryWriter.prototype.writePackedVarintHash64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeVarintHash64(b[c]);this.endDelimited_(a)}};jspb.Map=function(a,b){this.arr_=a;this.valueCtor_=b;this.map_={};this.arrClean=!0;0<this.arr_.length&&this.loadFromArray_()};jspb.Map.prototype.loadFromArray_=function(){for(var a=0;a<this.arr_.length;a++){var b=this.arr_[a],c=b[0];this.map_[c.toString()]=new jspb.Map.Entry_(c,b[1])}this.arrClean=!0};
jspb.Map.prototype.toArray=function(){if(this.arrClean){if(this.valueCtor_){var a=this.map_,b;for(b in a)if(Object.prototype.hasOwnProperty.call(a,b)){var c=a[b].valueWrapper;c&&c.toArray()}}}else{this.arr_.length=0;a=this.stringKeys_();a.sort();for(b=0;b<a.length;b++){var d=this.map_[a[b]];(c=d.valueWrapper)&&c.toArray();this.arr_.push([d.key,d.value])}this.arrClean=!0}return this.arr_};
jspb.Map.prototype.toObject=function(a,b){for(var c=this.toArray(),d=[],e=0;e<c.length;e++){var f=this.map_[c[e][0].toString()];this.wrapEntry_(f);var g=f.valueWrapper;g?(goog.asserts.assert(b),d.push([f.key,b(a,g)])):d.push([f.key,f.value])}return d};jspb.Map.fromObject=function(a,b,c){b=new jspb.Map([],b);for(var d=0;d<a.length;d++){var e=a[d][0],f=c(a[d][1]);b.set(e,f)}return b};jspb.Map.ArrayIteratorIterable_=function(a){this.idx_=0;this.arr_=a};
jspb.Map.ArrayIteratorIterable_.prototype.next=function(){return this.idx_<this.arr_.length?{done:!1,value:this.arr_[this.idx_++]}:{done:!0,value:void 0}};"undefined"!=typeof Symbol&&(jspb.Map.ArrayIteratorIterable_.prototype[Symbol.iterator]=function(){return this});jspb.Map.prototype.getLength=function(){return this.stringKeys_().length};jspb.Map.prototype.clear=function(){this.map_={};this.arrClean=!1};
jspb.Map.prototype.del=function(a){a=a.toString();var b=this.map_.hasOwnProperty(a);delete this.map_[a];this.arrClean=!1;return b};jspb.Map.prototype.getEntryList=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++){var d=this.map_[b[c]];a.push([d.key,d.value])}return a};jspb.Map.prototype.entries=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++){var d=this.map_[b[c]];a.push([d.key,this.wrapEntry_(d)])}return new jspb.Map.ArrayIteratorIterable_(a)};
jspb.Map.prototype.keys=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++)a.push(this.map_[b[c]].key);return new jspb.Map.ArrayIteratorIterable_(a)};jspb.Map.prototype.values=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++)a.push(this.wrapEntry_(this.map_[b[c]]));return new jspb.Map.ArrayIteratorIterable_(a)};
jspb.Map.prototype.forEach=function(a,b){var c=this.stringKeys_();c.sort();for(var d=0;d<c.length;d++){var e=this.map_[c[d]];a.call(b,this.wrapEntry_(e),e.key,this)}};jspb.Map.prototype.set=function(a,b){var c=new jspb.Map.Entry_(a);this.valueCtor_?(c.valueWrapper=b,c.value=b.toArray()):c.value=b;this.map_[a.toString()]=c;this.arrClean=!1;return this};jspb.Map.prototype.wrapEntry_=function(a){return this.valueCtor_?(a.valueWrapper||(a.valueWrapper=new this.valueCtor_(a.value)),a.valueWrapper):a.value};
jspb.Map.prototype.get=function(a){if(a=this.map_[a.toString()])return this.wrapEntry_(a)};jspb.Map.prototype.has=function(a){return a.toString()in this.map_};jspb.Map.prototype.serializeBinary=function(a,b,c,d,e){var f=this.stringKeys_();f.sort();for(var g=0;g<f.length;g++){var h=this.map_[f[g]];b.beginSubMessage(a);c.call(b,1,h.key);this.valueCtor_?d.call(b,2,this.wrapEntry_(h),e):d.call(b,2,h.value);b.endSubMessage()}};
jspb.Map.deserializeBinary=function(a,b,c,d,e,f,g){for(;b.nextField()&&!b.isEndGroup();){var h=b.getFieldNumber();1==h?f=c.call(b):2==h&&(a.valueCtor_?(goog.asserts.assert(e),g||(g=new a.valueCtor_),d.call(b,g,e)):g=d.call(b))}goog.asserts.assert(void 0!=f);goog.asserts.assert(void 0!=g);a.set(f,g)};jspb.Map.prototype.stringKeys_=function(){var a=this.map_,b=[],c;for(c in a)Object.prototype.hasOwnProperty.call(a,c)&&b.push(c);return b};
jspb.Map.Entry_=function(a,b){this.key=a;this.value=b;this.valueWrapper=void 0};jspb.ExtensionFieldInfo=function(a,b,c,d,e){this.fieldIndex=a;this.fieldName=b;this.ctor=c;this.toObjectFn=d;this.isRepeated=e};jspb.ExtensionFieldBinaryInfo=function(a,b,c,d,e,f){this.fieldInfo=a;this.binaryReaderFn=b;this.binaryWriterFn=c;this.binaryMessageSerializeFn=d;this.binaryMessageDeserializeFn=e;this.isPacked=f};jspb.ExtensionFieldInfo.prototype.isMessageType=function(){return!!this.ctor};jspb.Message=function(){};jspb.Message.GENERATE_TO_OBJECT=!0;jspb.Message.GENERATE_FROM_OBJECT=!goog.DISALLOW_TEST_ONLY_CODE;
jspb.Message.GENERATE_TO_STRING=!0;jspb.Message.ASSUME_LOCAL_ARRAYS=!1;jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS=!0;jspb.Message.SUPPORTS_UINT8ARRAY_="function"==typeof Uint8Array;jspb.Message.prototype.getJsPbMessageId=function(){return this.messageId_};jspb.Message.getIndex_=function(a,b){return b+a.arrayIndexOffset_};jspb.Message.hiddenES6Property_=function(){};jspb.Message.getFieldNumber_=function(a,b){return b-a.arrayIndexOffset_};
jspb.Message.initialize=function(a,b,c,d,e,f){a.wrappers_=null;b||(b=c?[c]:[]);a.messageId_=c?String(c):void 0;a.arrayIndexOffset_=0===c?-1:0;a.array=b;jspb.Message.initPivotAndExtensionObject_(a,d);a.convertedPrimitiveFields_={};jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS||(a.repeatedFields=e);if(e)for(b=0;b<e.length;b++)c=e[b],c<a.pivot_?(c=jspb.Message.getIndex_(a,c),a.array[c]=a.array[c]||jspb.Message.EMPTY_LIST_SENTINEL_):(jspb.Message.maybeInitEmptyExtensionObject_(a),a.extensionObject_[c]=
a.extensionObject_[c]||jspb.Message.EMPTY_LIST_SENTINEL_);if(f&&f.length)for(b=0;b<f.length;b++)jspb.Message.computeOneofCase(a,f[b])};jspb.Message.EMPTY_LIST_SENTINEL_=goog.DEBUG&&Object.freeze?Object.freeze([]):[];jspb.Message.isArray_=function(a){return jspb.Message.ASSUME_LOCAL_ARRAYS?a instanceof Array:Array.isArray(a)};jspb.Message.isExtensionObject_=function(a){return null!==a&&"object"==typeof a&&!jspb.Message.isArray_(a)&&!(jspb.Message.SUPPORTS_UINT8ARRAY_&&a instanceof Uint8Array)};
jspb.Message.initPivotAndExtensionObject_=function(a,b){var c=a.array.length,d=-1;if(c&&(d=c-1,c=a.array[d],jspb.Message.isExtensionObject_(c))){a.pivot_=jspb.Message.getFieldNumber_(a,d);a.extensionObject_=c;return}-1<b?(a.pivot_=Math.max(b,jspb.Message.getFieldNumber_(a,d+1)),a.extensionObject_=null):a.pivot_=Number.MAX_VALUE};jspb.Message.maybeInitEmptyExtensionObject_=function(a){var b=jspb.Message.getIndex_(a,a.pivot_);a.array[b]||(a.extensionObject_=a.array[b]={})};
jspb.Message.toObjectList=function(a,b,c){for(var d=[],e=0;e<a.length;e++)d[e]=b.call(a[e],c,a[e]);return d};jspb.Message.toObjectExtension=function(a,b,c,d,e){for(var f in c){var g=c[f],h=d.call(a,g);if(null!=h){for(var k in g.fieldName)if(g.fieldName.hasOwnProperty(k))break;b[k]=g.toObjectFn?g.isRepeated?jspb.Message.toObjectList(h,g.toObjectFn,e):g.toObjectFn(e,h):h}}};
jspb.Message.serializeBinaryExtensions=function(a,b,c,d){for(var e in c){var f=c[e],g=f.fieldInfo;if(!f.binaryWriterFn)throw Error("Message extension present that was generated without binary serialization support");var h=d.call(a,g);if(null!=h)if(g.isMessageType())if(f.binaryMessageSerializeFn)f.binaryWriterFn.call(b,g.fieldIndex,h,f.binaryMessageSerializeFn);else throw Error("Message extension present holding submessage without binary support enabled, and message is being serialized to binary format");
else f.binaryWriterFn.call(b,g.fieldIndex,h)}};jspb.Message.readBinaryExtension=function(a,b,c,d,e){var f=c[b.getFieldNumber()];if(f){c=f.fieldInfo;if(!f.binaryReaderFn)throw Error("Deserializing extension whose generated code does not support binary format");if(c.isMessageType()){var g=new c.ctor;f.binaryReaderFn.call(b,g,f.binaryMessageDeserializeFn)}else g=f.binaryReaderFn.call(b);c.isRepeated&&!f.isPacked?(b=d.call(a,c))?b.push(g):e.call(a,c,[g]):e.call(a,c,g)}else b.skipField()};
jspb.Message.getField=function(a,b){if(b<a.pivot_){b=jspb.Message.getIndex_(a,b);var c=a.array[b];return c===jspb.Message.EMPTY_LIST_SENTINEL_?a.array[b]=[]:c}if(a.extensionObject_)return c=a.extensionObject_[b],c===jspb.Message.EMPTY_LIST_SENTINEL_?a.extensionObject_[b]=[]:c};jspb.Message.getRepeatedField=function(a,b){return jspb.Message.getField(a,b)};jspb.Message.getOptionalFloatingPointField=function(a,b){a=jspb.Message.getField(a,b);return null==a?a:+a};
jspb.Message.getBooleanField=function(a,b){a=jspb.Message.getField(a,b);return null==a?a:!!a};jspb.Message.getRepeatedFloatingPointField=function(a,b){var c=jspb.Message.getRepeatedField(a,b);a.convertedPrimitiveFields_||(a.convertedPrimitiveFields_={});if(!a.convertedPrimitiveFields_[b]){for(var d=0;d<c.length;d++)c[d]=+c[d];a.convertedPrimitiveFields_[b]=!0}return c};
jspb.Message.getRepeatedBooleanField=function(a,b){var c=jspb.Message.getRepeatedField(a,b);a.convertedPrimitiveFields_||(a.convertedPrimitiveFields_={});if(!a.convertedPrimitiveFields_[b]){for(var d=0;d<c.length;d++)c[d]=!!c[d];a.convertedPrimitiveFields_[b]=!0}return c};
jspb.Message.bytesAsB64=function(a){if(null==a||"string"===typeof a)return a;if(jspb.Message.SUPPORTS_UINT8ARRAY_&&a instanceof Uint8Array)return goog.crypt.base64.encodeByteArray(a);goog.asserts.fail("Cannot coerce to b64 string: "+goog.typeOf(a));return null};jspb.Message.bytesAsU8=function(a){if(null==a||a instanceof Uint8Array)return a;if("string"===typeof a)return goog.crypt.base64.decodeStringToUint8Array(a);goog.asserts.fail("Cannot coerce to Uint8Array: "+goog.typeOf(a));return null};
jspb.Message.bytesListAsB64=function(a){jspb.Message.assertConsistentTypes_(a);return a.length&&"string"!==typeof a[0]?goog.array.map(a,jspb.Message.bytesAsB64):a};jspb.Message.bytesListAsU8=function(a){jspb.Message.assertConsistentTypes_(a);return!a.length||a[0]instanceof Uint8Array?a:goog.array.map(a,jspb.Message.bytesAsU8)};
jspb.Message.assertConsistentTypes_=function(a){if(goog.DEBUG&&a&&1<a.length){var b=goog.typeOf(a[0]);goog.array.forEach(a,function(a){goog.typeOf(a)!=b&&goog.asserts.fail("Inconsistent type in JSPB repeated field array. Got "+goog.typeOf(a)+" expected "+b)})}};jspb.Message.getFieldWithDefault=function(a,b,c){a=jspb.Message.getField(a,b);return null==a?c:a};jspb.Message.getBooleanFieldWithDefault=function(a,b,c){a=jspb.Message.getBooleanField(a,b);return null==a?c:a};
jspb.Message.getFloatingPointFieldWithDefault=function(a,b,c){a=jspb.Message.getOptionalFloatingPointField(a,b);return null==a?c:a};jspb.Message.getFieldProto3=jspb.Message.getFieldWithDefault;jspb.Message.getMapField=function(a,b,c,d){a.wrappers_||(a.wrappers_={});if(b in a.wrappers_)return a.wrappers_[b];var e=jspb.Message.getField(a,b);if(!e){if(c)return;e=[];jspb.Message.setField(a,b,e)}return a.wrappers_[b]=new jspb.Map(e,d)};
jspb.Message.setField=function(a,b,c){goog.asserts.assertInstanceof(a,jspb.Message);b<a.pivot_?a.array[jspb.Message.getIndex_(a,b)]=c:(jspb.Message.maybeInitEmptyExtensionObject_(a),a.extensionObject_[b]=c);return a};jspb.Message.setProto3IntField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,0)};jspb.Message.setProto3FloatField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,0)};
jspb.Message.setProto3BooleanField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,!1)};jspb.Message.setProto3StringField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,"")};jspb.Message.setProto3BytesField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,"")};jspb.Message.setProto3EnumField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,0)};
jspb.Message.setProto3StringIntField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,"0")};jspb.Message.setFieldIgnoringDefault_=function(a,b,c,d){goog.asserts.assertInstanceof(a,jspb.Message);c!==d?jspb.Message.setField(a,b,c):b<a.pivot_?a.array[jspb.Message.getIndex_(a,b)]=null:(jspb.Message.maybeInitEmptyExtensionObject_(a),delete a.extensionObject_[b]);return a};
jspb.Message.addToRepeatedField=function(a,b,c,d){goog.asserts.assertInstanceof(a,jspb.Message);b=jspb.Message.getRepeatedField(a,b);void 0!=d?b.splice(d,0,c):b.push(c);return a};jspb.Message.setOneofField=function(a,b,c,d){goog.asserts.assertInstanceof(a,jspb.Message);(c=jspb.Message.computeOneofCase(a,c))&&c!==b&&void 0!==d&&(a.wrappers_&&c in a.wrappers_&&(a.wrappers_[c]=void 0),jspb.Message.setField(a,c,void 0));return jspb.Message.setField(a,b,d)};
jspb.Message.computeOneofCase=function(a,b){for(var c,d,e=0;e<b.length;e++){var f=b[e],g=jspb.Message.getField(a,f);null!=g&&(c=f,d=g,jspb.Message.setField(a,f,void 0))}return c?(jspb.Message.setField(a,c,d),c):0};jspb.Message.getWrapperField=function(a,b,c,d){a.wrappers_||(a.wrappers_={});if(!a.wrappers_[c]){var e=jspb.Message.getField(a,c);if(d||e)a.wrappers_[c]=new b(e)}return a.wrappers_[c]};
jspb.Message.getRepeatedWrapperField=function(a,b,c){jspb.Message.wrapRepeatedField_(a,b,c);b=a.wrappers_[c];b==jspb.Message.EMPTY_LIST_SENTINEL_&&(b=a.wrappers_[c]=[]);return b};jspb.Message.wrapRepeatedField_=function(a,b,c){a.wrappers_||(a.wrappers_={});if(!a.wrappers_[c]){for(var d=jspb.Message.getRepeatedField(a,c),e=[],f=0;f<d.length;f++)e[f]=new b(d[f]);a.wrappers_[c]=e}};
jspb.Message.setWrapperField=function(a,b,c){goog.asserts.assertInstanceof(a,jspb.Message);a.wrappers_||(a.wrappers_={});var d=c?c.toArray():c;a.wrappers_[b]=c;return jspb.Message.setField(a,b,d)};jspb.Message.setOneofWrapperField=function(a,b,c,d){goog.asserts.assertInstanceof(a,jspb.Message);a.wrappers_||(a.wrappers_={});var e=d?d.toArray():d;a.wrappers_[b]=d;return jspb.Message.setOneofField(a,b,c,e)};
jspb.Message.setRepeatedWrapperField=function(a,b,c){goog.asserts.assertInstanceof(a,jspb.Message);a.wrappers_||(a.wrappers_={});c=c||[];for(var d=[],e=0;e<c.length;e++)d[e]=c[e].toArray();a.wrappers_[b]=c;return jspb.Message.setField(a,b,d)};
jspb.Message.addToRepeatedWrapperField=function(a,b,c,d,e){jspb.Message.wrapRepeatedField_(a,d,b);var f=a.wrappers_[b];f||(f=a.wrappers_[b]=[]);c=c?c:new d;a=jspb.Message.getRepeatedField(a,b);void 0!=e?(f.splice(e,0,c),a.splice(e,0,c.toArray())):(f.push(c),a.push(c.toArray()));return c};jspb.Message.toMap=function(a,b,c,d){for(var e={},f=0;f<a.length;f++)e[b.call(a[f])]=c?c.call(a[f],d,a[f]):a[f];return e};
jspb.Message.prototype.syncMapFields_=function(){if(this.wrappers_)for(var a in this.wrappers_){var b=this.wrappers_[a];if(Array.isArray(b))for(var c=0;c<b.length;c++)b[c]&&b[c].toArray();else b&&b.toArray()}};jspb.Message.prototype.toArray=function(){this.syncMapFields_();return this.array};jspb.Message.GENERATE_TO_STRING&&(jspb.Message.prototype.toString=function(){this.syncMapFields_();return this.array.toString()});
jspb.Message.prototype.getExtension=function(a){if(this.extensionObject_){this.wrappers_||(this.wrappers_={});var b=a.fieldIndex;if(a.isRepeated){if(a.isMessageType())return this.wrappers_[b]||(this.wrappers_[b]=goog.array.map(this.extensionObject_[b]||[],function(b){return new a.ctor(b)})),this.wrappers_[b]}else if(a.isMessageType())return!this.wrappers_[b]&&this.extensionObject_[b]&&(this.wrappers_[b]=new a.ctor(this.extensionObject_[b])),this.wrappers_[b];return this.extensionObject_[b]}};
jspb.Message.prototype.setExtension=function(a,b){this.wrappers_||(this.wrappers_={});jspb.Message.maybeInitEmptyExtensionObject_(this);var c=a.fieldIndex;a.isRepeated?(b=b||[],a.isMessageType()?(this.wrappers_[c]=b,this.extensionObject_[c]=goog.array.map(b,function(a){return a.toArray()})):this.extensionObject_[c]=b):a.isMessageType()?(this.wrappers_[c]=b,this.extensionObject_[c]=b?b.toArray():b):this.extensionObject_[c]=b;return this};
jspb.Message.difference=function(a,b){if(!(a instanceof b.constructor))throw Error("Messages have different types.");var c=a.toArray();b=b.toArray();var d=[],e=0,f=c.length>b.length?c.length:b.length;a.getJsPbMessageId()&&(d[0]=a.getJsPbMessageId(),e=1);for(;e<f;e++)jspb.Message.compareFields(c[e],b[e])||(d[e]=b[e]);return new a.constructor(d)};jspb.Message.equals=function(a,b){return a==b||!(!a||!b)&&a instanceof b.constructor&&jspb.Message.compareFields(a.toArray(),b.toArray())};
jspb.Message.compareExtensions=function(a,b){a=a||{};b=b||{};var c={},d;for(d in a)c[d]=0;for(d in b)c[d]=0;for(d in c)if(!jspb.Message.compareFields(a[d],b[d]))return!1;return!0};
jspb.Message.compareFields=function(a,b){if(a==b)return!0;if(!goog.isObject(a)||!goog.isObject(b))return"number"===typeof a&&isNaN(a)||"number"===typeof b&&isNaN(b)?String(a)==String(b):!1;if(a.constructor!=b.constructor)return!1;if(jspb.Message.SUPPORTS_UINT8ARRAY_&&a.constructor===Uint8Array){if(a.length!=b.length)return!1;for(var c=0;c<a.length;c++)if(a[c]!=b[c])return!1;return!0}if(a.constructor===Array){var d=void 0,e=void 0,f=Math.max(a.length,b.length);for(c=0;c<f;c++){var g=a[c],h=b[c];g&&
g.constructor==Object&&(goog.asserts.assert(void 0===d),goog.asserts.assert(c===a.length-1),d=g,g=void 0);h&&h.constructor==Object&&(goog.asserts.assert(void 0===e),goog.asserts.assert(c===b.length-1),e=h,h=void 0);if(!jspb.Message.compareFields(g,h))return!1}return d||e?(d=d||{},e=e||{},jspb.Message.compareExtensions(d,e)):!0}if(a.constructor===Object)return jspb.Message.compareExtensions(a,b);throw Error("Invalid type in JSPB array");};jspb.Message.prototype.cloneMessage=function(){return jspb.Message.cloneMessage(this)};
jspb.Message.prototype.clone=function(){return jspb.Message.cloneMessage(this)};jspb.Message.clone=function(a){return jspb.Message.cloneMessage(a)};jspb.Message.cloneMessage=function(a){return new a.constructor(jspb.Message.clone_(a.toArray()))};
jspb.Message.copyInto=function(a,b){goog.asserts.assertInstanceof(a,jspb.Message);goog.asserts.assertInstanceof(b,jspb.Message);goog.asserts.assert(a.constructor==b.constructor,"Copy source and target message should have the same type.");a=jspb.Message.clone(a);for(var c=b.toArray(),d=a.toArray(),e=c.length=0;e<d.length;e++)c[e]=d[e];b.wrappers_=a.wrappers_;b.extensionObject_=a.extensionObject_};
jspb.Message.clone_=function(a){if(Array.isArray(a)){for(var b=Array(a.length),c=0;c<a.length;c++){var d=a[c];null!=d&&(b[c]="object"==typeof d?jspb.Message.clone_(goog.asserts.assert(d)):d)}return b}if(jspb.Message.SUPPORTS_UINT8ARRAY_&&a instanceof Uint8Array)return new Uint8Array(a);b={};for(c in a)d=a[c],null!=d&&(b[c]="object"==typeof d?jspb.Message.clone_(goog.asserts.assert(d)):d);return b};jspb.Message.registerMessageType=function(a,b){b.messageId=a};jspb.Message.messageSetExtensions={};
jspb.Message.messageSetExtensionsBinary={};jspb.Export={};exports.Map=jspb.Map;exports.Message=jspb.Message;exports.BinaryReader=jspb.BinaryReader;exports.BinaryWriter=jspb.BinaryWriter;exports.ExtensionFieldInfo=jspb.ExtensionFieldInfo;exports.ExtensionFieldBinaryInfo=jspb.ExtensionFieldBinaryInfo;exports.exportSymbol=goog.exportSymbol;exports.inherits=goog.inherits;exports.object={extend:goog.object.extend};exports.typeOf=goog.typeOf;

}).call(this,require("qC859L"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\node_modules\\google-protobuf\\google-protobuf.js","/..\\node_modules\\google-protobuf")
},{"buffer":3,"qC859L":6}],5:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

}).call(this,require("qC859L"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\node_modules\\ieee754\\index.js","/..\\node_modules\\ieee754")
},{"buffer":3,"qC859L":6}],6:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

}).call(this,require("qC859L"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\node_modules\\process\\browser.js","/..\\node_modules\\process")
},{"buffer":3,"qC859L":6}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
