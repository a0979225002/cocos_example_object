{
  "__type__": "cc.EffectAsset",
  "_name": "edgeHighlight",
  "_objFlags": 0,
  "_native": "",
  "properties": null,
  "techniques": [
    {
      "passes": [
        {
          "blendState": {
            "targets": [
              {
                "blend": true
              }
            ]
          },
          "rasterizerState": {
            "cullMode": 0
          },
          "properties": {
            "texture": {
              "value": "white",
              "type": 29
            },
            "hightlightColor": {
              "value": [
                1,
                1,
                1,
                1
              ],
              "editor": {
                "type": "color"
              },
              "type": 16
            },
            "textureSize": {
              "value": [
                128,
                128
              ],
              "type": 14
            },
            "radius": {
              "value": [
                0
              ],
              "type": 13
            }
          },
          "program": "edgeHighlight|vs|fs"
        }
      ]
    }
  ],
  "shaders": [
    {
      "hash": 2025414005,
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision lowp float;\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform myUniform{\n  vec4 hightlightColor;\n  vec2 textureSize;\n  float radius;\n};\n#endif\nvec4 getColorFromTexture(sampler2D texture,vec2 uv){\n    vec4 color=vec4(1,1,1,1);\n  vec4 texture_tmp = texture(texture, uv);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    color.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    color.a *= texture_tmp.a;\n  #else\n    color *= texture_tmp;\n  #endif\n    return color;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  float unitWidth=1.0/textureSize.x;\n  float unitHeight=1.0/textureSize.y;\n  float width=radius*unitWidth;\n  float height=radius*unitHeight;\n  float angle=0.0;\n  float maxAlpha=0.0;\n  for(int i=0;i<16;i++){\n      angle+=1.0/float(16)*2.0*3.14159265359;\n      vec2 testPoint_uv=vec2(width*cos(angle),height*sin(angle));\n      testPoint_uv=clamp(v_uv0+testPoint_uv,vec2(0,0),vec2(1,1));\n      float tempAlpha=getColorFromTexture(texture,testPoint_uv).a;\n      maxAlpha=max(maxAlpha,tempAlpha);\n  }\n  vec4 finalColor=mix(vec4(0.0),hightlightColor,maxAlpha);\n  o=getColorFromTexture(texture,v_uv0);\n  o*=v_color;\n  gl_FragColor = mix(finalColor,o,o.a);\n}"
      },
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision lowp float;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec4 hightlightColor;\nuniform vec2 textureSize;\nuniform float radius;\n#endif\nvec4 getColorFromTexture(sampler2D texture,vec2 uv){\n    vec4 color=vec4(1,1,1,1);\n  vec4 texture_tmp = texture2D(texture, uv);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    color.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    color.a *= texture_tmp.a;\n  #else\n    color *= texture_tmp;\n  #endif\n    return color;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  float unitWidth=1.0/textureSize.x;\n  float unitHeight=1.0/textureSize.y;\n  float width=radius*unitWidth;\n  float height=radius*unitHeight;\n  float angle=0.0;\n  float maxAlpha=0.0;\n  for(int i=0;i<16;i++){\n      angle+=1.0/float(16)*2.0*3.14159265359;\n      vec2 testPoint_uv=vec2(width*cos(angle),height*sin(angle));\n      testPoint_uv=clamp(v_uv0+testPoint_uv,vec2(0,0),vec2(1,1));\n      float tempAlpha=getColorFromTexture(texture,testPoint_uv).a;\n      maxAlpha=max(maxAlpha,tempAlpha);\n  }\n  vec4 finalColor=mix(vec4(0.0),hightlightColor,maxAlpha);\n  o=getColorFromTexture(texture,v_uv0);\n  o*=v_color;\n  gl_FragColor = mix(finalColor,o,o.a);\n}"
      },
      "builtins": {
        "globals": {
          "blocks": [
            {
              "name": "CCGlobal",
              "defines": []
            }
          ],
          "samplers": []
        },
        "locals": {
          "blocks": [
            {
              "name": "CCLocal",
              "defines": []
            }
          ],
          "samplers": []
        }
      },
      "defines": [
        {
          "name": "USE_TEXTURE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "CC_USE_MODEL",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "CC_USE_ALPHA_ATLAS_texture",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "INPUT_IS_GAMMA",
          "type": "boolean",
          "defines": []
        }
      ],
      "blocks": [
        {
          "name": "myUniform",
          "members": [
            {
              "name": "hightlightColor",
              "type": 16,
              "count": 1
            },
            {
              "name": "textureSize",
              "type": 14,
              "count": 1
            },
            {
              "name": "radius",
              "type": 13,
              "count": 1
            }
          ],
          "defines": [
            "USE_TEXTURE"
          ],
          "binding": 0
        }
      ],
      "samplers": [
        {
          "name": "texture",
          "type": 29,
          "count": 1,
          "defines": [
            "USE_TEXTURE"
          ],
          "binding": 30
        }
      ],
      "record": null,
      "name": "edgeHighlight|vs|fs"
    }
  ]
}