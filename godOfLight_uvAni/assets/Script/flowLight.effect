CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: 
          value: white 
        u_time:  
          value: 0.1
}%

CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  #define TAU 6.12
  #define MAX_ITER 4 

  #include <alpha-test>
  #include <texture>
  #include <cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif


  uniform ARGS {
    vec4 UVoffset;
    float u_time;
    float rotated;
  };

   void main()
  {
    float u_time = u_time * .5+5.;
    vec2 UVnormalize;
    UVnormalize.x = (v_uv0.x-UVoffset.x)/(UVoffset.z-UVoffset.x);
    UVnormalize.y = (v_uv0.y-UVoffset.y)/(UVoffset.w-UVoffset.y);
    if(rotated > 0.5)
    {
      float temp = UVnormalize.x;
      UVnormalize.x = UVnormalize.y;
      UVnormalize.y = 1.0 - temp;
    }

    vec2 uv = v_uv0.xy;

    vec2 p = mod(uv*TAU, TAU)-250.0;

    vec2 i = vec2(p);
    float c = 1.0;
    float inten = .0065;

    for (int n = 0; n < MAX_ITER; n++) {
      float t =  u_time * (1.0 - (3.5 / float(n+1)));
      i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(1.5*t + i.x));
      c += 1.0/length(vec2(p.x / (cos(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));
    }
    c /= float(MAX_ITER);
    c = 1.17-pow(c, 1.4);
    vec4 tex = texture2D(texture,v_uv0);
    vec3 colour = vec3(pow(abs(c), 20.0));
    colour = clamp(colour + vec3(0.0, 0.0, .0), 0.0, tex.a);

    // 混合材質
    float alpha = c*tex[3];  
    tex[0] = tex[0] + colour[0]*alpha; 
    tex[1] = tex[1] + colour[1]*alpha; 
    tex[2] = tex[2] + colour[2]*alpha; 
    gl_FragColor = vec4(v_color.r, v_color.g, v_color.b,v_color.a) * tex*1.5;
  }
}%
